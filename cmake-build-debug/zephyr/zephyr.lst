
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 0f 00 20 71 14 00 08 cf 3f 00 08 29 14 00 08     ... q....?..)...
 8000010:	29 14 00 08 29 14 00 08 29 14 00 08 00 00 00 00     )...)...).......
	...
 800002c:	f9 10 00 08 29 14 00 08 00 00 00 00 a5 10 00 08     ....)...........
 800003c:	a1 26 00 08                                         .&..

08000040 <_irq_vector_table>:
 8000040:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000050:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000060:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000070:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000080:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000090:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000a0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000b0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000c0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000d0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000e0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 80000f0:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000100:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000110:	d1 11 00 08 d1 11 00 08 d1 11 00 08 d1 11 00 08     ................
 8000120:	d1 11 00 08                                         ....

Disassembly of section text:

08000124 <__aeabi_uldivmod>:
 8000124:	b953      	cbnz	r3, 800013c <__aeabi_uldivmod+0x18>
 8000126:	b94a      	cbnz	r2, 800013c <__aeabi_uldivmod+0x18>
 8000128:	2900      	cmp	r1, #0
 800012a:	bf08      	it	eq
 800012c:	2800      	cmpeq	r0, #0
 800012e:	bf1c      	itt	ne
 8000130:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000134:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000138:	f000 b80c 	b.w	8000154 <__aeabi_idiv0>
 800013c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000140:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000144:	f000 f808 	bl	8000158 <__udivmoddi4>
 8000148:	f8dd e004 	ldr.w	lr, [sp, #4]
 800014c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000150:	b004      	add	sp, #16
 8000152:	4770      	bx	lr

08000154 <__aeabi_idiv0>:
 8000154:	4770      	bx	lr
 8000156:	bf00      	nop

08000158 <__udivmoddi4>:
 8000158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800015c:	4607      	mov	r7, r0
 800015e:	468c      	mov	ip, r1
 8000160:	4608      	mov	r0, r1
 8000162:	4615      	mov	r5, r2
 8000164:	463c      	mov	r4, r7
 8000166:	4619      	mov	r1, r3
 8000168:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800016a:	2b00      	cmp	r3, #0
 800016c:	f040 80c6 	bne.w	80002fc <__udivmoddi4+0x1a4>
 8000170:	4282      	cmp	r2, r0
 8000172:	fab2 f782 	clz	r7, r2
 8000176:	d946      	bls.n	8000206 <__udivmoddi4+0xae>
 8000178:	b14f      	cbz	r7, 800018e <__udivmoddi4+0x36>
 800017a:	f1c7 0e20 	rsb	lr, r7, #32
 800017e:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000182:	fa00 f307 	lsl.w	r3, r0, r7
 8000186:	40bd      	lsls	r5, r7
 8000188:	ea4e 0c03 	orr.w	ip, lr, r3
 800018c:	40bc      	lsls	r4, r7
 800018e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000192:	fbbc f9f8 	udiv	r9, ip, r8
 8000196:	fa1f fe85 	uxth.w	lr, r5
 800019a:	fb08 c319 	mls	r3, r8, r9, ip
 800019e:	fb09 fa0e 	mul.w	sl, r9, lr
 80001a2:	0c22      	lsrs	r2, r4, #16
 80001a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80001a8:	459a      	cmp	sl, r3
 80001aa:	d928      	bls.n	80001fe <__udivmoddi4+0xa6>
 80001ac:	18eb      	adds	r3, r5, r3
 80001ae:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80001b2:	d204      	bcs.n	80001be <__udivmoddi4+0x66>
 80001b4:	459a      	cmp	sl, r3
 80001b6:	d902      	bls.n	80001be <__udivmoddi4+0x66>
 80001b8:	f1a9 0002 	sub.w	r0, r9, #2
 80001bc:	442b      	add	r3, r5
 80001be:	eba3 030a 	sub.w	r3, r3, sl
 80001c2:	fbb3 f2f8 	udiv	r2, r3, r8
 80001c6:	fb08 3312 	mls	r3, r8, r2, r3
 80001ca:	fb02 fe0e 	mul.w	lr, r2, lr
 80001ce:	b2a4      	uxth	r4, r4
 80001d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001d4:	45a6      	cmp	lr, r4
 80001d6:	d914      	bls.n	8000202 <__udivmoddi4+0xaa>
 80001d8:	192c      	adds	r4, r5, r4
 80001da:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80001de:	d203      	bcs.n	80001e8 <__udivmoddi4+0x90>
 80001e0:	45a6      	cmp	lr, r4
 80001e2:	d901      	bls.n	80001e8 <__udivmoddi4+0x90>
 80001e4:	1e93      	subs	r3, r2, #2
 80001e6:	442c      	add	r4, r5
 80001e8:	eba4 040e 	sub.w	r4, r4, lr
 80001ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80001f0:	b11e      	cbz	r6, 80001fa <__udivmoddi4+0xa2>
 80001f2:	2300      	movs	r3, #0
 80001f4:	40fc      	lsrs	r4, r7
 80001f6:	6034      	str	r4, [r6, #0]
 80001f8:	6073      	str	r3, [r6, #4]
 80001fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001fe:	4648      	mov	r0, r9
 8000200:	e7dd      	b.n	80001be <__udivmoddi4+0x66>
 8000202:	4613      	mov	r3, r2
 8000204:	e7f0      	b.n	80001e8 <__udivmoddi4+0x90>
 8000206:	b902      	cbnz	r2, 800020a <__udivmoddi4+0xb2>
 8000208:	deff      	udf	#255	; 0xff
 800020a:	bb87      	cbnz	r7, 800026e <__udivmoddi4+0x116>
 800020c:	2101      	movs	r1, #1
 800020e:	1a83      	subs	r3, r0, r2
 8000210:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000214:	fbb3 fcfe 	udiv	ip, r3, lr
 8000218:	b2aa      	uxth	r2, r5
 800021a:	fb0e 331c 	mls	r3, lr, ip, r3
 800021e:	fb0c f802 	mul.w	r8, ip, r2
 8000222:	0c20      	lsrs	r0, r4, #16
 8000224:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000228:	4598      	cmp	r8, r3
 800022a:	d963      	bls.n	80002f4 <__udivmoddi4+0x19c>
 800022c:	18eb      	adds	r3, r5, r3
 800022e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000232:	d204      	bcs.n	800023e <__udivmoddi4+0xe6>
 8000234:	4598      	cmp	r8, r3
 8000236:	d902      	bls.n	800023e <__udivmoddi4+0xe6>
 8000238:	f1ac 0002 	sub.w	r0, ip, #2
 800023c:	442b      	add	r3, r5
 800023e:	eba3 0308 	sub.w	r3, r3, r8
 8000242:	fbb3 fcfe 	udiv	ip, r3, lr
 8000246:	fb0e 331c 	mls	r3, lr, ip, r3
 800024a:	fb0c f202 	mul.w	r2, ip, r2
 800024e:	b2a4      	uxth	r4, r4
 8000250:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000254:	42a2      	cmp	r2, r4
 8000256:	d94f      	bls.n	80002f8 <__udivmoddi4+0x1a0>
 8000258:	192c      	adds	r4, r5, r4
 800025a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800025e:	d204      	bcs.n	800026a <__udivmoddi4+0x112>
 8000260:	42a2      	cmp	r2, r4
 8000262:	d902      	bls.n	800026a <__udivmoddi4+0x112>
 8000264:	f1ac 0302 	sub.w	r3, ip, #2
 8000268:	442c      	add	r4, r5
 800026a:	1aa4      	subs	r4, r4, r2
 800026c:	e7be      	b.n	80001ec <__udivmoddi4+0x94>
 800026e:	f1c7 0c20 	rsb	ip, r7, #32
 8000272:	40bd      	lsls	r5, r7
 8000274:	fa20 f80c 	lsr.w	r8, r0, ip
 8000278:	fa00 f307 	lsl.w	r3, r0, r7
 800027c:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000284:	ea4c 0203 	orr.w	r2, ip, r3
 8000288:	fbb8 fcfe 	udiv	ip, r8, lr
 800028c:	b2ab      	uxth	r3, r5
 800028e:	fb0e 801c 	mls	r0, lr, ip, r8
 8000292:	fb0c f903 	mul.w	r9, ip, r3
 8000296:	0c11      	lsrs	r1, r2, #16
 8000298:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 800029c:	4581      	cmp	r9, r0
 800029e:	fa04 f407 	lsl.w	r4, r4, r7
 80002a2:	d923      	bls.n	80002ec <__udivmoddi4+0x194>
 80002a4:	1828      	adds	r0, r5, r0
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80002aa:	d204      	bcs.n	80002b6 <__udivmoddi4+0x15e>
 80002ac:	4581      	cmp	r9, r0
 80002ae:	d902      	bls.n	80002b6 <__udivmoddi4+0x15e>
 80002b0:	f1ac 0102 	sub.w	r1, ip, #2
 80002b4:	4428      	add	r0, r5
 80002b6:	eba0 0009 	sub.w	r0, r0, r9
 80002ba:	fbb0 fcfe 	udiv	ip, r0, lr
 80002be:	fb0e 001c 	mls	r0, lr, ip, r0
 80002c2:	fb0c f803 	mul.w	r8, ip, r3
 80002c6:	b292      	uxth	r2, r2
 80002c8:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 80002cc:	4598      	cmp	r8, r3
 80002ce:	d90f      	bls.n	80002f0 <__udivmoddi4+0x198>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80002d6:	d204      	bcs.n	80002e2 <__udivmoddi4+0x18a>
 80002d8:	4598      	cmp	r8, r3
 80002da:	d902      	bls.n	80002e2 <__udivmoddi4+0x18a>
 80002dc:	f1ac 0202 	sub.w	r2, ip, #2
 80002e0:	442b      	add	r3, r5
 80002e2:	eba3 0308 	sub.w	r3, r3, r8
 80002e6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80002ea:	e791      	b.n	8000210 <__udivmoddi4+0xb8>
 80002ec:	4661      	mov	r1, ip
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0x15e>
 80002f0:	4662      	mov	r2, ip
 80002f2:	e7f6      	b.n	80002e2 <__udivmoddi4+0x18a>
 80002f4:	4660      	mov	r0, ip
 80002f6:	e7a2      	b.n	800023e <__udivmoddi4+0xe6>
 80002f8:	4663      	mov	r3, ip
 80002fa:	e7b6      	b.n	800026a <__udivmoddi4+0x112>
 80002fc:	4283      	cmp	r3, r0
 80002fe:	d905      	bls.n	800030c <__udivmoddi4+0x1b4>
 8000300:	b10e      	cbz	r6, 8000306 <__udivmoddi4+0x1ae>
 8000302:	e9c6 7000 	strd	r7, r0, [r6]
 8000306:	2100      	movs	r1, #0
 8000308:	4608      	mov	r0, r1
 800030a:	e776      	b.n	80001fa <__udivmoddi4+0xa2>
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	b981      	cbnz	r1, 8000334 <__udivmoddi4+0x1dc>
 8000312:	4283      	cmp	r3, r0
 8000314:	d301      	bcc.n	800031a <__udivmoddi4+0x1c2>
 8000316:	42ba      	cmp	r2, r7
 8000318:	d80a      	bhi.n	8000330 <__udivmoddi4+0x1d8>
 800031a:	1abc      	subs	r4, r7, r2
 800031c:	eb60 0303 	sbc.w	r3, r0, r3
 8000320:	2001      	movs	r0, #1
 8000322:	469c      	mov	ip, r3
 8000324:	2e00      	cmp	r6, #0
 8000326:	d068      	beq.n	80003fa <__udivmoddi4+0x2a2>
 8000328:	e9c6 4c00 	strd	r4, ip, [r6]
 800032c:	2100      	movs	r1, #0
 800032e:	e764      	b.n	80001fa <__udivmoddi4+0xa2>
 8000330:	4608      	mov	r0, r1
 8000332:	e7f7      	b.n	8000324 <__udivmoddi4+0x1cc>
 8000334:	f1c1 0c20 	rsb	ip, r1, #32
 8000338:	408b      	lsls	r3, r1
 800033a:	fa22 f40c 	lsr.w	r4, r2, ip
 800033e:	431c      	orrs	r4, r3
 8000340:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000344:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000348:	fbbb f8f9 	udiv	r8, fp, r9
 800034c:	fa1f fe84 	uxth.w	lr, r4
 8000350:	fb09 bb18 	mls	fp, r9, r8, fp
 8000354:	fb08 fa0e 	mul.w	sl, r8, lr
 8000358:	fa02 f501 	lsl.w	r5, r2, r1
 800035c:	fa00 f301 	lsl.w	r3, r0, r1
 8000360:	fa27 f20c 	lsr.w	r2, r7, ip
 8000364:	4313      	orrs	r3, r2
 8000366:	0c1a      	lsrs	r2, r3, #16
 8000368:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 800036c:	4592      	cmp	sl, r2
 800036e:	fa07 f701 	lsl.w	r7, r7, r1
 8000372:	d93e      	bls.n	80003f2 <__udivmoddi4+0x29a>
 8000374:	18a2      	adds	r2, r4, r2
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800037a:	d204      	bcs.n	8000386 <__udivmoddi4+0x22e>
 800037c:	4592      	cmp	sl, r2
 800037e:	d902      	bls.n	8000386 <__udivmoddi4+0x22e>
 8000380:	f1a8 0002 	sub.w	r0, r8, #2
 8000384:	4422      	add	r2, r4
 8000386:	eba2 020a 	sub.w	r2, r2, sl
 800038a:	fbb2 f8f9 	udiv	r8, r2, r9
 800038e:	fb09 2218 	mls	r2, r9, r8, r2
 8000392:	fb08 fe0e 	mul.w	lr, r8, lr
 8000396:	b29b      	uxth	r3, r3
 8000398:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800039c:	4596      	cmp	lr, r2
 800039e:	d92a      	bls.n	80003f6 <__udivmoddi4+0x29e>
 80003a0:	18a2      	adds	r2, r4, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80003a6:	d204      	bcs.n	80003b2 <__udivmoddi4+0x25a>
 80003a8:	4596      	cmp	lr, r2
 80003aa:	d902      	bls.n	80003b2 <__udivmoddi4+0x25a>
 80003ac:	f1a8 0302 	sub.w	r3, r8, #2
 80003b0:	4422      	add	r2, r4
 80003b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b6:	fba0 9305 	umull	r9, r3, r0, r5
 80003ba:	eba2 020e 	sub.w	r2, r2, lr
 80003be:	429a      	cmp	r2, r3
 80003c0:	46ce      	mov	lr, r9
 80003c2:	4698      	mov	r8, r3
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0x274>
 80003c6:	d106      	bne.n	80003d6 <__udivmoddi4+0x27e>
 80003c8:	454f      	cmp	r7, r9
 80003ca:	d204      	bcs.n	80003d6 <__udivmoddi4+0x27e>
 80003cc:	ebb9 0e05 	subs.w	lr, r9, r5
 80003d0:	eb63 0804 	sbc.w	r8, r3, r4
 80003d4:	3801      	subs	r0, #1
 80003d6:	b186      	cbz	r6, 80003fa <__udivmoddi4+0x2a2>
 80003d8:	ebb7 030e 	subs.w	r3, r7, lr
 80003dc:	eb62 0708 	sbc.w	r7, r2, r8
 80003e0:	fa07 fc0c 	lsl.w	ip, r7, ip
 80003e4:	40cb      	lsrs	r3, r1
 80003e6:	ea4c 0303 	orr.w	r3, ip, r3
 80003ea:	40cf      	lsrs	r7, r1
 80003ec:	e9c6 3700 	strd	r3, r7, [r6]
 80003f0:	e79c      	b.n	800032c <__udivmoddi4+0x1d4>
 80003f2:	4640      	mov	r0, r8
 80003f4:	e7c7      	b.n	8000386 <__udivmoddi4+0x22e>
 80003f6:	4643      	mov	r3, r8
 80003f8:	e7db      	b.n	80003b2 <__udivmoddi4+0x25a>
 80003fa:	4631      	mov	r1, r6
 80003fc:	e6fd      	b.n	80001fa <__udivmoddi4+0xa2>
	...

08000400 <event_cb>:
        err = uart_tx(uart_dev, buf_tx, strlen("Next\n"), SYS_FOREVER_MS);
    }
}

static void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
    switch (evt->type) {
 8000400:	780b      	ldrb	r3, [r1, #0]
 8000402:	b93b      	cbnz	r3, 8000414 <event_cb+0x14>
static void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
 8000404:	b510      	push	{r4, lr}
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8000406:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
 8000408:	68dc      	ldr	r4, [r3, #12]
 800040a:	2301      	movs	r3, #1
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	4902      	ldr	r1, [pc, #8]	; (8000418 <event_cb+0x18>)
 8000410:	47a0      	blx	r4
            break;
        case UART_RX_STOPPED:
            break;
            break;
    }
 8000412:	bd10      	pop	{r4, pc}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	200004c0 	.word	0x200004c0

0800041c <uart_config>:
                 uint8_t flow_ctrl, uint8_t parity, uint8_t stop_bits) {
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	460e      	mov	r6, r1
 8000422:	4615      	mov	r5, r2
 8000424:	461c      	mov	r4, r3
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000426:	f002 fb61 	bl	8002aec <z_impl_device_get_binding>
    uart_dev = device_get_binding(dev_name);
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <uart_config+0x50>)
 800042c:	6018      	str	r0, [r3, #0]
    struct uart_config uart_cfg = {
 800042e:	9600      	str	r6, [sp, #0]
 8000430:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000434:	f88d 3004 	strb.w	r3, [sp, #4]
 8000438:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800043c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000440:	f88d 5006 	strb.w	r5, [sp, #6]
 8000444:	f88d 4007 	strb.w	r4, [sp, #7]
			     const struct uart_config *cfg);

static inline int z_impl_uart_configure(const struct device *dev,
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
 8000448:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
 800044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044c:	b12b      	cbz	r3, 800045a <uart_config+0x3e>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
 800044e:	4669      	mov	r1, sp
 8000450:	4798      	blx	r3
    if(ret < 0) {
 8000452:	2800      	cmp	r0, #0
 8000454:	db04      	blt.n	8000460 <uart_config+0x44>
}
 8000456:	b002      	add	sp, #8
 8000458:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSYS;
 800045a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800045e:	e7f8      	b.n	8000452 <uart_config+0x36>
        printk(" Error uart_configure %d\n", ret);
 8000460:	4601      	mov	r1, r0
 8000462:	4803      	ldr	r0, [pc, #12]	; (8000470 <uart_config+0x54>)
 8000464:	f003 fbc9 	bl	8003bfa <printk>
        return;
 8000468:	e7f5      	b.n	8000456 <uart_config+0x3a>
 800046a:	bf00      	nop
 800046c:	20000974 	.word	0x20000974
 8000470:	08005e08 	.word	0x08005e08

08000474 <load_image>:
void load_image(void) {
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	e017      	b.n	80004a8 <load_image+0x34>
            printk(" Error uart_rx_enable. Error code: %d\n", err);
 8000478:	4601      	mov	r1, r0
 800047a:	481a      	ldr	r0, [pc, #104]	; (80004e4 <load_image+0x70>)
 800047c:	f003 fbbd 	bl	8003bfa <printk>
}
 8000480:	bd70      	pop	{r4, r5, r6, pc}
        strcpy(buf_tx, "Next\n");
 8000482:	4e19      	ldr	r6, [pc, #100]	; (80004e8 <load_image+0x74>)
 8000484:	4d19      	ldr	r5, [pc, #100]	; (80004ec <load_image+0x78>)
 8000486:	4631      	mov	r1, r6
 8000488:	4628      	mov	r0, r5
 800048a:	f003 fe39 	bl	8004100 <strcpy>
        err = uart_tx(uart_dev, buf_tx, strlen("Next\n"), SYS_FOREVER_MS);
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <load_image+0x7c>)
 8000490:	681c      	ldr	r4, [r3, #0]
 8000492:	4630      	mov	r0, r6
 8000494:	f003 fe3e 	bl	8004114 <strlen>
 8000498:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800049a:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 800049c:	685e      	ldr	r6, [r3, #4]
 800049e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004a2:	4629      	mov	r1, r5
 80004a4:	4620      	mov	r0, r4
 80004a6:	47b0      	blx	r6
        int err = uart_rx_enable(uart_dev, buf_rx, MAX_DATA_LEN_RX, SYS_FOREVER_MS);
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <load_image+0x7c>)
 80004aa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 80004ac:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
 80004ae:	68dc      	ldr	r4, [r3, #12]
 80004b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	490f      	ldr	r1, [pc, #60]	; (80004f4 <load_image+0x80>)
 80004b8:	47a0      	blx	r4
        if (err < 0) {
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dbdc      	blt.n	8000478 <load_image+0x4>
        uart_rx_disable(uart_dev);
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <load_image+0x7c>)
 80004c0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 80004c2:	6883      	ldr	r3, [r0, #8]
	return api->rx_disable(dev);
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4798      	blx	r3
        err = flash_img_buffered_write(&ctx, buf_rx, MAX_DATA_LEN_RX, true);
 80004c8:	2301      	movs	r3, #1
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	4909      	ldr	r1, [pc, #36]	; (80004f4 <load_image+0x80>)
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <load_image+0x84>)
 80004d0:	f003 fc4a 	bl	8003d68 <flash_img_buffered_write>
        if (err < 0) {
 80004d4:	2800      	cmp	r0, #0
 80004d6:	dad4      	bge.n	8000482 <load_image+0xe>
            printk(" Error flash_img_buffered_write. Error code: %d\n", err);
 80004d8:	4601      	mov	r1, r0
 80004da:	4808      	ldr	r0, [pc, #32]	; (80004fc <load_image+0x88>)
 80004dc:	f003 fb8d 	bl	8003bfa <printk>
            return;
 80004e0:	e7ce      	b.n	8000480 <load_image+0xc>
 80004e2:	bf00      	nop
 80004e4:	08005e24 	.word	0x08005e24
 80004e8:	08005e80 	.word	0x08005e80
 80004ec:	20000540 	.word	0x20000540
 80004f0:	20000974 	.word	0x20000974
 80004f4:	200004c0 	.word	0x200004c0
 80004f8:	2000054c 	.word	0x2000054c
 80004fc:	08005e4c 	.word	0x08005e4c

08000500 <main>:
void main(void) {
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	b083      	sub	sp, #12
    uart_config("UART_3",115200, UART_CFG_DATA_BITS_8, UART_CFG_FLOW_CTRL_NONE,
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	2300      	movs	r3, #0
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2203      	movs	r2, #3
 800050e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000512:	4823      	ldr	r0, [pc, #140]	; (80005a0 <main+0xa0>)
 8000514:	f7ff ff82 	bl	800041c <uart_config>
    uart_callback_set(uart_dev, event_cb, NULL);
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <main+0xa4>)
 800051a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800051c:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b113      	cbz	r3, 8000528 <main+0x28>
	return api->callback_set(dev, callback, user_data);
 8000522:	2200      	movs	r2, #0
 8000524:	4920      	ldr	r1, [pc, #128]	; (80005a8 <main+0xa8>)
 8000526:	4798      	blx	r3
    int err = uart_rx_enable(uart_dev, buf_rx, MAX_DATA_LEN_RX, 0);
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <main+0xa4>)
 800052a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800052c:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
 800052e:	68dc      	ldr	r4, [r3, #12]
 8000530:	2300      	movs	r3, #0
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	491d      	ldr	r1, [pc, #116]	; (80005ac <main+0xac>)
 8000536:	47a0      	blx	r4
    if(err < 0) {
 8000538:	1e01      	subs	r1, r0, #0
 800053a:	db27      	blt.n	800058c <main+0x8c>
        if(buf_rx[0] && !strncmp(&buf_rx[0], "StaAAAAAAArt\n", strlen("Start\n"))) {
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <main+0xac>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0fb      	beq.n	800053c <main+0x3c>
 8000544:	481a      	ldr	r0, [pc, #104]	; (80005b0 <main+0xb0>)
 8000546:	f003 fde5 	bl	8004114 <strlen>
 800054a:	4602      	mov	r2, r0
 800054c:	4919      	ldr	r1, [pc, #100]	; (80005b4 <main+0xb4>)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <main+0xac>)
 8000550:	f003 fdfe 	bl	8004150 <strncmp>
 8000554:	2800      	cmp	r0, #0
 8000556:	d1f1      	bne.n	800053c <main+0x3c>
            printk(" Transfer started");
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xb8>)
 800055a:	f003 fb4e 	bl	8003bfa <printk>
            err = uart_tx(uart_dev, buf_rx, strlen("Start\n"), SYS_FOREVER_MS);
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0xa4>)
 8000560:	681c      	ldr	r4, [r3, #0]
 8000562:	4813      	ldr	r0, [pc, #76]	; (80005b0 <main+0xb0>)
 8000564:	f003 fdd6 	bl	8004114 <strlen>
 8000568:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800056a:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 800056c:	685d      	ldr	r5, [r3, #4]
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000572:	490e      	ldr	r1, [pc, #56]	; (80005ac <main+0xac>)
 8000574:	4620      	mov	r0, r4
 8000576:	47a8      	blx	r5
            if(err < 0) {
 8000578:	1e01      	subs	r1, r0, #0
 800057a:	db0b      	blt.n	8000594 <main+0x94>
            memset(&buf_rx[0], 0, MAX_DATA_LEN_RX);
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	2100      	movs	r1, #0
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0xac>)
 8000582:	f003 fe27 	bl	80041d4 <memset>
            load_image();
 8000586:	f7ff ff75 	bl	8000474 <load_image>
 800058a:	e7d7      	b.n	800053c <main+0x3c>
        printk(" Error uart_rx_enable. Error code: %d\n", err);
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <main+0xbc>)
 800058e:	f003 fb34 	bl	8003bfa <printk>
        return;
 8000592:	e002      	b.n	800059a <main+0x9a>
                printk(" Error uart_tx. Error code: %d\n", err);
 8000594:	480a      	ldr	r0, [pc, #40]	; (80005c0 <main+0xc0>)
 8000596:	f003 fb30 	bl	8003bfa <printk>
}
 800059a:	b003      	add	sp, #12
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	bf00      	nop
 80005a0:	08005e88 	.word	0x08005e88
 80005a4:	20000974 	.word	0x20000974
 80005a8:	08000401 	.word	0x08000401
 80005ac:	200004c0 	.word	0x200004c0
 80005b0:	08005e90 	.word	0x08005e90
 80005b4:	08005e98 	.word	0x08005e98
 80005b8:	08005ea8 	.word	0x08005ea8
 80005bc:	08005e24 	.word	0x08005e24
 80005c0:	08005ebc 	.word	0x08005ebc

080005c4 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 80005c4:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80005c6:	680b      	ldr	r3, [r1, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <char_out+0x10>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4798      	blx	r3
}
 80005d2:	bd08      	pop	{r3, pc}
 80005d4:	200002a0 	.word	0x200002a0

080005d8 <__printk_hook_install>:
	_char_out = fn;
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <__printk_hook_install+0x8>)
 80005da:	6018      	str	r0, [r3, #0]
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200002a0 	.word	0x200002a0

080005e4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80005e4:	b500      	push	{lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	4602      	mov	r2, r0
 80005ea:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80005ec:	2100      	movs	r1, #0
 80005ee:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80005f0:	a901      	add	r1, sp, #4
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <vprintk+0x1c>)
 80005f4:	f000 f990 	bl	8000918 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80005f8:	b003      	add	sp, #12
 80005fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80005fe:	bf00      	nop
 8000600:	080005c5 	.word	0x080005c5

08000604 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 800060a:	2300      	movs	r3, #0
 800060c:	6003      	str	r3, [r0, #0]
 800060e:	6043      	str	r3, [r0, #4]
 8000610:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8000612:	784b      	ldrb	r3, [r1, #1]
 8000614:	2b25      	cmp	r3, #37	; 0x25
 8000616:	d002      	beq.n	800061e <extract_conversion+0x1a>
 8000618:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 800061a:	2501      	movs	r5, #1
 800061c:	e01f      	b.n	800065e <extract_conversion+0x5a>
		conv->specifier = *sp++;
 800061e:	1c88      	adds	r0, r1, #2
 8000620:	70e3      	strb	r3, [r4, #3]
		return sp;
 8000622:	e145      	b.n	80008b0 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8000624:	7823      	ldrb	r3, [r4, #0]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	7023      	strb	r3, [r4, #0]
		if (loop) {
 800062c:	b1b5      	cbz	r5, 800065c <extract_conversion+0x58>
			++sp;
 800062e:	3601      	adds	r6, #1
 8000630:	e014      	b.n	800065c <extract_conversion+0x58>
			conv->flag_plus = true;
 8000632:	7823      	ldrb	r3, [r4, #0]
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	7023      	strb	r3, [r4, #0]
			break;
 800063a:	e7f7      	b.n	800062c <extract_conversion+0x28>
			conv->flag_space = true;
 800063c:	7823      	ldrb	r3, [r4, #0]
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	7023      	strb	r3, [r4, #0]
			break;
 8000644:	e7f2      	b.n	800062c <extract_conversion+0x28>
			conv->flag_hash = true;
 8000646:	7823      	ldrb	r3, [r4, #0]
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	7023      	strb	r3, [r4, #0]
			break;
 800064e:	e7ed      	b.n	800062c <extract_conversion+0x28>
			conv->flag_zero = true;
 8000650:	7823      	ldrb	r3, [r4, #0]
 8000652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000656:	7023      	strb	r3, [r4, #0]
			break;
 8000658:	e7e8      	b.n	800062c <extract_conversion+0x28>
		switch (*sp) {
 800065a:	2500      	movs	r5, #0
	} while (loop);
 800065c:	b345      	cbz	r5, 80006b0 <extract_conversion+0xac>
		switch (*sp) {
 800065e:	7833      	ldrb	r3, [r6, #0]
 8000660:	3b20      	subs	r3, #32
 8000662:	2b10      	cmp	r3, #16
 8000664:	d8f9      	bhi.n	800065a <extract_conversion+0x56>
 8000666:	a201      	add	r2, pc, #4	; (adr r2, 800066c <extract_conversion+0x68>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	0800063d 	.word	0x0800063d
 8000670:	0800065b 	.word	0x0800065b
 8000674:	0800065b 	.word	0x0800065b
 8000678:	08000647 	.word	0x08000647
 800067c:	0800065b 	.word	0x0800065b
 8000680:	0800065b 	.word	0x0800065b
 8000684:	0800065b 	.word	0x0800065b
 8000688:	0800065b 	.word	0x0800065b
 800068c:	0800065b 	.word	0x0800065b
 8000690:	0800065b 	.word	0x0800065b
 8000694:	0800065b 	.word	0x0800065b
 8000698:	08000633 	.word	0x08000633
 800069c:	0800065b 	.word	0x0800065b
 80006a0:	08000625 	.word	0x08000625
 80006a4:	0800065b 	.word	0x0800065b
 80006a8:	0800065b 	.word	0x0800065b
 80006ac:	08000651 	.word	0x08000651
	if (conv->flag_zero && conv->flag_dash) {
 80006b0:	7823      	ldrb	r3, [r4, #0]
 80006b2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80006b6:	2b44      	cmp	r3, #68	; 0x44
 80006b8:	d05f      	beq.n	800077a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 80006ba:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 80006bc:	7823      	ldrb	r3, [r4, #0]
 80006be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 80006c4:	7833      	ldrb	r3, [r6, #0]
 80006c6:	2b2a      	cmp	r3, #42	; 0x2a
 80006c8:	d05c      	beq.n	8000784 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 80006ca:	a801      	add	r0, sp, #4
 80006cc:	f003 faad 	bl	8003c2a <extract_decimal>
	if (sp != wp) {
 80006d0:	9b01      	ldr	r3, [sp, #4]
 80006d2:	429e      	cmp	r6, r3
 80006d4:	d00f      	beq.n	80006f6 <extract_conversion+0xf2>
		conv->width_present = true;
 80006d6:	7823      	ldrb	r3, [r4, #0]
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 80006de:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 80006e6:	2800      	cmp	r0, #0
 80006e8:	db54      	blt.n	8000794 <extract_conversion+0x190>
 80006ea:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 80006ec:	4313      	orrs	r3, r2
 80006ee:	7822      	ldrb	r2, [r4, #0]
 80006f0:	f363 0241 	bfi	r2, r3, #1, #1
 80006f4:	7022      	strb	r2, [r4, #0]
	return sp;
 80006f6:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 80006f8:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b2e      	cmp	r3, #46	; 0x2e
 80006fe:	bf14      	ite	ne
 8000700:	2300      	movne	r3, #0
 8000702:	2301      	moveq	r3, #1
 8000704:	7862      	ldrb	r2, [r4, #1]
 8000706:	f363 0241 	bfi	r2, r3, #1, #1
 800070a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 800070c:	2b00      	cmp	r3, #0
 800070e:	d043      	beq.n	8000798 <extract_conversion+0x194>
	++sp;
 8000710:	9b01      	ldr	r3, [sp, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	2b2a      	cmp	r3, #42	; 0x2a
 800071a:	d03f      	beq.n	800079c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 800071c:	a801      	add	r0, sp, #4
 800071e:	f003 fa84 	bl	8003c2a <extract_decimal>
	conv->prec_value = prec;
 8000722:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8000724:	7823      	ldrb	r3, [r4, #0]
 8000726:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 800072a:	2800      	cmp	r0, #0
 800072c:	db3e      	blt.n	80007ac <extract_conversion+0x1a8>
 800072e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8000730:	4313      	orrs	r3, r2
 8000732:	7822      	ldrb	r2, [r4, #0]
 8000734:	f363 0241 	bfi	r2, r3, #1, #1
 8000738:	7022      	strb	r2, [r4, #0]
	return sp;
 800073a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 800073c:	7803      	ldrb	r3, [r0, #0]
 800073e:	3b4c      	subs	r3, #76	; 0x4c
 8000740:	2b2e      	cmp	r3, #46	; 0x2e
 8000742:	f200 809d 	bhi.w	8000880 <extract_conversion+0x27c>
 8000746:	e8df f003 	tbb	[pc, r3]
 800074a:	9b90      	.short	0x9b90
 800074c:	9b9b9b9b 	.word	0x9b9b9b9b
 8000750:	9b9b9b9b 	.word	0x9b9b9b9b
 8000754:	9b9b9b9b 	.word	0x9b9b9b9b
 8000758:	9b9b9b9b 	.word	0x9b9b9b9b
 800075c:	9b9b9b9b 	.word	0x9b9b9b9b
 8000760:	9b9b9b9b 	.word	0x9b9b9b9b
 8000764:	9b339b9b 	.word	0x9b339b9b
 8000768:	9b459b57 	.word	0x9b459b57
 800076c:	9b9b9b9b 	.word	0x9b9b9b9b
 8000770:	9b899b9b 	.word	0x9b899b9b
 8000774:	9b9b9b9b 	.word	0x9b9b9b9b
 8000778:	82          	.byte	0x82
 8000779:	00          	.byte	0x00
		conv->flag_zero = false;
 800077a:	7823      	ldrb	r3, [r4, #0]
 800077c:	f36f 1386 	bfc	r3, #6, #1
 8000780:	7023      	strb	r3, [r4, #0]
 8000782:	e79a      	b.n	80006ba <extract_conversion+0xb6>
		conv->width_star = true;
 8000784:	7863      	ldrb	r3, [r4, #1]
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 800078c:	4633      	mov	r3, r6
 800078e:	3301      	adds	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	e7b1      	b.n	80006f8 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8000794:	2201      	movs	r2, #1
 8000796:	e7a9      	b.n	80006ec <extract_conversion+0xe8>
		return sp;
 8000798:	9801      	ldr	r0, [sp, #4]
 800079a:	e7cf      	b.n	800073c <extract_conversion+0x138>
		conv->prec_star = true;
 800079c:	7863      	ldrb	r3, [r4, #1]
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80007a4:	4610      	mov	r0, r2
 80007a6:	3001      	adds	r0, #1
 80007a8:	9001      	str	r0, [sp, #4]
 80007aa:	e7c7      	b.n	800073c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 80007ac:	2201      	movs	r2, #1
 80007ae:	e7bf      	b.n	8000730 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 80007b0:	1c42      	adds	r2, r0, #1
 80007b2:	7843      	ldrb	r3, [r0, #1]
 80007b4:	2b68      	cmp	r3, #104	; 0x68
 80007b6:	d006      	beq.n	80007c6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 80007b8:	7863      	ldrb	r3, [r4, #1]
 80007ba:	2102      	movs	r1, #2
 80007bc:	f361 03c6 	bfi	r3, r1, #3, #4
 80007c0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 80007c2:	4610      	mov	r0, r2
 80007c4:	e01e      	b.n	8000804 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 80007c6:	7863      	ldrb	r3, [r4, #1]
 80007c8:	2201      	movs	r2, #1
 80007ca:	f362 03c6 	bfi	r3, r2, #3, #4
 80007ce:	7063      	strb	r3, [r4, #1]
			++sp;
 80007d0:	3002      	adds	r0, #2
 80007d2:	e017      	b.n	8000804 <extract_conversion+0x200>
		if (*++sp == 'l') {
 80007d4:	1c42      	adds	r2, r0, #1
 80007d6:	7843      	ldrb	r3, [r0, #1]
 80007d8:	2b6c      	cmp	r3, #108	; 0x6c
 80007da:	d006      	beq.n	80007ea <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 80007dc:	7863      	ldrb	r3, [r4, #1]
 80007de:	2103      	movs	r1, #3
 80007e0:	f361 03c6 	bfi	r3, r1, #3, #4
 80007e4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 80007e6:	4610      	mov	r0, r2
 80007e8:	e00c      	b.n	8000804 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 80007ea:	7863      	ldrb	r3, [r4, #1]
 80007ec:	2204      	movs	r2, #4
 80007ee:	f362 03c6 	bfi	r3, r2, #3, #4
 80007f2:	7063      	strb	r3, [r4, #1]
			++sp;
 80007f4:	3002      	adds	r0, #2
 80007f6:	e005      	b.n	8000804 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 80007f8:	7863      	ldrb	r3, [r4, #1]
 80007fa:	2205      	movs	r2, #5
 80007fc:	f362 03c6 	bfi	r3, r2, #3, #4
 8000800:	7063      	strb	r3, [r4, #1]
		++sp;
 8000802:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8000804:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000808:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 800080a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800080e:	2a37      	cmp	r2, #55	; 0x37
 8000810:	d87d      	bhi.n	800090e <extract_conversion+0x30a>
 8000812:	e8df f002 	tbb	[pc, r2]
 8000816:	7c5e      	.short	0x7c5e
 8000818:	5e5e7c7c 	.word	0x5e5e7c7c
 800081c:	7c7c7c5e 	.word	0x7c7c7c5e
 8000820:	7c7c7c7c 	.word	0x7c7c7c7c
 8000824:	7c7c7c7c 	.word	0x7c7c7c7c
 8000828:	7c7c7c7c 	.word	0x7c7c7c7c
 800082c:	7c7c4f7c 	.word	0x7c7c4f7c
 8000830:	7c7c7c7c 	.word	0x7c7c7c7c
 8000834:	7c5e7c7c 	.word	0x7c5e7c7c
 8000838:	5e5e3a4f 	.word	0x5e5e3a4f
 800083c:	7c3a7c5e 	.word	0x7c3a7c5e
 8000840:	657c7c7c 	.word	0x657c7c7c
 8000844:	7c7c714f 	.word	0x7c7c714f
 8000848:	7c4f7c71 	.word	0x7c4f7c71
 800084c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 800084e:	7863      	ldrb	r3, [r4, #1]
 8000850:	2206      	movs	r2, #6
 8000852:	f362 03c6 	bfi	r3, r2, #3, #4
 8000856:	7063      	strb	r3, [r4, #1]
		++sp;
 8000858:	3001      	adds	r0, #1
		break;
 800085a:	e7d3      	b.n	8000804 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 800085c:	7863      	ldrb	r3, [r4, #1]
 800085e:	2207      	movs	r2, #7
 8000860:	f362 03c6 	bfi	r3, r2, #3, #4
 8000864:	7063      	strb	r3, [r4, #1]
		++sp;
 8000866:	3001      	adds	r0, #1
		break;
 8000868:	e7cc      	b.n	8000804 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 800086a:	7863      	ldrb	r3, [r4, #1]
 800086c:	2208      	movs	r2, #8
 800086e:	f362 03c6 	bfi	r3, r2, #3, #4
 8000872:	7063      	strb	r3, [r4, #1]
		++sp;
 8000874:	3001      	adds	r0, #1
		conv->unsupported = true;
 8000876:	7823      	ldrb	r3, [r4, #0]
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	7023      	strb	r3, [r4, #0]
		break;
 800087e:	e7c1      	b.n	8000804 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8000880:	7863      	ldrb	r3, [r4, #1]
 8000882:	f36f 03c6 	bfc	r3, #3, #4
 8000886:	7063      	strb	r3, [r4, #1]
		break;
 8000888:	e7bc      	b.n	8000804 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 800088a:	78a2      	ldrb	r2, [r4, #2]
 800088c:	2101      	movs	r1, #1
 800088e:	f361 0202 	bfi	r2, r1, #0, #3
 8000892:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000894:	7862      	ldrb	r2, [r4, #1]
 8000896:	f002 0278 	and.w	r2, r2, #120	; 0x78
 800089a:	2a40      	cmp	r2, #64	; 0x40
 800089c:	d010      	beq.n	80008c0 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 800089e:	2b63      	cmp	r3, #99	; 0x63
 80008a0:	d013      	beq.n	80008ca <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 80008a2:	7823      	ldrb	r3, [r4, #0]
 80008a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80008a8:	4315      	orrs	r5, r2
 80008aa:	f365 0341 	bfi	r3, r5, #1, #1
 80008ae:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 80008b0:	b002      	add	sp, #8
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 80008b4:	78a2      	ldrb	r2, [r4, #2]
 80008b6:	2102      	movs	r1, #2
 80008b8:	f361 0202 	bfi	r2, r1, #0, #3
 80008bc:	70a2      	strb	r2, [r4, #2]
 80008be:	e7e9      	b.n	8000894 <extract_conversion+0x290>
			conv->invalid = true;
 80008c0:	7821      	ldrb	r1, [r4, #0]
 80008c2:	f041 0101 	orr.w	r1, r1, #1
 80008c6:	7021      	strb	r1, [r4, #0]
 80008c8:	e7e9      	b.n	800089e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80008ca:	1e15      	subs	r5, r2, #0
 80008cc:	bf18      	it	ne
 80008ce:	2501      	movne	r5, #1
 80008d0:	e7e7      	b.n	80008a2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 80008d2:	78a3      	ldrb	r3, [r4, #2]
 80008d4:	2204      	movs	r2, #4
 80008d6:	f362 0302 	bfi	r3, r2, #0, #3
 80008da:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 80008dc:	2501      	movs	r5, #1
			break;
 80008de:	e7e0      	b.n	80008a2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80008e0:	78a3      	ldrb	r3, [r4, #2]
 80008e2:	2203      	movs	r2, #3
 80008e4:	f362 0302 	bfi	r3, r2, #0, #3
 80008e8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008ea:	7863      	ldrb	r3, [r4, #1]
 80008ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80008f0:	2b40      	cmp	r3, #64	; 0x40
 80008f2:	d1d6      	bne.n	80008a2 <extract_conversion+0x29e>
			unsupported = true;
 80008f4:	2501      	movs	r5, #1
 80008f6:	e7d4      	b.n	80008a2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80008f8:	78a3      	ldrb	r3, [r4, #2]
 80008fa:	2203      	movs	r2, #3
 80008fc:	f362 0302 	bfi	r3, r2, #0, #3
 8000900:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8000902:	7863      	ldrb	r3, [r4, #1]
 8000904:	f013 0f78 	tst.w	r3, #120	; 0x78
 8000908:	d0cb      	beq.n	80008a2 <extract_conversion+0x29e>
			unsupported = true;
 800090a:	2501      	movs	r5, #1
 800090c:	e7c9      	b.n	80008a2 <extract_conversion+0x29e>
		conv->invalid = true;
 800090e:	7823      	ldrb	r3, [r4, #0]
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	7023      	strb	r3, [r4, #0]
		break;
 8000916:	e7c4      	b.n	80008a2 <extract_conversion+0x29e>

08000918 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800091c:	b091      	sub	sp, #68	; 0x44
 800091e:	4606      	mov	r6, r0
 8000920:	460d      	mov	r5, r1
 8000922:	4691      	mov	r9, r2
 8000924:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000926:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000928:	f899 0000 	ldrb.w	r0, [r9]
 800092c:	2800      	cmp	r0, #0
 800092e:	f000 82d5 	beq.w	8000edc <cbvprintf+0x5c4>
		if (*fp != '%') {
 8000932:	2825      	cmp	r0, #37	; 0x25
 8000934:	d008      	beq.n	8000948 <cbvprintf+0x30>
			OUTC(*fp++);
 8000936:	f109 0901 	add.w	r9, r9, #1
 800093a:	4629      	mov	r1, r5
 800093c:	47b0      	blx	r6
 800093e:	2800      	cmp	r0, #0
 8000940:	f2c0 82cd 	blt.w	8000ede <cbvprintf+0x5c6>
 8000944:	3401      	adds	r4, #1
			continue;
 8000946:	e7ef      	b.n	8000928 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8000948:	2300      	movs	r3, #0
 800094a:	9304      	str	r3, [sp, #16]
 800094c:	9305      	str	r3, [sp, #20]
 800094e:	9306      	str	r3, [sp, #24]
 8000950:	9307      	str	r3, [sp, #28]
 8000952:	9308      	str	r3, [sp, #32]
 8000954:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8000956:	4649      	mov	r1, r9
 8000958:	a806      	add	r0, sp, #24
 800095a:	f7ff fe53 	bl	8000604 <extract_conversion>
 800095e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8000960:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000964:	f013 0f01 	tst.w	r3, #1
 8000968:	f000 8097 	beq.w	8000a9a <cbvprintf+0x182>
			width = va_arg(ap, int);
 800096c:	9b03      	ldr	r3, [sp, #12]
 800096e:	1d1a      	adds	r2, r3, #4
 8000970:	9203      	str	r2, [sp, #12]
 8000972:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8000974:	2f00      	cmp	r7, #0
 8000976:	f2c0 8088 	blt.w	8000a8a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 800097a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800097e:	f013 0f04 	tst.w	r3, #4
 8000982:	f000 809c 	beq.w	8000abe <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8000986:	9b03      	ldr	r3, [sp, #12]
 8000988:	1d1a      	adds	r2, r3, #4
 800098a:	9203      	str	r2, [sp, #12]
 800098c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8000990:	f1ba 0f00 	cmp.w	sl, #0
 8000994:	f2c0 808a 	blt.w	8000aac <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 800099c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 800099e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80009a2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 80009a6:	f89d 1019 	ldrb.w	r1, [sp, #25]
 80009aa:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f000 808e 	beq.w	8000ad0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	f000 80d3 	beq.w	8000b60 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	f000 8124 	beq.w	8000c08 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	f000 813b 	beq.w	8000c3c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 80009c6:	f89d 8018 	ldrb.w	r8, [sp, #24]
 80009ca:	f018 0b03 	ands.w	fp, r8, #3
 80009ce:	f040 813b 	bne.w	8000c48 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 80009d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80009d6:	3b25      	subs	r3, #37	; 0x25
 80009d8:	2b53      	cmp	r3, #83	; 0x53
 80009da:	f200 81e6 	bhi.w	8000daa <cbvprintf+0x492>
 80009de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80009e2:	0140      	.short	0x0140
 80009e4:	01e401e4 	.word	0x01e401e4
 80009e8:	01e401e4 	.word	0x01e401e4
 80009ec:	01e401e4 	.word	0x01e401e4
 80009f0:	01e401e4 	.word	0x01e401e4
 80009f4:	01e401e4 	.word	0x01e401e4
 80009f8:	01e401e4 	.word	0x01e401e4
 80009fc:	01e401e4 	.word	0x01e401e4
 8000a00:	01e401e4 	.word	0x01e401e4
 8000a04:	01e401e4 	.word	0x01e401e4
 8000a08:	01e401e4 	.word	0x01e401e4
 8000a0c:	01e401e4 	.word	0x01e401e4
 8000a10:	01e401e4 	.word	0x01e401e4
 8000a14:	01e401e4 	.word	0x01e401e4
 8000a18:	01e401e4 	.word	0x01e401e4
 8000a1c:	01e401e4 	.word	0x01e401e4
 8000a20:	01e401e4 	.word	0x01e401e4
 8000a24:	01e401e4 	.word	0x01e401e4
 8000a28:	01e401e4 	.word	0x01e401e4
 8000a2c:	01e401e4 	.word	0x01e401e4
 8000a30:	01e401e4 	.word	0x01e401e4
 8000a34:	01e401e4 	.word	0x01e401e4
 8000a38:	01e401e4 	.word	0x01e401e4
 8000a3c:	01e401e4 	.word	0x01e401e4
 8000a40:	01e401e4 	.word	0x01e401e4
 8000a44:	01e401e4 	.word	0x01e401e4
 8000a48:	01e40181 	.word	0x01e40181
 8000a4c:	01e401e4 	.word	0x01e401e4
 8000a50:	01e401e4 	.word	0x01e401e4
 8000a54:	01e401e4 	.word	0x01e401e4
 8000a58:	01e401e4 	.word	0x01e401e4
 8000a5c:	015e01e4 	.word	0x015e01e4
 8000a60:	01e40167 	.word	0x01e40167
 8000a64:	01e401e4 	.word	0x01e401e4
 8000a68:	016701e4 	.word	0x016701e4
 8000a6c:	01e401e4 	.word	0x01e401e4
 8000a70:	01e401e4 	.word	0x01e401e4
 8000a74:	018101be 	.word	0x018101be
 8000a78:	01e401a2 	.word	0x01e401a2
 8000a7c:	014d01e4 	.word	0x014d01e4
 8000a80:	018101e4 	.word	0x018101e4
 8000a84:	01e401e4 	.word	0x01e401e4
 8000a88:	0181      	.short	0x0181
				conv->flag_dash = true;
 8000a8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8000a96:	427f      	negs	r7, r7
 8000a98:	e76f      	b.n	800097a <cbvprintf+0x62>
		} else if (conv->width_present) {
 8000a9a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db02      	blt.n	8000aa8 <cbvprintf+0x190>
		int width = -1;
 8000aa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000aa6:	e768      	b.n	800097a <cbvprintf+0x62>
			width = conv->width_value;
 8000aa8:	9f07      	ldr	r7, [sp, #28]
 8000aaa:	e766      	b.n	800097a <cbvprintf+0x62>
				conv->prec_present = false;
 8000aac:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000ab0:	f36f 0341 	bfc	r3, #1, #1
 8000ab4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8000ab8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000abc:	e76c      	b.n	8000998 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8000abe:	f013 0f02 	tst.w	r3, #2
 8000ac2:	d002      	beq.n	8000aca <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8000ac4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000ac8:	e766      	b.n	8000998 <cbvprintf+0x80>
		int precision = -1;
 8000aca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000ace:	e763      	b.n	8000998 <cbvprintf+0x80>
			switch (length_mod) {
 8000ad0:	1ecb      	subs	r3, r1, #3
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d804      	bhi.n	8000ae0 <cbvprintf+0x1c8>
 8000ad6:	e8df f003 	tbb	[pc, r3]
 8000ada:	1d0b      	.short	0x1d0b
 8000adc:	3529      	.short	0x3529
 8000ade:	35          	.byte	0x35
 8000adf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000ae0:	9b03      	ldr	r3, [sp, #12]
 8000ae2:	1d1a      	adds	r2, r3, #4
 8000ae4:	9203      	str	r2, [sp, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	17da      	asrs	r2, r3, #31
 8000aea:	9304      	str	r3, [sp, #16]
 8000aec:	9205      	str	r2, [sp, #20]
				break;
 8000aee:	e006      	b.n	8000afe <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	9203      	str	r2, [sp, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	17da      	asrs	r2, r3, #31
 8000afa:	9304      	str	r3, [sp, #16]
 8000afc:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8000afe:	2901      	cmp	r1, #1
 8000b00:	d028      	beq.n	8000b54 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8000b02:	2902      	cmp	r1, #2
 8000b04:	f47f af5f 	bne.w	80009c6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8000b08:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8000b0c:	17da      	asrs	r2, r3, #31
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	9205      	str	r2, [sp, #20]
 8000b12:	e758      	b.n	80009c6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8000b14:	9b03      	ldr	r3, [sp, #12]
 8000b16:	3307      	adds	r3, #7
 8000b18:	f023 0307 	bic.w	r3, r3, #7
 8000b1c:	f103 0208 	add.w	r2, r3, #8
 8000b20:	9203      	str	r2, [sp, #12]
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8000b26:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8000b2a:	e7e8      	b.n	8000afe <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8000b2c:	9b03      	ldr	r3, [sp, #12]
 8000b2e:	3307      	adds	r3, #7
 8000b30:	f023 0307 	bic.w	r3, r3, #7
 8000b34:	f103 0208 	add.w	r2, r3, #8
 8000b38:	9203      	str	r2, [sp, #12]
 8000b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8000b3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8000b42:	e7dc      	b.n	8000afe <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000b44:	9b03      	ldr	r3, [sp, #12]
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	9203      	str	r2, [sp, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	17da      	asrs	r2, r3, #31
				value->sint =
 8000b4e:	9304      	str	r3, [sp, #16]
 8000b50:	9205      	str	r2, [sp, #20]
				break;
 8000b52:	e7d4      	b.n	8000afe <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8000b54:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9305      	str	r3, [sp, #20]
 8000b5e:	e732      	b.n	80009c6 <cbvprintf+0xae>
			switch (length_mod) {
 8000b60:	1ecb      	subs	r3, r1, #3
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d804      	bhi.n	8000b70 <cbvprintf+0x258>
 8000b66:	e8df f003 	tbb	[pc, r3]
 8000b6a:	1f0b      	.short	0x1f0b
 8000b6c:	4135      	.short	0x4135
 8000b6e:	41          	.byte	0x41
 8000b6f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8000b70:	9b03      	ldr	r3, [sp, #12]
 8000b72:	1d1a      	adds	r2, r3, #4
 8000b74:	9203      	str	r2, [sp, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9305      	str	r3, [sp, #20]
				break;
 8000b7e:	e01e      	b.n	8000bbe <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8000b80:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8000b84:	2b63      	cmp	r3, #99	; 0x63
 8000b86:	d007      	beq.n	8000b98 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8000b88:	9b03      	ldr	r3, [sp, #12]
 8000b8a:	1d1a      	adds	r2, r3, #4
 8000b8c:	9203      	str	r2, [sp, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	9304      	str	r3, [sp, #16]
 8000b92:	2300      	movs	r3, #0
 8000b94:	9305      	str	r3, [sp, #20]
 8000b96:	e012      	b.n	8000bbe <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8000b98:	9b03      	ldr	r3, [sp, #12]
 8000b9a:	1d1a      	adds	r2, r3, #4
 8000b9c:	9203      	str	r2, [sp, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9305      	str	r3, [sp, #20]
 8000ba6:	e00a      	b.n	8000bbe <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8000ba8:	9b03      	ldr	r3, [sp, #12]
 8000baa:	3307      	adds	r3, #7
 8000bac:	f023 0307 	bic.w	r3, r3, #7
 8000bb0:	f103 0208 	add.w	r2, r3, #8
 8000bb4:	9203      	str	r2, [sp, #12]
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8000bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8000bbe:	2901      	cmp	r1, #1
 8000bc0:	d01c      	beq.n	8000bfc <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8000bc2:	2902      	cmp	r1, #2
 8000bc4:	f47f aeff 	bne.w	80009c6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8000bc8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8000bcc:	9304      	str	r3, [sp, #16]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9305      	str	r3, [sp, #20]
 8000bd2:	e6f8      	b.n	80009c6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	f023 0307 	bic.w	r3, r3, #7
 8000bdc:	f103 0208 	add.w	r2, r3, #8
 8000be0:	9203      	str	r2, [sp, #12]
 8000be2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8000be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8000bea:	e7e8      	b.n	8000bbe <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8000bec:	9b03      	ldr	r3, [sp, #12]
 8000bee:	1d1a      	adds	r2, r3, #4
 8000bf0:	9203      	str	r2, [sp, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8000bf4:	9304      	str	r3, [sp, #16]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9305      	str	r3, [sp, #20]
				break;
 8000bfa:	e7e0      	b.n	8000bbe <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8000bfc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000c00:	9304      	str	r3, [sp, #16]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9305      	str	r3, [sp, #20]
 8000c06:	e6de      	b.n	80009c6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8000c08:	2908      	cmp	r1, #8
 8000c0a:	d00b      	beq.n	8000c24 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8000c0c:	9b03      	ldr	r3, [sp, #12]
 8000c0e:	3307      	adds	r3, #7
 8000c10:	f023 0307 	bic.w	r3, r3, #7
 8000c14:	f103 0208 	add.w	r2, r3, #8
 8000c18:	9203      	str	r2, [sp, #12]
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c22:	e6d0      	b.n	80009c6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8000c24:	9b03      	ldr	r3, [sp, #12]
 8000c26:	3307      	adds	r3, #7
 8000c28:	f023 0307 	bic.w	r3, r3, #7
 8000c2c:	f103 0208 	add.w	r2, r3, #8
 8000c30:	9203      	str	r2, [sp, #12]
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c3a:	e6c4      	b.n	80009c6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	1d1a      	adds	r2, r3, #4
 8000c40:	9203      	str	r2, [sp, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	9304      	str	r3, [sp, #16]
 8000c46:	e6be      	b.n	80009c6 <cbvprintf+0xae>
			OUTS(sp, fp);
 8000c48:	9f02      	ldr	r7, [sp, #8]
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	4629      	mov	r1, r5
 8000c50:	4630      	mov	r0, r6
 8000c52:	f003 f866 	bl	8003d22 <outs>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	f2c0 8141 	blt.w	8000ede <cbvprintf+0x5c6>
 8000c5c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8000c5e:	46b9      	mov	r9, r7
			continue;
 8000c60:	e662      	b.n	8000928 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8000c62:	4629      	mov	r1, r5
 8000c64:	2025      	movs	r0, #37	; 0x25
 8000c66:	47b0      	blx	r6
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	f2c0 8138 	blt.w	8000ede <cbvprintf+0x5c6>
 8000c6e:	3401      	adds	r4, #1
		char sign = 0;
 8000c70:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8000c72:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8000c76:	f04f 0900 	mov.w	r9, #0
			break;
 8000c7a:	e09b      	b.n	8000db4 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8000c7c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8000c80:	f1ba 0f00 	cmp.w	sl, #0
 8000c84:	db07      	blt.n	8000c96 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8000c86:	4651      	mov	r1, sl
 8000c88:	4648      	mov	r0, r9
 8000c8a:	f003 fa4c 	bl	8004126 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8000c8e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8000c92:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8000c94:	e08e      	b.n	8000db4 <cbvprintf+0x49c>
				len = strlen(bps);
 8000c96:	4648      	mov	r0, r9
 8000c98:	f003 fa3c 	bl	8004114 <strlen>
 8000c9c:	e7f7      	b.n	8000c8e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000c9e:	9b04      	ldr	r3, [sp, #16]
 8000ca0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8000ca4:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8000ca6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8000caa:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8000cae:	e081      	b.n	8000db4 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8000cb0:	f018 0f08 	tst.w	r8, #8
 8000cb4:	d105      	bne.n	8000cc2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8000cb6:	f018 0810 	ands.w	r8, r8, #16
 8000cba:	d004      	beq.n	8000cc6 <cbvprintf+0x3ae>
				sign = ' ';
 8000cbc:	f04f 0820 	mov.w	r8, #32
 8000cc0:	e001      	b.n	8000cc6 <cbvprintf+0x3ae>
				sign = '+';
 8000cc2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8000cc6:	9a04      	ldr	r2, [sp, #16]
 8000cc8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db02      	blt.n	8000cd4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8000cce:	9204      	str	r2, [sp, #16]
 8000cd0:	9305      	str	r3, [sp, #20]
 8000cd2:	e008      	b.n	8000ce6 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	9204      	str	r2, [sp, #16]
 8000cdc:	9305      	str	r3, [sp, #20]
				sign = '-';
 8000cde:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8000ce2:	e000      	b.n	8000ce6 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8000ce4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000ce6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	ab0a      	add	r3, sp, #40	; 0x28
 8000cee:	aa06      	add	r2, sp, #24
 8000cf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000cf4:	f002 ffab 	bl	8003c4e <encode_uint>
 8000cf8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8000cfa:	f1ba 0f00 	cmp.w	sl, #0
 8000cfe:	f2c0 8088 	blt.w	8000e12 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8000d02:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8000d06:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8000d0a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8000d0e:	f36f 1286 	bfc	r2, #6, #1
 8000d12:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8000d16:	459a      	cmp	sl, r3
 8000d18:	d97e      	bls.n	8000e18 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8000d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8000d1e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8000d20:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8000d24:	e046      	b.n	8000db4 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8000d26:	9804      	ldr	r0, [sp, #16]
 8000d28:	b928      	cbnz	r0, 8000d36 <cbvprintf+0x41e>
		char sign = 0;
 8000d2a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8000d2c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8000ee4 <cbvprintf+0x5cc>
			bps = "(nil)";
 8000d30:	f1aa 0905 	sub.w	r9, sl, #5
 8000d34:	e03e      	b.n	8000db4 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000d36:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8000d3e:	aa06      	add	r2, sp, #24
 8000d40:	2100      	movs	r1, #0
 8000d42:	f002 ff84 	bl	8003c4e <encode_uint>
 8000d46:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8000d48:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8000d54:	2378      	movs	r3, #120	; 0x78
 8000d56:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 8000d5a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8000d5c:	e7cd      	b.n	8000cfa <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8000d5e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8000d60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000d64:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	d806      	bhi.n	8000d7a <cbvprintf+0x462>
 8000d6c:	e8df f003 	tbb	[pc, r3]
 8000d70:	0f0d0b04 	.word	0x0f0d0b04
 8000d74:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8000d78:	6014      	str	r4, [r2, #0]
		char sign = 0;
 8000d7a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8000d7c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8000d80:	f04f 0900 	mov.w	r9, #0
}
 8000d84:	e016      	b.n	8000db4 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8000d86:	7014      	strb	r4, [r2, #0]
		break;
 8000d88:	e7f7      	b.n	8000d7a <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8000d8a:	8014      	strh	r4, [r2, #0]
		break;
 8000d8c:	e7f5      	b.n	8000d7a <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8000d8e:	6014      	str	r4, [r2, #0]
		break;
 8000d90:	e7f3      	b.n	8000d7a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8000d92:	17e3      	asrs	r3, r4, #31
 8000d94:	6014      	str	r4, [r2, #0]
 8000d96:	6053      	str	r3, [r2, #4]
		break;
 8000d98:	e7ef      	b.n	8000d7a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8000d9a:	17e3      	asrs	r3, r4, #31
 8000d9c:	6014      	str	r4, [r2, #0]
 8000d9e:	6053      	str	r3, [r2, #4]
		break;
 8000da0:	e7eb      	b.n	8000d7a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8000da2:	6014      	str	r4, [r2, #0]
		break;
 8000da4:	e7e9      	b.n	8000d7a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000da6:	6014      	str	r4, [r2, #0]
		break;
 8000da8:	e7e7      	b.n	8000d7a <cbvprintf+0x462>
		switch (conv->specifier) {
 8000daa:	46d8      	mov	r8, fp
 8000dac:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8000db0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 808d 	beq.w	8000ed6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8000dbc:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8000dc0:	f1b8 0f00 	cmp.w	r8, #0
 8000dc4:	d000      	beq.n	8000dc8 <cbvprintf+0x4b0>
			nj_len += 1U;
 8000dc6:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
 8000dc8:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8000dcc:	f012 0f10 	tst.w	r2, #16
 8000dd0:	d025      	beq.n	8000e1e <cbvprintf+0x506>
			nj_len += 2U;
 8000dd2:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8000dd4:	9907      	ldr	r1, [sp, #28]
 8000dd6:	440b      	add	r3, r1
		if (conv->pad_fp) {
 8000dd8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000ddc:	d001      	beq.n	8000de2 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8000dde:	9a08      	ldr	r2, [sp, #32]
 8000de0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8000de2:	2f00      	cmp	r7, #0
 8000de4:	dd31      	ble.n	8000e4a <cbvprintf+0x532>
			width -= (int)nj_len;
 8000de6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8000de8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000dec:	f013 0f04 	tst.w	r3, #4
 8000df0:	d12b      	bne.n	8000e4a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8000df2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000df6:	d017      	beq.n	8000e28 <cbvprintf+0x510>
					if (sign != 0) {
 8000df8:	f1b8 0f00 	cmp.w	r8, #0
 8000dfc:	d017      	beq.n	8000e2e <cbvprintf+0x516>
						OUTC(sign);
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4640      	mov	r0, r8
 8000e02:	47b0      	blx	r6
 8000e04:	2800      	cmp	r0, #0
 8000e06:	db6a      	blt.n	8000ede <cbvprintf+0x5c6>
 8000e08:	3401      	adds	r4, #1
						sign = 0;
 8000e0a:	46d8      	mov	r8, fp
					}
					pad = '0';
 8000e0c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8000e10:	e00f      	b.n	8000e32 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8000e12:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8000e16:	e7cd      	b.n	8000db4 <cbvprintf+0x49c>
 8000e18:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8000e1c:	e7ca      	b.n	8000db4 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8000e1e:	f012 0f08 	tst.w	r2, #8
 8000e22:	d0d7      	beq.n	8000dd4 <cbvprintf+0x4bc>
			nj_len += 1U;
 8000e24:	3301      	adds	r3, #1
 8000e26:	e7d5      	b.n	8000dd4 <cbvprintf+0x4bc>
				char pad = ' ';
 8000e28:	f04f 0b20 	mov.w	fp, #32
 8000e2c:	e001      	b.n	8000e32 <cbvprintf+0x51a>
					pad = '0';
 8000e2e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8000e32:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8000e34:	1e5f      	subs	r7, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	dd07      	ble.n	8000e4a <cbvprintf+0x532>
					OUTC(pad);
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	47b0      	blx	r6
 8000e40:	2800      	cmp	r0, #0
 8000e42:	db4c      	blt.n	8000ede <cbvprintf+0x5c6>
 8000e44:	3401      	adds	r4, #1
				while (width-- > 0) {
 8000e46:	463b      	mov	r3, r7
 8000e48:	e7f4      	b.n	8000e34 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 8000e4a:	f1b8 0f00 	cmp.w	r8, #0
 8000e4e:	d005      	beq.n	8000e5c <cbvprintf+0x544>
			OUTC(sign);
 8000e50:	4629      	mov	r1, r5
 8000e52:	4640      	mov	r0, r8
 8000e54:	47b0      	blx	r6
 8000e56:	2800      	cmp	r0, #0
 8000e58:	db41      	blt.n	8000ede <cbvprintf+0x5c6>
 8000e5a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8000e5c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000e60:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8000e64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	d005      	beq.n	8000e78 <cbvprintf+0x560>
				OUTC('0');
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	2030      	movs	r0, #48	; 0x30
 8000e70:	47b0      	blx	r6
 8000e72:	2800      	cmp	r0, #0
 8000e74:	db33      	blt.n	8000ede <cbvprintf+0x5c6>
 8000e76:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8000e78:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000e7c:	f013 0f10 	tst.w	r3, #16
 8000e80:	d006      	beq.n	8000e90 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8000e82:	4629      	mov	r1, r5
 8000e84:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8000e88:	47b0      	blx	r6
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	db27      	blt.n	8000ede <cbvprintf+0x5c6>
 8000e8e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8000e90:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd07      	ble.n	8000eaa <cbvprintf+0x592>
				OUTC('0');
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	2030      	movs	r0, #48	; 0x30
 8000e9e:	47b0      	blx	r6
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	db1c      	blt.n	8000ede <cbvprintf+0x5c6>
 8000ea4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	e7f3      	b.n	8000e92 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8000eaa:	4653      	mov	r3, sl
 8000eac:	464a      	mov	r2, r9
 8000eae:	4629      	mov	r1, r5
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f002 ff36 	bl	8003d22 <outs>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	db11      	blt.n	8000ede <cbvprintf+0x5c6>
 8000eba:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8000ebc:	2f00      	cmp	r7, #0
 8000ebe:	dd07      	ble.n	8000ed0 <cbvprintf+0x5b8>
			OUTC(' ');
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	2020      	movs	r0, #32
 8000ec4:	47b0      	blx	r6
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	db09      	blt.n	8000ede <cbvprintf+0x5c6>
 8000eca:	3401      	adds	r4, #1
			--width;
 8000ecc:	3f01      	subs	r7, #1
 8000ece:	e7f5      	b.n	8000ebc <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8000ed0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000ed4:	e528      	b.n	8000928 <cbvprintf+0x10>
 8000ed6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000eda:	e525      	b.n	8000928 <cbvprintf+0x10>
		}
	}

	return count;
 8000edc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8000ede:	b011      	add	sp, #68	; 0x44
 8000ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee4:	08005ee1 	.word	0x08005ee1

08000ee8 <stm32l1_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32l1_init(const struct device *arg)
{
 8000ee8:	b082      	sub	sp, #8
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000eea:	f04f 0210 	mov.w	r2, #16
 8000eee:	f3ef 8311 	mrs	r3, BASEPRI
 8000ef2:	f382 8812 	msr	BASEPRI_MAX, r2
 8000ef6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 2.1 MHz from MSI */
	SystemCoreClock = 2097000;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <stm32l1_init+0x48>)
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <stm32l1_init+0x4c>)
 8000f06:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <stm32l1_init+0x50>)
 8000f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f1a:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <stm32l1_init+0x54>)
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	6013      	str	r3, [r2, #0]
	 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);

	return 0;
}
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	b002      	add	sp, #8
 8000f2e:	4770      	bx	lr
 8000f30:	200002d8 	.word	0x200002d8
 8000f34:	001fff68 	.word	0x001fff68
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8000f40:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8000f42:	4c04      	ldr	r4, [pc, #16]	; (8000f54 <__do_init_array_aux+0x14>)
 8000f44:	e002      	b.n	8000f4c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8000f46:	f854 3b04 	ldr.w	r3, [r4], #4
 8000f4a:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <__do_init_array_aux+0x18>)
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	d3f9      	bcc.n	8000f46 <__do_init_array_aux+0x6>
	}
}
 8000f52:	bd10      	pop	{r4, pc}
 8000f54:	08005d8c 	.word	0x08005d8c
 8000f58:	08005d8c 	.word	0x08005d8c

08000f5c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <__do_global_ctors_aux+0x1c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8000f60:	b14b      	cbz	r3, 8000f76 <__do_global_ctors_aux+0x1a>
{
 8000f62:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8000f64:	1e5c      	subs	r4, r3, #1
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__do_global_ctors_aux+0x1c>)
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	4798      	blx	r3
 8000f6e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d1f7      	bne.n	8000f64 <__do_global_ctors_aux+0x8>
	}
}
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	4770      	bx	lr
 8000f78:	08005d84 	.word	0x08005d84

08000f7c <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8000f7c:	28af      	cmp	r0, #175	; 0xaf
 8000f7e:	d81d      	bhi.n	8000fbc <stm32_pin_configure+0x40>
{
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	460f      	mov	r7, r1
 8000f86:	4615      	mov	r5, r2
 8000f88:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <stm32_pin_configure+0x48>)
 8000f8c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8000f90:	b18e      	cbz	r6, 8000fb6 <stm32_pin_configure+0x3a>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8000f92:	4630      	mov	r0, r6
 8000f94:	f004 fa4b 	bl	800542e <z_device_ready>
 8000f98:	b150      	cbz	r0, 8000fb0 <stm32_pin_configure+0x34>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	b95b      	cbnz	r3, 8000fb6 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8000f9e:	462b      	mov	r3, r5
 8000fa0:	463a      	mov	r2, r7
 8000fa2:	f004 010f 	and.w	r1, r4, #15
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f003 fc39 	bl	800481e <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 8000fac:	2000      	movs	r0, #0
}
 8000fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb0:	f06f 0312 	mvn.w	r3, #18
 8000fb4:	e7f2      	b.n	8000f9c <stm32_pin_configure+0x20>
		return -ENODEV;
 8000fb6:	f06f 0012 	mvn.w	r0, #18
 8000fba:	e7f8      	b.n	8000fae <stm32_pin_configure+0x32>
		return -EINVAL;
 8000fbc:	f06f 0015 	mvn.w	r0, #21
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08005ee4 	.word	0x08005ee4

08000fc8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000fc8:	4901      	ldr	r1, [pc, #4]	; (8000fd0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000fca:	2210      	movs	r2, #16
	str	r2, [r1]
 8000fcc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000fce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000fd0:	e000ed10 	.word	0xe000ed10

08000fd4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000fd4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000fd6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000fd8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000fdc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000fe0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000fe4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000fe6:	b662      	cpsie	i
	isb
 8000fe8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000ff0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	db07      	blt.n	8001006 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	f000 021f 	and.w	r2, r0, #31
 8000ffa:	0940      	lsrs	r0, r0, #5
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4093      	lsls	r3, r2
 8001000:	4a01      	ldr	r2, [pc, #4]	; (8001008 <arch_irq_enable+0x18>)
 8001002:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100

0800100c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 800100c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800100e:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001010:	2800      	cmp	r0, #0
 8001012:	db08      	blt.n	8001026 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	0109      	lsls	r1, r1, #4
 8001016:	b2c9      	uxtb	r1, r1
 8001018:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800101c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001020:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001024:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	f000 000f 	and.w	r0, r0, #15
 800102a:	0109      	lsls	r1, r1, #4
 800102c:	b2c9      	uxtb	r1, r1
 800102e:	4b01      	ldr	r3, [pc, #4]	; (8001034 <z_arm_irq_priority_set+0x28>)
 8001030:	5419      	strb	r1, [r3, r0]
}
 8001032:	4770      	bx	lr
 8001034:	e000ed14 	.word	0xe000ed14

08001038 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001038:	bf30      	wfi
    b z_SysNmiOnReset
 800103a:	f7ff bffd 	b.w	8001038 <z_SysNmiOnReset>
 800103e:	bf00      	nop

08001040 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8001040:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <z_arm_prep_c+0x28>)
 8001044:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <z_arm_prep_c+0x2c>)
 800104e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001054:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001058:	f001 fe16 	bl	8002c88 <z_bss_zero>
	z_data_copy();
 800105c:	f002 fc30 	bl	80038c0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001060:	f000 f9ec 	bl	800143c <z_arm_interrupt_init>
	z_cstart();
 8001064:	f001 fe1c 	bl	8002ca0 <z_cstart>
 8001068:	08000000 	.word	0x08000000
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <arch_swap+0x28>)
 8001072:	6893      	ldr	r3, [r2, #8]
 8001074:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <arch_swap+0x2c>)
 8001078:	6809      	ldr	r1, [r1, #0]
 800107a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800107c:	4908      	ldr	r1, [pc, #32]	; (80010a0 <arch_swap+0x30>)
 800107e:	684b      	ldr	r3, [r1, #4]
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	604b      	str	r3, [r1, #4]
 8001086:	2300      	movs	r3, #0
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001090:	6893      	ldr	r3, [r2, #8]
}
 8001092:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000b34 	.word	0x20000b34
 800109c:	08006270 	.word	0x08006270
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80010a6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80010a8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80010ac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80010ae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80010b2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80010b6:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80010b8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80010bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80010c0:	4f0c      	ldr	r7, [pc, #48]	; (80010f4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80010c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80010c6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80010c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80010ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80010cc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 80010ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80010d0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80010d2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80010d6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80010d8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80010da:	f000 fa03 	bl	80014e4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80010de:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80010e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80010e6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80010ea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80010ee:	4770      	bx	lr
    ldr r1, =_kernel
 80010f0:	20000b34 	.word	0x20000b34
    ldr v4, =_SCS_ICSR
 80010f4:	e000ed04 	.word	0xe000ed04

080010f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80010f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80010fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80010fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001102:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001106:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001108:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 800110c:	2902      	cmp	r1, #2
    beq _oops
 800110e:	d0ff      	beq.n	8001110 <_oops>

08001110 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001110:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8001112:	f002 ff50 	bl	8003fb6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8001116:	bd01      	pop	{r0, pc}

08001118 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8001118:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800111a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <arch_new_thread+0x3c>)
 8001120:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8001124:	f021 0101 	bic.w	r1, r1, #1
 8001128:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 800112c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001130:	9b01      	ldr	r3, [sp, #4]
 8001132:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8001136:	9b02      	ldr	r3, [sp, #8]
 8001138:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800113c:	9b03      	ldr	r3, [sp, #12]
 800113e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001146:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800114a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001150:	bc10      	pop	{r4}
 8001152:	4770      	bx	lr
 8001154:	08003c17 	.word	0x08003c17

08001158 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <z_check_thread_stack_fail+0x48>)
 800115a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 800115c:	b1ea      	cbz	r2, 800119a <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800115e:	f110 0f16 	cmn.w	r0, #22
 8001162:	d010      	beq.n	8001186 <z_check_thread_stack_fail+0x2e>
 8001164:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001166:	f1a3 0c20 	sub.w	ip, r3, #32
 800116a:	4584      	cmp	ip, r0
 800116c:	d805      	bhi.n	800117a <z_check_thread_stack_fail+0x22>
 800116e:	4283      	cmp	r3, r0
 8001170:	d905      	bls.n	800117e <z_check_thread_stack_fail+0x26>
 8001172:	428b      	cmp	r3, r1
 8001174:	d805      	bhi.n	8001182 <z_check_thread_stack_fail+0x2a>
 8001176:	2100      	movs	r1, #0
 8001178:	e00a      	b.n	8001190 <z_check_thread_stack_fail+0x38>
 800117a:	2100      	movs	r1, #0
 800117c:	e008      	b.n	8001190 <z_check_thread_stack_fail+0x38>
 800117e:	2100      	movs	r1, #0
 8001180:	e006      	b.n	8001190 <z_check_thread_stack_fail+0x38>
 8001182:	2101      	movs	r1, #1
 8001184:	e004      	b.n	8001190 <z_check_thread_stack_fail+0x38>
 8001186:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001188:	428b      	cmp	r3, r1
 800118a:	bf94      	ite	ls
 800118c:	2100      	movls	r1, #0
 800118e:	2101      	movhi	r1, #1
 8001190:	b909      	cbnz	r1, 8001196 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001192:	2000      	movs	r0, #0
}
 8001194:	4770      	bx	lr
		return thread->stack_info.start;
 8001196:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001198:	4770      	bx	lr
		return 0;
 800119a:	2000      	movs	r0, #0
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000b34 	.word	0x20000b34

080011a4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80011a4:	b508      	push	{r3, lr}
 80011a6:	460d      	mov	r5, r1
 80011a8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <arch_switch_to_main_thread+0x28>)
 80011ac:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80011ae:	f000 f999 	bl	80014e4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80011b2:	4620      	mov	r0, r4
 80011b4:	f385 8809 	msr	PSP, r5
 80011b8:	2100      	movs	r1, #0
 80011ba:	b663      	cpsie	if
 80011bc:	f381 8811 	msr	BASEPRI, r1
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	2200      	movs	r2, #0
 80011c6:	2300      	movs	r3, #0
 80011c8:	f002 fd25 	bl	8003c16 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80011cc:	20000b34 	.word	0x20000b34

080011d0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80011d0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80011d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80011d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80011da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80011de:	4904      	ldr	r1, [pc, #16]	; (80011f0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80011e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80011e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80011e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80011e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80011ea:	4902      	ldr	r1, [pc, #8]	; (80011f4 <_isr_wrapper+0x24>)
	bx r1
 80011ec:	4708      	bx	r1
 80011ee:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80011f0:	08005bbc 	.word	0x08005bbc
	ldr r1, =z_arm_int_exit
 80011f4:	080011f9 	.word	0x080011f9

080011f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80011fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80011fc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80011fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001200:	d003      	beq.n	800120a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001202:	4903      	ldr	r1, [pc, #12]	; (8001210 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001208:	600a      	str	r2, [r1, #0]

0800120a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800120a:	4770      	bx	lr
	ldr r3, =_kernel
 800120c:	20000b34 	.word	0x20000b34
	ldr r1, =_SCS_ICSR
 8001210:	e000ed04 	.word	0xe000ed04

08001214 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <bus_fault+0x44>)
 800121a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001224:	d00b      	beq.n	800123e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <bus_fault+0x44>)
 8001228:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001230:	d005      	beq.n	800123e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001232:	b121      	cbz	r1, 800123e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <bus_fault+0x44>)
 8001236:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800123c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <bus_fault+0x44>)
 8001240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001246:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800124a:	629a      	str	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 800124c:	2101      	movs	r1, #1
 800124e:	f002 fec4 	bl	8003fda <memory_fault_recoverable>
 8001252:	7020      	strb	r0, [r4, #0]

	return reason;
}
 8001254:	2000      	movs	r0, #0
 8001256:	bd10      	pop	{r4, pc}
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <usage_fault+0x20>)
 800125e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800126a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800126c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001270:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001274:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001276:	2000      	movs	r0, #0
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <mem_manage_fault>:
{
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4605      	mov	r5, r0
 8001284:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <mem_manage_fault+0x84>)
 8001288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800128a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f013 0f02 	tst.w	r3, #2
 8001292:	d00c      	beq.n	80012ae <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <mem_manage_fault+0x84>)
 8001296:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800129e:	d024      	beq.n	80012ea <mem_manage_fault+0x6a>
			if (from_hard_fault != 0) {
 80012a0:	b139      	cbz	r1, 80012b2 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <mem_manage_fault+0x84>)
 80012a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80012a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012aa:	6293      	str	r3, [r2, #40]	; 0x28
 80012ac:	e001      	b.n	80012b2 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
 80012ae:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <mem_manage_fault+0x84>)
 80012b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f013 0f10 	tst.w	r3, #16
 80012bc:	d104      	bne.n	80012c8 <mem_manage_fault+0x48>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <mem_manage_fault+0x84>)
 80012c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80012c2:	f014 0402 	ands.w	r4, r4, #2
 80012c6:	d004      	beq.n	80012d2 <mem_manage_fault+0x52>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <mem_manage_fault+0x84>)
 80012ca:	685c      	ldr	r4, [r3, #4]
 80012cc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80012d0:	d10e      	bne.n	80012f0 <mem_manage_fault+0x70>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <mem_manage_fault+0x84>)
 80012d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80012d6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80012da:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80012dc:	2101      	movs	r1, #1
 80012de:	4628      	mov	r0, r5
 80012e0:	f002 fe7b 	bl	8003fda <memory_fault_recoverable>
 80012e4:	7030      	strb	r0, [r6, #0]
}
 80012e6:	4620      	mov	r0, r4
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 80012ea:	f06f 0015 	mvn.w	r0, #21
 80012ee:	e7e0      	b.n	80012b2 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7ff ff31 	bl	8001158 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80012f6:	4604      	mov	r4, r0
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0ea      	beq.n	80012d2 <mem_manage_fault+0x52>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80012fc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001300:	2402      	movs	r4, #2
 8001302:	e7e6      	b.n	80012d2 <mem_manage_fault+0x52>
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8001308:	b508      	push	{r3, lr}
 800130a:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 800130c:	2300      	movs	r3, #0
 800130e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <hard_fault+0x78>)
 8001312:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001314:	f010 0002 	ands.w	r0, r0, #2
 8001318:	d12e      	bne.n	8001378 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	db2c      	blt.n	800137a <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <hard_fault+0x78>)
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8001328:	d028      	beq.n	800137c <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 800132a:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 800132e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001332:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8001336:	429a      	cmp	r2, r3
 8001338:	d00f      	beq.n	800135a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <hard_fault+0x78>)
 800133c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001340:	b973      	cbnz	r3, 8001360 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <hard_fault+0x78>)
 8001344:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001348:	b983      	cbnz	r3, 800136c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <hard_fault+0x78>)
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	b19b      	cbz	r3, 800137a <hard_fault+0x72>
			reason = usage_fault(esf);
 8001352:	4660      	mov	r0, ip
 8001354:	f7ff ff82 	bl	800125c <usage_fault>
 8001358:	e00f      	b.n	800137a <hard_fault+0x72>
			reason = esf->basic.r0;
 800135a:	f8dc 0000 	ldr.w	r0, [ip]
 800135e:	e00c      	b.n	800137a <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001360:	460a      	mov	r2, r1
 8001362:	2101      	movs	r1, #1
 8001364:	4660      	mov	r0, ip
 8001366:	f7ff ff8b 	bl	8001280 <mem_manage_fault>
 800136a:	e006      	b.n	800137a <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
 800136c:	460a      	mov	r2, r1
 800136e:	2101      	movs	r1, #1
 8001370:	4660      	mov	r0, ip
 8001372:	f7ff ff4f 	bl	8001214 <bus_fault>
 8001376:	e000      	b.n	800137a <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001378:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 800137a:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800137c:	4618      	mov	r0, r3
	return reason;
 800137e:	e7fc      	b.n	800137a <hard_fault+0x72>
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <z_arm_fault+0x90>)
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001392:	2300      	movs	r3, #0
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800139c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80013a0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80013a4:	d115      	bne.n	80013d2 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80013a6:	f002 030c 	and.w	r3, r2, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d014      	beq.n	80013d8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80013ae:	f012 0f08 	tst.w	r2, #8
 80013b2:	d00b      	beq.n	80013cc <z_arm_fault+0x48>
	*nested_exc = false;
 80013b4:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 80013b6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80013ba:	4620      	mov	r0, r4
 80013bc:	f002 fe12 	bl	8003fe4 <fault_handle>
 80013c0:	4605      	mov	r5, r0
	if (recoverable) {
 80013c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80013c6:	b153      	cbz	r3, 80013de <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 80013c8:	b00a      	add	sp, #40	; 0x28
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
 80013cc:	4604      	mov	r4, r0
			*nested_exc = true;
 80013ce:	2601      	movs	r6, #1
 80013d0:	e7f1      	b.n	80013b6 <z_arm_fault+0x32>
	*nested_exc = false;
 80013d2:	2600      	movs	r6, #0
		return NULL;
 80013d4:	4634      	mov	r4, r6
 80013d6:	e7ee      	b.n	80013b6 <z_arm_fault+0x32>
	*nested_exc = false;
 80013d8:	2600      	movs	r6, #0
		return NULL;
 80013da:	4634      	mov	r4, r6
 80013dc:	e7eb      	b.n	80013b6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80013de:	2220      	movs	r2, #32
 80013e0:	4621      	mov	r1, r4
 80013e2:	a801      	add	r0, sp, #4
 80013e4:	f002 fec7 	bl	8004176 <memcpy>
	if (nested_exc) {
 80013e8:	b14e      	cbz	r6, 80013fe <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80013ea:	9b08      	ldr	r3, [sp, #32]
 80013ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013f0:	b95a      	cbnz	r2, 800140a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80013f2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80013f6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80013fa:	9308      	str	r3, [sp, #32]
 80013fc:	e005      	b.n	800140a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80013fe:	9b08      	ldr	r3, [sp, #32]
 8001400:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 800140a:	a901      	add	r1, sp, #4
 800140c:	4628      	mov	r0, r5
 800140e:	f002 fdce 	bl	8003fae <z_arm_fatal_error>
 8001412:	e7d9      	b.n	80013c8 <z_arm_fault+0x44>
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001418:	4a02      	ldr	r2, [pc, #8]	; (8001424 <z_arm_fault_init+0xc>)
 800141a:	6953      	ldr	r3, [r2, #20]
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001428:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800142c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001430:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001432:	4672      	mov	r2, lr
	bl z_arm_fault
 8001434:	f7ff ffa6 	bl	8001384 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001438:	bd01      	pop	{r0, pc}
 800143a:	bf00      	nop

0800143c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800143c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800143e:	e006      	b.n	800144e <z_arm_interrupt_init+0x12>
 8001440:	f002 010f 	and.w	r1, r2, #15
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <z_arm_interrupt_init+0x30>)
 8001446:	440b      	add	r3, r1
 8001448:	2110      	movs	r1, #16
 800144a:	7619      	strb	r1, [r3, #24]
 800144c:	3201      	adds	r2, #1
 800144e:	2a38      	cmp	r2, #56	; 0x38
 8001450:	dc0a      	bgt.n	8001468 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8001452:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001454:	2b00      	cmp	r3, #0
 8001456:	dbf3      	blt.n	8001440 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800145c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001460:	2110      	movs	r1, #16
 8001462:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8001466:	e7f1      	b.n	800144c <z_arm_interrupt_init+0x10>
	}
}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ecfc 	.word	0xe000ecfc

08001470 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001470:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001472:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001478:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 800147c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800147e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001482:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001486:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001488:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800148a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800148e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001492:	f7ff fdd5 	bl	8001040 <z_arm_prep_c>
 8001496:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001498:	200010c0 	.word	0x200010c0

0800149c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800149c:	b508      	push	{r3, lr}
	if (_current == thread) {
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <z_impl_k_thread_abort+0x24>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4283      	cmp	r3, r0
 80014a4:	d002      	beq.n	80014ac <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 80014a6:	f002 f9cf 	bl	8003848 <z_thread_abort>
}
 80014aa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f8      	beq.n	80014a6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <z_impl_k_thread_abort+0x28>)
 80014b6:	6853      	ldr	r3, [r2, #4]
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6053      	str	r3, [r2, #4]
 80014be:	e7f2      	b.n	80014a6 <z_impl_k_thread_abort+0xa>
 80014c0:	20000b34 	.word	0x20000b34
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80014c8:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <z_arm_configure_static_mpu_regions+0x10>)
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <z_arm_configure_static_mpu_regions+0x14>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <z_arm_configure_static_mpu_regions+0x18>)
 80014d2:	f002 fe0d 	bl	80040f0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80014d6:	bd08      	pop	{r3, pc}
 80014d8:	20014000 	.word	0x20014000
 80014dc:	20000000 	.word	0x20000000
 80014e0:	08005f10 	.word	0x08005f10

080014e4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80014e4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80014e6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80014e8:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80014ec:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 80014ee:	2320      	movs	r3, #32
 80014f0:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <z_arm_configure_dynamic_mpu_regions+0x20>)
 80014f4:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80014f6:	2101      	movs	r1, #1
 80014f8:	f002 fdfe 	bl	80040f8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 80014fc:	bd08      	pop	{r3, pc}
 80014fe:	bf00      	nop
 8001500:	20000978 	.word	0x20000978
 8001504:	150b0000 	.word	0x150b0000

08001508 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <region_init+0x24>)
 800150a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800150e:	680b      	ldr	r3, [r1, #0]
 8001510:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001514:	4303      	orrs	r3, r0
 8001516:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800151a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800151e:	688b      	ldr	r3, [r1, #8]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8001530:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8001532:	4c03      	ldr	r4, [pc, #12]	; (8001540 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001534:	2301      	movs	r3, #1
 8001536:	7822      	ldrb	r2, [r4, #0]
 8001538:	f002 fdb2 	bl	80040a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800153c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	20000b7c 	.word	0x20000b7c

08001544 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001544:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8001546:	2300      	movs	r3, #0
 8001548:	4a09      	ldr	r2, [pc, #36]	; (8001570 <mpu_configure_dynamic_mpu_regions+0x2c>)
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	f002 fda8 	bl	80040a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001550:	f110 0f16 	cmn.w	r0, #22
 8001554:	d00a      	beq.n	800156c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001556:	4603      	mov	r3, r0
 8001558:	e006      	b.n	8001568 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <mpu_configure_dynamic_mpu_regions+0x30>)
 800155c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001560:	2100      	movs	r1, #0
 8001562:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8001566:	3301      	adds	r3, #1
 8001568:	2b07      	cmp	r3, #7
 800156a:	ddf6      	ble.n	800155a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 800156c:	bd08      	pop	{r3, pc}
 800156e:	bf00      	nop
 8001570:	20000b7c 	.word	0x20000b7c
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <arm_core_mpu_enable+0x14>)
 800157a:	2205      	movs	r2, #5
 800157c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001584:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001590:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <arm_core_mpu_disable+0x10>)
 8001596:	2200      	movs	r2, #0
 8001598:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 80015a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <z_arm_mpu_init+0x3c>)
 80015a8:	681d      	ldr	r5, [r3, #0]
 80015aa:	2d08      	cmp	r5, #8
 80015ac:	d815      	bhi.n	80015da <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80015ae:	f7ff ffef 	bl	8001590 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80015b2:	2400      	movs	r4, #0
 80015b4:	e009      	b.n	80015ca <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <z_arm_mpu_init+0x3c>)
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80015be:	0093      	lsls	r3, r2, #2
 80015c0:	4419      	add	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ffa0 	bl	8001508 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80015c8:	3401      	adds	r4, #1
 80015ca:	42a5      	cmp	r5, r4
 80015cc:	d8f3      	bhi.n	80015b6 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <z_arm_mpu_init+0x40>)
 80015d0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 80015d2:	f7ff ffd1 	bl	8001578 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80015d6:	2000      	movs	r0, #0
}
 80015d8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 80015da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015de:	e7fb      	b.n	80015d8 <z_arm_mpu_init+0x34>
 80015e0:	08005f2c 	.word	0x08005f2c
 80015e4:	20000b7c 	.word	0x20000b7c

080015e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <__stdout_hook_install+0x8>)
 80015ea:	6018      	str	r0, [r3, #0]
}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200002a4 	.word	0x200002a4

080015f4 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 80015fa:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 80015fc:	e000      	b.n	8001600 <__stm32_exti_isr+0xc>
 80015fe:	3401      	adds	r4, #1
 8001600:	42ac      	cmp	r4, r5
 8001602:	da14      	bge.n	800162e <__stm32_exti_isr+0x3a>
	if (line < 32) {
 8001604:	2c1f      	cmp	r4, #31
 8001606:	dcfa      	bgt.n	80015fe <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001608:	2301      	movs	r3, #1
 800160a:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <__stm32_exti_isr+0x3c>)
 800160e:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8001610:	ea33 0202 	bics.w	r2, r3, r2
 8001614:	d1f3      	bne.n	80015fe <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <__stm32_exti_isr+0x3c>)
 8001618:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800161a:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ed      	beq.n	80015fe <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001622:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8001626:	6851      	ldr	r1, [r2, #4]
 8001628:	4620      	mov	r0, r4
 800162a:	4798      	blx	r3
 800162c:	e7e7      	b.n	80015fe <__stm32_exti_isr+0xa>
		}
	}
}
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	40010400 	.word	0x40010400

08001634 <stm32_exti_enable>:
{
 8001634:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8001636:	2301      	movs	r3, #1
 8001638:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <stm32_exti_enable+0x18>)
 800163c:	6811      	ldr	r1, [r2, #0]
 800163e:	430b      	orrs	r3, r1
 8001640:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001642:	4b03      	ldr	r3, [pc, #12]	; (8001650 <stm32_exti_enable+0x1c>)
 8001644:	5618      	ldrsb	r0, [r3, r0]
 8001646:	f7ff fcd3 	bl	8000ff0 <arch_irq_enable>
}
 800164a:	bd08      	pop	{r3, pc}
 800164c:	40010400 	.word	0x40010400
 8001650:	08005f6c 	.word	0x08005f6c

08001654 <stm32_exti_disable>:
	if (line < 32) {
 8001654:	281f      	cmp	r0, #31
 8001656:	dc06      	bgt.n	8001666 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8001658:	2301      	movs	r3, #1
 800165a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800165c:	4a02      	ldr	r2, [pc, #8]	; (8001668 <stm32_exti_disable+0x14>)
 800165e:	6810      	ldr	r0, [r2, #0]
 8001660:	ea20 0003 	bic.w	r0, r0, r3
 8001664:	6010      	str	r0, [r2, #0]
}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <stm32_exti_trigger>:
	switch (trigger) {
 800166c:	2903      	cmp	r1, #3
 800166e:	d832      	bhi.n	80016d6 <stm32_exti_trigger+0x6a>
 8001670:	e8df f001 	tbb	[pc, r1]
 8001674:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8001678:	2301      	movs	r3, #1
 800167a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <stm32_exti_trigger+0x6c>)
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	ea22 0200 	bic.w	r2, r2, r0
 8001686:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	ea22 0000 	bic.w	r0, r2, r0
 800168e:	60d8      	str	r0, [r3, #12]
}
 8001690:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001692:	2301      	movs	r3, #1
 8001694:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <stm32_exti_trigger+0x6c>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4302      	orrs	r2, r0
 800169e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	ea22 0000 	bic.w	r0, r2, r0
 80016a6:	60d8      	str	r0, [r3, #12]
}
 80016a8:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80016aa:	2301      	movs	r3, #1
 80016ac:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <stm32_exti_trigger+0x6c>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4302      	orrs	r2, r0
 80016b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	ea22 0000 	bic.w	r0, r2, r0
 80016be:	6098      	str	r0, [r3, #8]
}
 80016c0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80016c2:	2301      	movs	r3, #1
 80016c4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <stm32_exti_trigger+0x6c>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4302      	orrs	r2, r0
 80016ce:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	4310      	orrs	r0, r2
 80016d4:	60d8      	str	r0, [r3, #12]
}
 80016d6:	4770      	bx	lr
 80016d8:	40010400 	.word	0x40010400

080016dc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <stm32_exti_set_callback+0x20>)
 80016de:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80016e2:	b93b      	cbnz	r3, 80016f4 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <stm32_exti_set_callback+0x20>)
 80016e6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80016ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80016ee:	6042      	str	r2, [r0, #4]

	return 0;
 80016f0:	2000      	movs	r0, #0
 80016f2:	4770      	bx	lr
		return -EBUSY;
 80016f4:	f06f 000f 	mvn.w	r0, #15
}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000984 	.word	0x20000984

08001700 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <stm32_exti_unset_callback+0x10>)
 8001702:	2200      	movs	r2, #0
 8001704:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001708:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800170c:	605a      	str	r2, [r3, #4]
}
 800170e:	4770      	bx	lr
 8001710:	20000984 	.word	0x20000984

08001714 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8001714:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001716:	680b      	ldr	r3, [r1, #0]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d011      	beq.n	8001740 <stm32_clock_control_on+0x2c>
 800171c:	2b03      	cmp	r3, #3
 800171e:	d01a      	beq.n	8001756 <stm32_clock_control_on+0x42>
 8001720:	b11b      	cbz	r3, 800172a <stm32_clock_control_on+0x16>
 8001722:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8001726:	b004      	add	sp, #16
 8001728:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800172a:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <stm32_clock_control_on+0x58>)
 800172e:	69d1      	ldr	r1, [r2, #28]
 8001730:	4319      	orrs	r1, r3
 8001732:	61d1      	str	r1, [r2, #28]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001734:	69d2      	ldr	r2, [r2, #28]
 8001736:	4013      	ands	r3, r2
 8001738:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800173a:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800173c:	2000      	movs	r0, #0
}
 800173e:	e7f2      	b.n	8001726 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8001740:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <stm32_clock_control_on+0x58>)
 8001744:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001746:	4319      	orrs	r1, r3
 8001748:	6251      	str	r1, [r2, #36]	; 0x24
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800174a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174c:	4013      	ands	r3, r2
 800174e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001750:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8001752:	2000      	movs	r0, #0
}
 8001754:	e7e7      	b.n	8001726 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8001756:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <stm32_clock_control_on+0x58>)
 800175a:	6a11      	ldr	r1, [r2, #32]
 800175c:	4319      	orrs	r1, r3
 800175e:	6211      	str	r1, [r2, #32]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001760:	6a12      	ldr	r2, [r2, #32]
 8001762:	4013      	ands	r3, r2
 8001764:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001766:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8001768:	2000      	movs	r0, #0
}
 800176a:	e7dc      	b.n	8001726 <stm32_clock_control_on+0x12>
 800176c:	40023800 	.word	0x40023800

08001770 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001770:	680b      	ldr	r3, [r1, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d00d      	beq.n	8001792 <stm32_clock_control_off+0x22>
 8001776:	2b03      	cmp	r3, #3
 8001778:	d013      	beq.n	80017a2 <stm32_clock_control_off+0x32>
 800177a:	b113      	cbz	r3, 8001782 <stm32_clock_control_off+0x12>
 800177c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8001780:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8001782:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <stm32_clock_control_off+0x44>)
 8001786:	69d3      	ldr	r3, [r2, #28]
 8001788:	ea23 0301 	bic.w	r3, r3, r1
 800178c:	61d3      	str	r3, [r2, #28]
	return 0;
 800178e:	2000      	movs	r0, #0
}
 8001790:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8001792:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <stm32_clock_control_off+0x44>)
 8001796:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001798:	ea23 0301 	bic.w	r3, r3, r1
 800179c:	6253      	str	r3, [r2, #36]	; 0x24
	return 0;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 80017a2:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <stm32_clock_control_off+0x44>)
 80017a6:	6a13      	ldr	r3, [r2, #32]
 80017a8:	ea23 0301 	bic.w	r3, r3, r1
 80017ac:	6213      	str	r3, [r2, #32]
	return 0;
 80017ae:	2000      	movs	r0, #0
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	460c      	mov	r4, r1
 80017bc:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <stm32_clock_control_get_subsys_rate+0x3c>)
 80017c0:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4630      	mov	r0, r6
 80017c6:	f002 fd86 	bl	80042d6 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	2b06      	cmp	r3, #6
 80017ce:	d80e      	bhi.n	80017ee <stm32_clock_control_get_subsys_rate+0x36>
 80017d0:	e8df f003 	tbb	[pc, r3]
 80017d4:	0a070404 	.word	0x0a070404
 80017d8:	0d0d      	.short	0x0d0d
 80017da:	04          	.byte	0x04
 80017db:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 80017dc:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80017de:	2000      	movs	r0, #0
}
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 80017e2:	6028      	str	r0, [r5, #0]
	return 0;
 80017e4:	2000      	movs	r0, #0
		break;
 80017e6:	e7fb      	b.n	80017e0 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 80017e8:	6028      	str	r0, [r5, #0]
	return 0;
 80017ea:	2000      	movs	r0, #0
		break;
 80017ec:	e7f8      	b.n	80017e0 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 80017ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80017f2:	e7f5      	b.n	80017e0 <stm32_clock_control_get_subsys_rate+0x28>
 80017f4:	200002d8 	.word	0x200002d8

080017f8 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <stm32_clock_switch_to_hsi+0x44>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f013 0f02 	tst.w	r3, #2
 8001800:	d109      	bne.n	8001816 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <stm32_clock_switch_to_hsi+0x44>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <stm32_clock_switch_to_hsi+0x44>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f013 0f02 	tst.w	r3, #2
 8001814:	d0fa      	beq.n	800180c <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <stm32_clock_switch_to_hsi+0x44>)
 8001818:	6893      	ldr	r3, [r2, #8]
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800182a:	4318      	orrs	r0, r3
 800182c:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <stm32_clock_switch_to_hsi+0x44>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001836:	2b04      	cmp	r3, #4
 8001838:	d1f9      	bne.n	800182e <stm32_clock_switch_to_hsi+0x36>
	}
}
 800183a:	4770      	bx	lr
 800183c:	40023800 	.word	0x40023800

08001840 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001840:	b510      	push	{r4, lr}
 8001842:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8001844:	a803      	add	r0, sp, #12
 8001846:	f002 fd41 	bl	80042cc <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800184a:	f000 f81d 	bl	8001888 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800184e:	a801      	add	r0, sp, #4
 8001850:	f002 fd44 	bl	80042dc <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ffcf 	bl	80017f8 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800185a:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <stm32_clock_control_init+0x44>)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001862:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8001864:	a903      	add	r1, sp, #12
 8001866:	a801      	add	r0, sp, #4
 8001868:	f001 f8e0 	bl	8002a2c <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187a:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800187c:	2000      	movs	r0, #0
 800187e:	b006      	add	sp, #24
 8001880:	bd10      	pop	{r4, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8001888:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <config_enable_default_clocks+0x1c>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	621a      	str	r2, [r3, #32]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800189c:	9b01      	ldr	r3, [sp, #4]
	(defined(CONFIG_SOC_SERIES_STM32L0X) &&			  \
	 defined(CONFIG_ENTROPY_STM32_RNG))
	/* Enable System Configuration Controller clock. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
}
 800189e:	b002      	add	sp, #8
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 80018a8:	b510      	push	{r4, lr}
 80018aa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80018ac:	280a      	cmp	r0, #10
 80018ae:	d007      	beq.n	80018c0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <console_out+0x28>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 80018b6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4798      	blx	r3

	return c;
}
 80018bc:	4620      	mov	r0, r4
 80018be:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <console_out+0x28>)
 80018c2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 80018c4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	210d      	movs	r1, #13
 80018ca:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 80018cc:	e7f0      	b.n	80018b0 <console_out+0x8>
 80018ce:	bf00      	nop
 80018d0:	20000a04 	.word	0x20000a04

080018d4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 80018d4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 80018d6:	4c04      	ldr	r4, [pc, #16]	; (80018e8 <uart_console_hook_install+0x14>)
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fe85 	bl	80015e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7fe fe7a 	bl	80005d8 <__printk_hook_install>
}
 80018e4:	bd10      	pop	{r4, pc}
 80018e6:	bf00      	nop
 80018e8:	080018a9 	.word	0x080018a9

080018ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80018ec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <uart_console_init+0x28>)
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <uart_console_init+0x2c>)
 80018f2:	6018      	str	r0, [r3, #0]
 80018f4:	f003 fd9b 	bl	800542e <z_device_ready>
 80018f8:	b128      	cbz	r0, 8001906 <uart_console_init+0x1a>
 80018fa:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 80018fc:	b933      	cbnz	r3, 800190c <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 80018fe:	f7ff ffe9 	bl	80018d4 <uart_console_hook_install>

	return 0;
 8001902:	2000      	movs	r0, #0
}
 8001904:	bd08      	pop	{r3, pc}
 8001906:	f06f 0312 	mvn.w	r3, #18
 800190a:	e7f7      	b.n	80018fc <uart_console_init+0x10>
		return -ENODEV;
 800190c:	f06f 0012 	mvn.w	r0, #18
 8001910:	e7f8      	b.n	8001904 <uart_console_init+0x18>
 8001912:	bf00      	nop
 8001914:	08005b74 	.word	0x08005b74
 8001918:	20000a04 	.word	0x20000a04

0800191c <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 800191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 8001922:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8001924:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 8001926:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	4282      	cmp	r2, r0
 800192c:	d917      	bls.n	800195e <dma_stm32_get_status+0x42>
		return -EINVAL;
	}

	stream = &config->streams[id];
 800192e:	699f      	ldr	r7, [r3, #24]
 8001930:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001934:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8001938:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 800193c:	f000 fa16 	bl	8001d6c <dma_stm32_id_to_stream>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001940:	3801      	subs	r0, #1
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <dma_stm32_get_status+0x48>)
 8001944:	5c1b      	ldrb	r3, [r3, r0]
 8001946:	441e      	add	r6, r3
 8001948:	6873      	ldr	r3, [r6, #4]
 800194a:	b29b      	uxth	r3, r3
 800194c:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 800194e:	f817 3008 	ldrb.w	r3, [r7, r8]
 8001952:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 8001954:	79ab      	ldrb	r3, [r5, #6]
 8001956:	7023      	strb	r3, [r4, #0]

	return 0;
 8001958:	2000      	movs	r0, #0
}
 800195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 800195e:	f06f 0015 	mvn.w	r0, #21
 8001962:	e7fa      	b.n	800195a <dma_stm32_get_status+0x3e>
 8001964:	08005f94 	.word	0x08005f94

08001968 <dma_stm32_stop>:
{
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 800196a:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 800196c:	6996      	ldr	r6, [r2, #24]
 800196e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	3b18      	subs	r3, #24
 8001976:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8001978:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 800197a:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800197c:	6953      	ldr	r3, [r2, #20]
 800197e:	42a3      	cmp	r3, r4
 8001980:	d915      	bls.n	80019ae <dma_stm32_stop+0x46>
 8001982:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8001984:	4620      	mov	r0, r4
 8001986:	f000 f9f1 	bl	8001d6c <dma_stm32_id_to_stream>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800198a:	3801      	subs	r0, #1
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <dma_stm32_stop+0x4c>)
 800198e:	5c1a      	ldrb	r2, [r3, r0]
 8001990:	58bb      	ldr	r3, [r7, r2]
 8001992:	f023 0302 	bic.w	r3, r3, #2
 8001996:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 8001998:	4621      	mov	r1, r4
 800199a:	4638      	mov	r0, r7
 800199c:	f002 fdba 	bl	8004514 <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 80019a0:	4621      	mov	r1, r4
 80019a2:	4628      	mov	r0, r5
 80019a4:	f002 fd31 	bl	800440a <dma_stm32_clear_stream_irq>
	stream->busy = false;
 80019a8:	2000      	movs	r0, #0
 80019aa:	71b0      	strb	r0, [r6, #6]
}
 80019ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 80019ae:	f06f 0015 	mvn.w	r0, #21
 80019b2:	e7fb      	b.n	80019ac <dma_stm32_stop+0x44>
 80019b4:	08005f94 	.word	0x08005f94

080019b8 <dma_stm32_reload>:
{
 80019b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019bc:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 80019be:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80019c0:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 80019c2:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 80019c4:	6943      	ldr	r3, [r0, #20]
 80019c6:	42a3      	cmp	r3, r4
 80019c8:	d96a      	bls.n	8001aa0 <dma_stm32_reload+0xe8>
 80019ca:	4690      	mov	r8, r2
	stream = &config->streams[id];
 80019cc:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80019d0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80019d4:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 80019d8:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 80019dc:	4621      	mov	r1, r4
 80019de:	4630      	mov	r0, r6
 80019e0:	f002 fd98 	bl	8004514 <dma_stm32_disable_stream>
 80019e4:	4681      	mov	r9, r0
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d15d      	bne.n	8001aa6 <dma_stm32_reload+0xee>
	switch (stream->direction) {
 80019ea:	f85a 100b 	ldr.w	r1, [sl, fp]
 80019ee:	2901      	cmp	r1, #1
 80019f0:	d007      	beq.n	8001a02 <dma_stm32_reload+0x4a>
 80019f2:	2902      	cmp	r1, #2
 80019f4:	d02f      	beq.n	8001a56 <dma_stm32_reload+0x9e>
 80019f6:	b371      	cbz	r1, 8001a56 <dma_stm32_reload+0x9e>
 80019f8:	f06f 0915 	mvn.w	r9, #21
}
 80019fc:	4648      	mov	r0, r9
 80019fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 8001a02:	4620      	mov	r0, r4
 8001a04:	f000 f9b2 	bl	8001d6c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001a08:	3801      	subs	r0, #1
 8001a0a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8001aac <dma_stm32_reload+0xf4>
 8001a0e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8001a12:	4433      	add	r3, r6
 8001a14:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 f9a7 	bl	8001d6c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001a1e:	3801      	subs	r0, #1
 8001a20:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8001a24:	4433      	add	r3, r6
 8001a26:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 8001a28:	792b      	ldrb	r3, [r5, #4]
 8001a2a:	b343      	cbz	r3, 8001a7e <dma_stm32_reload+0xc6>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f000 f99d 	bl	8001d6c <dma_stm32_id_to_stream>
				     size / stream->src_size);
 8001a32:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8001a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001a3a:	3801      	subs	r0, #1
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <dma_stm32_reload+0xf4>)
 8001a3e:	5c11      	ldrb	r1, [r2, r0]
 8001a40:	4431      	add	r1, r6
 8001a42:	684a      	ldr	r2, [r1, #4]
 8001a44:	0c12      	lsrs	r2, r2, #16
 8001a46:	0412      	lsls	r2, r2, #16
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f000 f9f6 	bl	8001e40 <stm32_dma_enable_stream>
	return 0;
 8001a54:	e7d2      	b.n	80019fc <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8001a56:	4620      	mov	r0, r4
 8001a58:	f000 f988 	bl	8001d6c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001a5c:	3801      	subs	r0, #1
 8001a5e:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8001aac <dma_stm32_reload+0xf4>
 8001a62:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8001a66:	4433      	add	r3, r6
 8001a68:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f000 f97d 	bl	8001d6c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001a72:	3801      	subs	r0, #1
 8001a74:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8001a78:	4433      	add	r3, r6
 8001a7a:	60df      	str	r7, [r3, #12]
}
 8001a7c:	e7d4      	b.n	8001a28 <dma_stm32_reload+0x70>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f000 f974 	bl	8001d6c <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 8001a84:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8001a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001a8c:	3801      	subs	r0, #1
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <dma_stm32_reload+0xf4>)
 8001a90:	5c11      	ldrb	r1, [r2, r0]
 8001a92:	4431      	add	r1, r6
 8001a94:	684a      	ldr	r2, [r1, #4]
 8001a96:	0c12      	lsrs	r2, r2, #16
 8001a98:	0412      	lsls	r2, r2, #16
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
}
 8001a9e:	e7d5      	b.n	8001a4c <dma_stm32_reload+0x94>
		return -EINVAL;
 8001aa0:	f06f 0915 	mvn.w	r9, #21
 8001aa4:	e7aa      	b.n	80019fc <dma_stm32_reload+0x44>
		return -EBUSY;
 8001aa6:	f06f 090f 	mvn.w	r9, #15
 8001aaa:	e7a7      	b.n	80019fc <dma_stm32_reload+0x44>
 8001aac:	08005f94 	.word	0x08005f94

08001ab0 <dma_stm32_configure>:
{
 8001ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab4:	b08b      	sub	sp, #44	; 0x2c
 8001ab6:	4606      	mov	r6, r0
 8001ab8:	460d      	mov	r5, r1
 8001aba:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 8001abc:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 8001ac0:	f8db 9018 	ldr.w	r9, [fp, #24]
 8001ac4:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8001ac8:	00ff      	lsls	r7, r7, #3
 8001aca:	3f18      	subs	r7, #24
	struct dma_stm32_stream *stream =
 8001acc:	eb09 0807 	add.w	r8, r9, r7
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8001ad0:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8001ad4:	2228      	movs	r2, #40	; 0x28
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4668      	mov	r0, sp
 8001ada:	f002 fb7b 	bl	80041d4 <memset>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8001ade:	8863      	ldrh	r3, [r4, #2]
 8001ae0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8001ae4:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 8001ae8:	d068      	beq.n	8001bbc <dma_stm32_configure+0x10c>
 8001aea:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 8001aec:	f8db 3014 	ldr.w	r3, [fp, #20]
 8001af0:	42ab      	cmp	r3, r5
 8001af2:	f240 80ef 	bls.w	8001cd4 <dma_stm32_configure+0x224>
	if (stream->busy) {
 8001af6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80ed 	bne.w	8001cda <dma_stm32_configure+0x22a>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 8001b00:	4629      	mov	r1, r5
 8001b02:	4650      	mov	r0, sl
 8001b04:	f002 fd06 	bl	8004514 <dma_stm32_disable_stream>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	f040 80e9 	bne.w	8001ce0 <dma_stm32_configure+0x230>
	dma_stm32_clear_stream_irq(dev, id);
 8001b0e:	4629      	mov	r1, r5
 8001b10:	4630      	mov	r0, r6
 8001b12:	f002 fc7a 	bl	800440a <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 8001b16:	6922      	ldr	r2, [r4, #16]
 8001b18:	6953      	ldr	r3, [r2, #20]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1e:	f080 80e2 	bcs.w	8001ce6 <dma_stm32_configure+0x236>
	if ((config->dest_data_size != config->source_data_size)) {
 8001b22:	88e1      	ldrh	r1, [r4, #6]
 8001b24:	88a3      	ldrh	r3, [r4, #4]
 8001b26:	4299      	cmp	r1, r3
 8001b28:	f040 80e0 	bne.w	8001cec <dma_stm32_configure+0x23c>
	if (config->source_data_size != 4U &&
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d004      	beq.n	8001b3a <dma_stm32_configure+0x8a>
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d002      	beq.n	8001b3a <dma_stm32_configure+0x8a>
	    config->source_data_size != 2U &&
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f040 80dc 	bne.w	8001cf2 <dma_stm32_configure+0x242>
	if (config->head_block->source_reload_en !=
 8001b3a:	7f13      	ldrb	r3, [r2, #28]
 8001b3c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001b40:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 8001b44:	f040 80d8 	bne.w	8001cf8 <dma_stm32_configure+0x248>
	stream->busy		= true;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 8001b4e:	69a3      	ldr	r3, [r4, #24]
 8001b50:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 8001b54:	8823      	ldrh	r3, [r4, #0]
 8001b56:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8001b5a:	f849 3007 	str.w	r3, [r9, r7]
	stream->user_data       = config->user_data;
 8001b5e:	6962      	ldr	r2, [r4, #20]
 8001b60:	f8c8 2010 	str.w	r2, [r8, #16]
	stream->src_size	= config->source_data_size;
 8001b64:	88a2      	ldrh	r2, [r4, #4]
 8001b66:	f8c8 2008 	str.w	r2, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 8001b6a:	88e2      	ldrh	r2, [r4, #6]
 8001b6c:	f8c8 200c 	str.w	r2, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 8001b70:	6922      	ldr	r2, [r4, #16]
 8001b72:	6811      	ldr	r1, [r2, #0]
	if ((config->head_block->dest_address == 0)) {
 8001b74:	6850      	ldr	r0, [r2, #4]
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d02d      	beq.n	8001bd6 <dma_stm32_configure+0x126>
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8001b7a:	9100      	str	r1, [sp, #0]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8001b7c:	9001      	str	r0, [sp, #4]
	ret = dma_stm32_get_priority(config->channel_priority,
 8001b7e:	6820      	ldr	r0, [r4, #0]
 8001b80:	a909      	add	r1, sp, #36	; 0x24
 8001b82:	f3c0 3083 	ubfx	r0, r0, #14, #4
 8001b86:	f002 fbb0 	bl	80042ea <dma_stm32_get_priority>
	if (ret < 0) {
 8001b8a:	1e06      	subs	r6, r0, #0
 8001b8c:	db12      	blt.n	8001bb4 <dma_stm32_configure+0x104>
	ret = dma_stm32_get_direction(config->channel_direction,
 8001b8e:	8820      	ldrh	r0, [r4, #0]
 8001b90:	a902      	add	r1, sp, #8
 8001b92:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 8001b96:	f002 fbc3 	bl	8004320 <dma_stm32_get_direction>
	if (ret < 0) {
 8001b9a:	1e06      	subs	r6, r0, #0
 8001b9c:	db0a      	blt.n	8001bb4 <dma_stm32_configure+0x104>
	switch (config->channel_direction) {
 8001b9e:	8823      	ldrh	r3, [r4, #0]
 8001ba0:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f000 8083 	beq.w	8001cb0 <dma_stm32_configure+0x200>
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d017      	beq.n	8001bde <dma_stm32_configure+0x12e>
 8001bae:	b1b3      	cbz	r3, 8001bde <dma_stm32_configure+0x12e>
 8001bb0:	f06f 0615 	mvn.w	r6, #21
}
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	b00b      	add	sp, #44	; 0x2c
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stream->busy = true;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 8001bc2:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 8001bc6:	69a3      	ldr	r3, [r4, #24]
 8001bc8:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 8001bcc:	6963      	ldr	r3, [r4, #20]
 8001bce:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 8001bd2:	2600      	movs	r6, #0
 8001bd4:	e7ee      	b.n	8001bb4 <dma_stm32_configure+0x104>
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8001bd6:	9101      	str	r1, [sp, #4]
					config->head_block->dest_address;
 8001bd8:	6853      	ldr	r3, [r2, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	e7cf      	b.n	8001b7e <dma_stm32_configure+0xce>
		memory_addr_adj = config->head_block->dest_addr_adj;
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8001be4:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 8001be8:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 8001bec:	a905      	add	r1, sp, #20
 8001bee:	f002 fbaa 	bl	8004346 <dma_stm32_get_memory_increment>
	if (ret < 0) {
 8001bf2:	1e06      	subs	r6, r0, #0
 8001bf4:	dbde      	blt.n	8001bb4 <dma_stm32_configure+0x104>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 8001bf6:	a904      	add	r1, sp, #16
 8001bf8:	4658      	mov	r0, fp
 8001bfa:	f002 fbb5 	bl	8004368 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 8001bfe:	1e06      	subs	r6, r0, #0
 8001c00:	dbd8      	blt.n	8001bb4 <dma_stm32_configure+0x104>
	if (config->head_block->source_reload_en) {
 8001c02:	6923      	ldr	r3, [r4, #16]
 8001c04:	7f1b      	ldrb	r3, [r3, #28]
 8001c06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c0a:	d059      	beq.n	8001cc0 <dma_stm32_configure+0x210>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	9303      	str	r3, [sp, #12]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8001c10:	f859 3007 	ldr.w	r3, [r9, r7]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	bf14      	ite	ne
 8001c18:	2300      	movne	r3, #0
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 8001c20:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b90b      	cbnz	r3, 8001c30 <dma_stm32_configure+0x180>
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <dma_stm32_configure+0x250>)
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	9306      	str	r3, [sp, #24]
	index = find_lsb_set(config->dest_data_size) - 1;
 8001c38:	88e3      	ldrh	r3, [r4, #6]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b90b      	cbnz	r3, 8001c48 <dma_stm32_configure+0x198>
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8001c48:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <dma_stm32_configure+0x254>)
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	9307      	str	r3, [sp, #28]
	if (stream->source_periph) {
 8001c50:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d036      	beq.n	8001cc6 <dma_stm32_configure+0x216>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8001c58:	6923      	ldr	r3, [r4, #16]
 8001c5a:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8001c5c:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8001c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c62:	9308      	str	r3, [sp, #32]
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8001c64:	4628      	mov	r0, r5
 8001c66:	f000 f881 	bl	8001d6c <dma_stm32_id_to_stream>
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	466a      	mov	r2, sp
 8001c6e:	4650      	mov	r0, sl
 8001c70:	f000 fdf4 	bl	800285c <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8001c74:	4628      	mov	r0, r5
 8001c76:	f000 f879 	bl	8001d6c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001c7a:	3801      	subs	r0, #1
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <dma_stm32_configure+0x258>)
 8001c7e:	5c1a      	ldrb	r2, [r3, r0]
 8001c80:	f85a 3002 	ldr.w	r3, [sl, r2]
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	7f1b      	ldrb	r3, [r3, #28]
 8001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c94:	d08e      	beq.n	8001bb4 <dma_stm32_configure+0x104>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8001c96:	4628      	mov	r0, r5
 8001c98:	f000 f868 	bl	8001d6c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001c9c:	3801      	subs	r0, #1
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <dma_stm32_configure+0x258>)
 8001ca0:	5c1a      	ldrb	r2, [r3, r0]
 8001ca2:	f85a 3002 	ldr.w	r3, [sl, r2]
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f84a 3002 	str.w	r3, [sl, r2]
}
 8001cae:	e781      	b.n	8001bb4 <dma_stm32_configure+0x104>
		memory_addr_adj = config->head_block->source_addr_adj;
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8001cb6:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8001cba:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 8001cbe:	e795      	b.n	8001bec <dma_stm32_configure+0x13c>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9303      	str	r3, [sp, #12]
 8001cc4:	e7a4      	b.n	8001c10 <dma_stm32_configure+0x160>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 8001cca:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8001ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cd0:	9308      	str	r3, [sp, #32]
 8001cd2:	e7c7      	b.n	8001c64 <dma_stm32_configure+0x1b4>
		return -EINVAL;
 8001cd4:	f06f 0615 	mvn.w	r6, #21
 8001cd8:	e76c      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EBUSY;
 8001cda:	f06f 060f 	mvn.w	r6, #15
 8001cde:	e769      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EBUSY;
 8001ce0:	f06f 060f 	mvn.w	r6, #15
 8001ce4:	e766      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EINVAL;
 8001ce6:	f06f 0615 	mvn.w	r6, #21
 8001cea:	e763      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EINVAL;
 8001cec:	f06f 0615 	mvn.w	r6, #21
 8001cf0:	e760      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EINVAL;
 8001cf2:	f06f 0615 	mvn.w	r6, #21
 8001cf6:	e75d      	b.n	8001bb4 <dma_stm32_configure+0x104>
		return -EINVAL;
 8001cf8:	f06f 0615 	mvn.w	r6, #21
 8001cfc:	e75a      	b.n	8001bb4 <dma_stm32_configure+0x104>
 8001cfe:	bf00      	nop
 8001d00:	08005fdc 	.word	0x08005fdc
 8001d04:	08005fd0 	.word	0x08005fd0
 8001d08:	08005f94 	.word	0x08005f94

08001d0c <dma_stm32_init>:
{
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 8001d10:	6844      	ldr	r4, [r0, #4]
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <dma_stm32_init+0x5c>)
 8001d14:	f003 fb8b 	bl	800542e <z_device_ready>
 8001d18:	b158      	cbz	r0, 8001d32 <dma_stm32_init+0x26>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8001d1a:	4813      	ldr	r0, [pc, #76]	; (8001d68 <dma_stm32_init+0x5c>)
 8001d1c:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4621      	mov	r1, r4
 8001d22:	4798      	blx	r3
 8001d24:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 8001d26:	b9de      	cbnz	r6, 8001d60 <dma_stm32_init+0x54>
	config->config_irq(dev);
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e00a      	b.n	8001d48 <dma_stm32_init+0x3c>
 8001d32:	f06f 0612 	mvn.w	r6, #18
 8001d36:	e7f6      	b.n	8001d26 <dma_stm32_init+0x1a>
		config->streams[i].busy = false;
 8001d38:	69a2      	ldr	r2, [r4, #24]
 8001d3a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001d42:	2100      	movs	r1, #0
 8001d44:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8001d46:	3301      	adds	r3, #1
 8001d48:	6962      	ldr	r2, [r4, #20]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d3f4      	bcc.n	8001d38 <dma_stm32_init+0x2c>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8001d4e:	692a      	ldr	r2, [r5, #16]
 8001d50:	2300      	movs	r3, #0
 8001d52:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8001d54:	692a      	ldr	r2, [r5, #16]
 8001d56:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8001d58:	692a      	ldr	r2, [r5, #16]
 8001d5a:	6093      	str	r3, [r2, #8]
}
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8001d60:	f06f 0604 	mvn.w	r6, #4
 8001d64:	e7fa      	b.n	8001d5c <dma_stm32_init+0x50>
 8001d66:	bf00      	nop
 8001d68:	08005a84 	.word	0x08005a84

08001d6c <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 8001d6c:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <dma_stm32_id_to_stream+0x8>)
 8001d6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d72:	4770      	bx	lr
 8001d74:	0800607c 	.word	0x0800607c

08001d78 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8001d78:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <dma_stm32_clear_ht+0xc>)
 8001d7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d80:	4798      	blx	r3
}
 8001d82:	bd08      	pop	{r3, pc}
 8001d84:	08006060 	.word	0x08006060

08001d88 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 8001d88:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8001d8a:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <dma_stm32_clear_tc+0xc>)
 8001d8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d90:	4798      	blx	r3
}
 8001d92:	bd08      	pop	{r3, pc}
 8001d94:	08006044 	.word	0x08006044

08001d98 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8001d98:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <dma_stm32_is_ht_active+0x14>)
 8001d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001da0:	4798      	blx	r3
}
 8001da2:	3800      	subs	r0, #0
 8001da4:	bf18      	it	ne
 8001da6:	2001      	movne	r0, #1
 8001da8:	bd08      	pop	{r3, pc}
 8001daa:	bf00      	nop
 8001dac:	08006028 	.word	0x08006028

08001db0 <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8001db0:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <dma_stm32_is_tc_active+0x14>)
 8001db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001db8:	4798      	blx	r3
}
 8001dba:	3800      	subs	r0, #0
 8001dbc:	bf18      	it	ne
 8001dbe:	2001      	movne	r0, #1
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0800600c 	.word	0x0800600c

08001dc8 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 8001dc8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8001dca:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <dma_stm32_clear_te+0xc>)
 8001dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dd0:	4798      	blx	r3
}
 8001dd2:	bd08      	pop	{r3, pc}
 8001dd4:	08005ff0 	.word	0x08005ff0

08001dd8 <stm32_dma_is_tc_irq_active>:
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8001dde:	4608      	mov	r0, r1
 8001de0:	f7ff ffc4 	bl	8001d6c <dma_stm32_id_to_stream>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001de4:	3801      	subs	r0, #1
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <stm32_dma_is_tc_irq_active+0x30>)
 8001de8:	5c1b      	ldrb	r3, [r3, r0]
 8001dea:	591b      	ldr	r3, [r3, r4]
 8001dec:	f013 0f02 	tst.w	r3, #2
 8001df0:	d101      	bne.n	8001df6 <stm32_dma_is_tc_irq_active+0x1e>
 8001df2:	2000      	movs	r0, #0
	       dma_stm32_is_tc_active(dma, id);
}
 8001df4:	bd38      	pop	{r3, r4, r5, pc}
	       dma_stm32_is_tc_active(dma, id);
 8001df6:	4629      	mov	r1, r5
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff ffd9 	bl	8001db0 <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8001dfe:	b108      	cbz	r0, 8001e04 <stm32_dma_is_tc_irq_active+0x2c>
 8001e00:	2001      	movs	r0, #1
 8001e02:	e7f7      	b.n	8001df4 <stm32_dma_is_tc_irq_active+0x1c>
 8001e04:	2000      	movs	r0, #0
 8001e06:	e7f5      	b.n	8001df4 <stm32_dma_is_tc_irq_active+0x1c>
 8001e08:	08005fe8 	.word	0x08005fe8

08001e0c <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8001e12:	4608      	mov	r0, r1
 8001e14:	f7ff ffaa 	bl	8001d6c <dma_stm32_id_to_stream>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e18:	3801      	subs	r0, #1
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <stm32_dma_is_ht_irq_active+0x30>)
 8001e1c:	5c1b      	ldrb	r3, [r3, r0]
 8001e1e:	591b      	ldr	r3, [r3, r4]
 8001e20:	f013 0f04 	tst.w	r3, #4
 8001e24:	d101      	bne.n	8001e2a <stm32_dma_is_ht_irq_active+0x1e>
 8001e26:	2000      	movs	r0, #0
	       dma_stm32_is_ht_active(dma, id);
}
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
	       dma_stm32_is_ht_active(dma, id);
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff ffb3 	bl	8001d98 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8001e32:	b108      	cbz	r0, 8001e38 <stm32_dma_is_ht_irq_active+0x2c>
 8001e34:	2001      	movs	r0, #1
 8001e36:	e7f7      	b.n	8001e28 <stm32_dma_is_ht_irq_active+0x1c>
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e7f5      	b.n	8001e28 <stm32_dma_is_ht_irq_active+0x1c>
 8001e3c:	08005fe8 	.word	0x08005fe8

08001e40 <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 8001e44:	4608      	mov	r0, r1
 8001e46:	f7ff ff91 	bl	8001d6c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e4a:	3801      	subs	r0, #1
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <stm32_dma_enable_stream+0x1c>)
 8001e4e:	5c1a      	ldrb	r2, [r3, r0]
 8001e50:	58a3      	ldr	r3, [r4, r2]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	50a3      	str	r3, [r4, r2]
}
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08005fe8 	.word	0x08005fe8

08001e60 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 8001e64:	4608      	mov	r0, r1
 8001e66:	f7ff ff81 	bl	8001d6c <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e6a:	3801      	subs	r0, #1
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <stm32_dma_disable_stream+0x2c>)
 8001e6e:	5c1b      	ldrb	r3, [r3, r0]
 8001e70:	58e2      	ldr	r2, [r4, r3]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	50e2      	str	r2, [r4, r3]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e78:	58e3      	ldr	r3, [r4, r3]

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
 8001e7a:	f013 0f01 	tst.w	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <stm32_dma_disable_stream+0x24>
		return 0;
 8001e80:	2000      	movs	r0, #0
	}

	return -EAGAIN;
}
 8001e82:	bd10      	pop	{r4, pc}
	return -EAGAIN;
 8001e84:	f06f 000a 	mvn.w	r0, #10
 8001e88:	e7fb      	b.n	8001e82 <stm32_dma_disable_stream+0x22>
 8001e8a:	bf00      	nop
 8001e8c:	08005fe8 	.word	0x08005fe8

08001e90 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001e90:	424a      	negs	r2, r1
 8001e92:	f001 0303 	and.w	r3, r1, #3
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	bf58      	it	pl
 8001e9c:	4253      	negpl	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	db19      	blt.n	8001ee0 <gpio_stm32_set_exti_source+0x50>
 8001eac:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001eb0:	f003 0c03 	and.w	ip, r3, #3
 8001eb4:	f10c 0102 	add.w	r1, ip, #2
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <gpio_stm32_set_exti_source+0x58>)
 8001eba:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001ebe:	0c1a      	lsrs	r2, r3, #16
 8001ec0:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ec8:	b162      	cbz	r2, 8001ee4 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	f10c 0c02 	add.w	ip, ip, #2
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <gpio_stm32_set_exti_source+0x58>)
 8001eda:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8001ede:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001ee0:	1cca      	adds	r2, r1, #3
 8001ee2:	e7e3      	b.n	8001eac <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	e7f2      	b.n	8001ece <gpio_stm32_set_exti_source+0x3e>
 8001ee8:	40010000 	.word	0x40010000

08001eec <gpio_stm32_get_exti_source>:
 8001eec:	4242      	negs	r2, r0
 8001eee:	f000 0303 	and.w	r3, r0, #3
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	bf58      	it	pl
 8001ef8:	4253      	negpl	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	230f      	movs	r3, #15
 8001f00:	4093      	lsls	r3, r2
 8001f02:	4602      	mov	r2, r0
 8001f04:	2800      	cmp	r0, #0
 8001f06:	db11      	blt.n	8001f2c <gpio_stm32_get_exti_source+0x40>
 8001f08:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001f0c:	f000 0303 	and.w	r3, r0, #3
 8001f10:	3302      	adds	r3, #2
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <gpio_stm32_get_exti_source+0x48>)
 8001f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f18:	0c03      	lsrs	r3, r0, #16
 8001f1a:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001f22:	b12b      	cbz	r3, 8001f30 <gpio_stm32_get_exti_source+0x44>
  return __builtin_clz(value);
 8001f24:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8001f28:	40d8      	lsrs	r0, r3
 8001f2a:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001f2c:	1cc2      	adds	r2, r0, #3
 8001f2e:	e7eb      	b.n	8001f08 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e7f9      	b.n	8001f28 <gpio_stm32_get_exti_source+0x3c>
 8001f34:	40010000 	.word	0x40010000

08001f38 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <gpio_stm32_enable_int+0x40>)
 8001f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f46:	ab02      	add	r3, sp, #8
 8001f48:	e903 0003 	stmdb	r3, {r0, r1}
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <gpio_stm32_enable_int+0x44>)
 8001f4e:	f003 fa6e 	bl	800542e <z_device_ready>
 8001f52:	b148      	cbz	r0, 8001f68 <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <gpio_stm32_enable_int+0x44>)
 8001f56:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4669      	mov	r1, sp
 8001f5c:	4798      	blx	r3
 8001f5e:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8001f60:	b12c      	cbz	r4, 8001f6e <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8001f62:	4620      	mov	r0, r4
 8001f64:	b002      	add	sp, #8
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	f06f 0412 	mvn.w	r4, #18
 8001f6c:	e7f8      	b.n	8001f60 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4630      	mov	r0, r6
 8001f72:	f7ff ff8d 	bl	8001e90 <gpio_stm32_set_exti_source>
	return 0;
 8001f76:	e7f4      	b.n	8001f62 <gpio_stm32_enable_int+0x2a>
 8001f78:	08005e00 	.word	0x08005e00
 8001f7c:	08005a84 	.word	0x08005a84

08001f80 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8001f86:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001f88:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8001f8a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8001f8e:	d01f      	beq.n	8001fd0 <gpio_stm32_pin_interrupt_configure+0x50>
 8001f90:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001f92:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001f96:	d034      	beq.n	8002002 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001f98:	491d      	ldr	r1, [pc, #116]	; (8002010 <gpio_stm32_pin_interrupt_configure+0x90>)
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff fb9e 	bl	80016dc <stm32_exti_set_callback>
 8001fa0:	4606      	mov	r6, r0
 8001fa2:	bb88      	cbnz	r0, 8002008 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f7ff ffc6 	bl	8001f38 <gpio_stm32_enable_int>

	switch (trig) {
 8001fac:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8001fb0:	d023      	beq.n	8001ffa <gpio_stm32_pin_interrupt_configure+0x7a>
 8001fb2:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8001fb6:	d022      	beq.n	8001ffe <gpio_stm32_pin_interrupt_configure+0x7e>
 8001fb8:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8001fbc:	d01b      	beq.n	8001ff6 <gpio_stm32_pin_interrupt_configure+0x76>
 8001fbe:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff fb53 	bl	800166c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fb34 	bl	8001634 <stm32_exti_enable>

exit:
	return err;
}
 8001fcc:	4630      	mov	r0, r6
 8001fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff8b 	bl	8001eec <gpio_stm32_get_exti_source>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4298      	cmp	r0, r3
 8001fda:	d001      	beq.n	8001fe0 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8001fdc:	2600      	movs	r6, #0
		goto exit;
 8001fde:	e7f5      	b.n	8001fcc <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff fb37 	bl	8001654 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fb8a 	bl	8001700 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001fec:	2100      	movs	r1, #0
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fb3c 	bl	800166c <stm32_exti_trigger>
 8001ff4:	e7f2      	b.n	8001fdc <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	e7e2      	b.n	8001fc0 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	e7e0      	b.n	8001fc0 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8001ffe:	2103      	movs	r1, #3
 8002000:	e7de      	b.n	8001fc0 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8002002:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8002006:	e7e1      	b.n	8001fcc <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8002008:	f06f 060f 	mvn.w	r6, #15
	return err;
 800200c:	e7de      	b.n	8001fcc <gpio_stm32_pin_interrupt_configure+0x4c>
 800200e:	bf00      	nop
 8002010:	080046bd 	.word	0x080046bd

08002014 <gpio_stm32_clock_request>:
{
 8002014:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8002016:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8002018:	b169      	cbz	r1, 8002036 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 800201a:	340c      	adds	r4, #12
 800201c:	480d      	ldr	r0, [pc, #52]	; (8002054 <gpio_stm32_clock_request+0x40>)
 800201e:	f003 fa06 	bl	800542e <z_device_ready>
 8002022:	b128      	cbz	r0, 8002030 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8002024:	480b      	ldr	r0, [pc, #44]	; (8002054 <gpio_stm32_clock_request+0x40>)
 8002026:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4621      	mov	r1, r4
 800202c:	4798      	blx	r3
}
 800202e:	bd10      	pop	{r4, pc}
 8002030:	f06f 0012 	mvn.w	r0, #18
 8002034:	e7fb      	b.n	800202e <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8002036:	340c      	adds	r4, #12
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <gpio_stm32_clock_request+0x40>)
 800203a:	f003 f9f8 	bl	800542e <z_device_ready>
 800203e:	b128      	cbz	r0, 800204c <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <gpio_stm32_clock_request+0x40>)
 8002042:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4621      	mov	r1, r4
 8002048:	4798      	blx	r3
 800204a:	e7f0      	b.n	800202e <gpio_stm32_clock_request+0x1a>
 800204c:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8002050:	e7ed      	b.n	800202e <gpio_stm32_clock_request+0x1a>
 8002052:	bf00      	nop
 8002054:	08005a84 	.word	0x08005a84

08002058 <flash_stm32_get_parameters>:
flash_stm32_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_stm32_parameters;
}
 8002058:	4800      	ldr	r0, [pc, #0]	; (800205c <flash_stm32_get_parameters+0x4>)
 800205a:	4770      	bx	lr
 800205c:	08006188 	.word	0x08006188

08002060 <flash_stm32_write_protection>:
{
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8002062:	6903      	ldr	r3, [r0, #16]
 8002064:	681d      	ldr	r5, [r3, #0]
	if (enable) {
 8002066:	460f      	mov	r7, r1
 8002068:	b959      	cbnz	r1, 8002082 <flash_stm32_write_protection+0x22>
	int rc = 0;
 800206a:	2600      	movs	r6, #0
	if (enable) {
 800206c:	b1a7      	cbz	r7, 8002098 <flash_stm32_write_protection+0x38>
		regs->PECR |= FLASH_PECR_PRGLOCK;
 800206e:	686b      	ldr	r3, [r5, #4]
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	606b      	str	r3, [r5, #4]
		regs->PECR |= FLASH_PECR_PELOCK;
 8002076:	686b      	ldr	r3, [r5, #4]
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	606b      	str	r3, [r5, #4]
}
 800207e:	4630      	mov	r0, r6
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002082:	4604      	mov	r4, r0
		rc = flash_stm32_wait_flash_idle(dev);
 8002084:	f002 fcfe 	bl	8004a84 <flash_stm32_wait_flash_idle>
		if (rc) {
 8002088:	4606      	mov	r6, r0
 800208a:	2800      	cmp	r0, #0
 800208c:	d0ee      	beq.n	800206c <flash_stm32_write_protection+0xc>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800208e:	6920      	ldr	r0, [r4, #16]
 8002090:	300c      	adds	r0, #12
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002092:	f000 fec5 	bl	8002e20 <z_impl_k_sem_give>
			return rc;
 8002096:	e7f2      	b.n	800207e <flash_stm32_write_protection+0x1e>
		if (regs->PECR & FLASH_PECR_PRGLOCK) {
 8002098:	686b      	ldr	r3, [r5, #4]
 800209a:	f013 0f02 	tst.w	r3, #2
 800209e:	d00c      	beq.n	80020ba <flash_stm32_write_protection+0x5a>
			regs->PEKEYR = FLASH_PEKEY1;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <flash_stm32_write_protection+0x6c>)
 80020a2:	60eb      	str	r3, [r5, #12]
			regs->PEKEYR = FLASH_PEKEY2;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <flash_stm32_write_protection+0x70>)
 80020a6:	60eb      	str	r3, [r5, #12]
			regs->PRGKEYR = FLASH_PRGKEY1;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <flash_stm32_write_protection+0x74>)
 80020aa:	612b      	str	r3, [r5, #16]
			regs->PRGKEYR = FLASH_PRGKEY2;
 80020ac:	f1a3 43f3 	sub.w	r3, r3, #2038431744	; 0x79800000
 80020b0:	f5a3 2319 	sub.w	r3, r3, #626688	; 0x99000
 80020b4:	f6a3 13a9 	subw	r3, r3, #2473	; 0x9a9
 80020b8:	612b      	str	r3, [r5, #16]
		if (FLASH->PECR & FLASH_PECR_PRGLOCK) {
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <flash_stm32_write_protection+0x78>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f013 0f02 	tst.w	r3, #2
 80020c2:	d0dc      	beq.n	800207e <flash_stm32_write_protection+0x1e>
			rc = -EIO;
 80020c4:	f06f 0604 	mvn.w	r6, #4
 80020c8:	e7d9      	b.n	800207e <flash_stm32_write_protection+0x1e>
 80020ca:	bf00      	nop
 80020cc:	89abcdef 	.word	0x89abcdef
 80020d0:	02030405 	.word	0x02030405
 80020d4:	8c9daebf 	.word	0x8c9daebf
 80020d8:	40023c00 	.word	0x40023c00

080020dc <stm32_flash_init>:
	.page_layout = flash_stm32_page_layout,
#endif
};

static int stm32_flash_init(const struct device *dev)
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4604      	mov	r4, r0
	int rc;
	/* Below is applicable to F0, F1, F3, G0, G4, L1, L4, L5 & WB55 series.
	 * For F2, F4, F7 & H7 series, this is not applicable.
	 */
#if DT_INST_NODE_HAS_PROP(0, clocks)
	struct flash_stm32_priv *p = FLASH_STM32_PRIV(dev);
 80020e0:	6905      	ldr	r5, [r0, #16]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <stm32_flash_init+0x5c>)
 80020e4:	6813      	ldr	r3, [r2, #0]
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <stm32_flash_init+0x5c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f013 0f02 	tst.w	r3, #2
 80020f4:	d0fa      	beq.n	80020ec <stm32_flash_init+0x10>
	while (!LL_RCC_HSI_IsReady()) {
	}
#endif

	/* enable clock */
	if (clock_control_on(clk, (clock_control_subsys_t *)&p->pclken) != 0) {
 80020f6:	3504      	adds	r5, #4
 80020f8:	4810      	ldr	r0, [pc, #64]	; (800213c <stm32_flash_init+0x60>)
 80020fa:	f003 f998 	bl	800542e <z_device_ready>
 80020fe:	b1a0      	cbz	r0, 800212a <stm32_flash_init+0x4e>
	const struct clock_control_driver_api *api =
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <stm32_flash_init+0x60>)
 8002102:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4629      	mov	r1, r5
 8002108:	4798      	blx	r3
 800210a:	b988      	cbnz	r0, 8002130 <stm32_flash_init+0x54>

#ifdef CONFIG_SOC_SERIES_STM32WBX
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	flash_stm32_sem_init(dev);
 800210c:	6920      	ldr	r0, [r4, #16]
 800210e:	300c      	adds	r0, #12
	return z_impl_k_sem_init(sem, initial_count, limit);
 8002110:	2201      	movs	r2, #1
 8002112:	4611      	mov	r1, r2
 8002114:	f003 fa13 	bl	800553e <z_impl_k_sem_init>

	LOG_DBG("Flash initialized. BS: %zu",
		flash_stm32_parameters.write_block_size);

	/* Check Flash configuration */
	rc = flash_stm32_check_configuration();
 8002118:	f002 fcb2 	bl	8004a80 <flash_stm32_check_configuration>
	if (rc < 0) {
 800211c:	2800      	cmp	r0, #0
 800211e:	db03      	blt.n	8002128 <stm32_flash_init+0x4c>
		LOG_DBG("Block %zu: bs: %zu count: %zu", i,
			layout[i].pages_size, layout[i].pages_count);
	}
#endif

	return flash_stm32_write_protection(dev, false);
 8002120:	2100      	movs	r1, #0
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff ff9c 	bl	8002060 <flash_stm32_write_protection>
}
 8002128:	bd38      	pop	{r3, r4, r5, pc}
 800212a:	f06f 0012 	mvn.w	r0, #18
 800212e:	e7ec      	b.n	800210a <stm32_flash_init+0x2e>
		return -EIO;
 8002130:	f06f 0004 	mvn.w	r0, #4
 8002134:	e7f8      	b.n	8002128 <stm32_flash_init+0x4c>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	08005a84 	.word	0x08005a84

08002140 <flash_stm32_page_layout>:
		.pages_size = 0,
	};

	ARG_UNUSED(dev);

	if (flash_layout.pages_count == 0) {
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <flash_stm32_page_layout+0x20>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b933      	cbnz	r3, 8002154 <flash_stm32_page_layout+0x14>
#if defined(CONFIG_SOC_SERIES_STM32F3X)
		flash_layout.pages_count =
			DT_REG_SIZE(DT_INST(0, soc_nv_flash)) / FLASH_PAGE_SIZE;
#else
		flash_layout.pages_count = (CONFIG_FLASH_SIZE * 1024) /
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <flash_stm32_page_layout+0x20>)
 8002148:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800214c:	6018      	str	r0, [r3, #0]
			FLASH_PAGE_SIZE;
#endif
		flash_layout.pages_size = FLASH_PAGE_SIZE;
 800214e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002152:	6058      	str	r0, [r3, #4]
	}

	*layout = &flash_layout;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <flash_stm32_page_layout+0x20>)
 8002156:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
 8002158:	2301      	movs	r3, #1
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000b1c 	.word	0x20000b1c

08002164 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8002164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 800216c:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800216e:	6843      	ldr	r3, [r0, #4]
 8002170:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002172:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8002174:	2a01      	cmp	r2, #1
 8002176:	f000 8091 	beq.w	800229c <uart_stm32_configure+0x138>
 800217a:	2a02      	cmp	r2, #2
 800217c:	f040 8091 	bne.w	80022a2 <uart_stm32_configure+0x13e>
		return LL_USART_PARITY_EVEN;
 8002180:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002184:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8002186:	2b01      	cmp	r3, #1
 8002188:	f000 8091 	beq.w	80022ae <uart_stm32_configure+0x14a>
 800218c:	2b02      	cmp	r3, #2
 800218e:	f000 8090 	beq.w	80022b2 <uart_stm32_configure+0x14e>
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8088 	beq.w	80022a8 <uart_stm32_configure+0x144>
		return LL_USART_STOPBITS_2;
 8002198:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800219c:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 800219e:	2904      	cmp	r1, #4
 80021a0:	f000 808a 	beq.w	80022b8 <uart_stm32_configure+0x154>
		if (p == UART_CFG_PARITY_NONE) {
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	f040 808a 	bne.w	80022be <uart_stm32_configure+0x15a>
			return LL_USART_DATAWIDTH_8B;
 80021aa:	f04f 0800 	mov.w	r8, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80021ae:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80021b2:	f1ba 0f01 	cmp.w	sl, #1
 80021b6:	f000 8085 	beq.w	80022c4 <uart_stm32_configure+0x160>
	return LL_USART_HWCONTROL_NONE;
 80021ba:	f04f 0e00 	mov.w	lr, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80021be:	f1a2 0903 	sub.w	r9, r2, #3
 80021c2:	fa5f f989 	uxtb.w	r9, r9
 80021c6:	f1b9 0f01 	cmp.w	r9, #1
 80021ca:	f240 80c2 	bls.w	8002352 <uart_stm32_configure+0x1ee>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80021ce:	b112      	cbz	r2, 80021d6 <uart_stm32_configure+0x72>
 80021d0:	2904      	cmp	r1, #4
 80021d2:	f000 80c1 	beq.w	8002358 <uart_stm32_configure+0x1f4>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80c1 	beq.w	800235e <uart_stm32_configure+0x1fa>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f000 80c1 	beq.w	8002364 <uart_stm32_configure+0x200>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80021e2:	2902      	cmp	r1, #2
 80021e4:	f240 80c1 	bls.w	800236a <uart_stm32_configure+0x206>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80021e8:	2904      	cmp	r1, #4
 80021ea:	f000 80c1 	beq.w	8002370 <uart_stm32_configure+0x20c>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80021ee:	f1ba 0f00 	cmp.w	sl, #0
 80021f2:	d00f      	beq.n	8002214 <uart_stm32_configure+0xb0>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <uart_stm32_configure+0x220>)
 80021f6:	429d      	cmp	r5, r3
 80021f8:	d008      	beq.n	800220c <uart_stm32_configure+0xa8>
 80021fa:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80021fe:	429d      	cmp	r5, r3
 8002200:	d004      	beq.n	800220c <uart_stm32_configure+0xa8>
 8002202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002206:	429d      	cmp	r5, r3
 8002208:	f040 80b5 	bne.w	8002376 <uart_stm32_configure+0x212>
 800220c:	f1ba 0f01 	cmp.w	sl, #1
 8002210:	f040 80b4 	bne.w	800237c <uart_stm32_configure+0x218>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002214:	68eb      	ldr	r3, [r5, #12]
 8002216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800221a:	60eb      	str	r3, [r5, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800221c:	6843      	ldr	r3, [r0, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002220:	68d3      	ldr	r3, [r2, #12]
 8002222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8002226:	459c      	cmp	ip, r3
 8002228:	d005      	beq.n	8002236 <uart_stm32_configure+0xd2>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800222a:	68d3      	ldr	r3, [r2, #12]
 800222c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002230:	ea4c 0303 	orr.w	r3, ip, r3
 8002234:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002236:	6843      	ldr	r3, [r0, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800223a:	6913      	ldr	r3, [r2, #16]
 800223c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8002240:	429f      	cmp	r7, r3
 8002242:	d004      	beq.n	800224e <uart_stm32_configure+0xea>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002244:	6913      	ldr	r3, [r2, #16]
 8002246:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800224a:	431f      	orrs	r7, r3
 800224c:	6117      	str	r7, [r2, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800224e:	6843      	ldr	r3, [r0, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002252:	68d3      	ldr	r3, [r2, #12]
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8002258:	4598      	cmp	r8, r3
 800225a:	d005      	beq.n	8002268 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800225c:	68d3      	ldr	r3, [r2, #12]
 800225e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002262:	ea48 0303 	orr.w	r3, r8, r3
 8002266:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002268:	6843      	ldr	r3, [r0, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800226c:	6953      	ldr	r3, [r2, #20]
 800226e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8002272:	459e      	cmp	lr, r3
 8002274:	d005      	beq.n	8002282 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002276:	6953      	ldr	r3, [r2, #20]
 8002278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227c:	ea4e 0303 	orr.w	r3, lr, r3
 8002280:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8002282:	f8d4 8000 	ldr.w	r8, [r4]
 8002286:	6833      	ldr	r3, [r6, #0]
 8002288:	4598      	cmp	r8, r3
 800228a:	d11e      	bne.n	80022ca <uart_stm32_configure+0x166>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800228c:	68eb      	ldr	r3, [r5, #12]
 800228e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002292:	60eb      	str	r3, [r5, #12]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8002294:	2000      	movs	r0, #0
};
 8002296:	b002      	add	sp, #8
 8002298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 800229c:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 80022a0:	e770      	b.n	8002184 <uart_stm32_configure+0x20>
		return LL_USART_PARITY_NONE;
 80022a2:	f04f 0c00 	mov.w	ip, #0
 80022a6:	e76d      	b.n	8002184 <uart_stm32_configure+0x20>
	switch (sb) {
 80022a8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80022ac:	e776      	b.n	800219c <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1;
 80022ae:	2700      	movs	r7, #0
 80022b0:	e774      	b.n	800219c <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1_5;
 80022b2:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 80022b6:	e771      	b.n	800219c <uart_stm32_configure+0x38>
		return LL_USART_DATAWIDTH_9B;
 80022b8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80022bc:	e777      	b.n	80021ae <uart_stm32_configure+0x4a>
			return LL_USART_DATAWIDTH_9B;
 80022be:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80022c2:	e774      	b.n	80021ae <uart_stm32_configure+0x4a>
		return LL_USART_HWCONTROL_RTS_CTS;
 80022c4:	f44f 7e40 	mov.w	lr, #768	; 0x300
 80022c8:	e779      	b.n	80021be <uart_stm32_configure+0x5a>
	struct uart_stm32_data *data = DEV_DATA(dev);
 80022ca:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80022cc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80022d0:	f859 7b0c 	ldr.w	r7, [r9], #12
	if (clock_control_get_rate(data->clock,
 80022d4:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80022d8:	4650      	mov	r0, sl
 80022da:	f003 f8a8 	bl	800542e <z_device_ready>
 80022de:	b390      	cbz	r0, 8002346 <uart_stm32_configure+0x1e2>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 80022e0:	f8da 3008 	ldr.w	r3, [sl, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	b38b      	cbz	r3, 800234c <uart_stm32_configure+0x1e8>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80022e8:	aa01      	add	r2, sp, #4
 80022ea:	4649      	mov	r1, r9
 80022ec:	4650      	mov	r0, sl
 80022ee:	4798      	blx	r3
 80022f0:	2800      	cmp	r0, #0
 80022f2:	db25      	blt.n	8002340 <uart_stm32_configure+0x1dc>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022fa:	60fb      	str	r3, [r7, #12]
		LL_USART_SetBaudRate(UartInstance,
 80022fc:	9a01      	ldr	r2, [sp, #4]
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80022fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002302:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002306:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800230a:	fbb2 f2f8 	udiv	r2, r2, r8
 800230e:	481e      	ldr	r0, [pc, #120]	; (8002388 <uart_stm32_configure+0x224>)
 8002310:	fba0 1302 	umull	r1, r3, r0, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	0119      	lsls	r1, r3, #4
 8002318:	b289      	uxth	r1, r1
 800231a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800231e:	fb0c 2313 	mls	r3, ip, r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	3332      	adds	r3, #50	; 0x32
 8002326:	fba0 2303 	umull	r2, r3, r0, r3
 800232a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800232e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002332:	440a      	add	r2, r1
 8002334:	b292      	uxth	r2, r2
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4413      	add	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	60bb      	str	r3, [r7, #8]
		data->baud_rate = cfg->baudrate;
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	6033      	str	r3, [r6, #0]
 8002344:	e7a2      	b.n	800228c <uart_stm32_configure+0x128>
 8002346:	f06f 0012 	mvn.w	r0, #18
 800234a:	e7d1      	b.n	80022f0 <uart_stm32_configure+0x18c>
		return -ENOSYS;
 800234c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8002350:	e7ce      	b.n	80022f0 <uart_stm32_configure+0x18c>
		return -ENOTSUP;
 8002352:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002356:	e79e      	b.n	8002296 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 8002358:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800235c:	e79b      	b.n	8002296 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 800235e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002362:	e798      	b.n	8002296 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 8002364:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002368:	e795      	b.n	8002296 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 800236a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800236e:	e792      	b.n	8002296 <uart_stm32_configure+0x132>
 8002370:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002374:	e78f      	b.n	8002296 <uart_stm32_configure+0x132>
			return -ENOTSUP;
 8002376:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800237a:	e78c      	b.n	8002296 <uart_stm32_configure+0x132>
 800237c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002380:	e789      	b.n	8002296 <uart_stm32_configure+0x132>
 8002382:	bf00      	nop
 8002384:	40013800 	.word	0x40013800
 8002388:	51eb851f 	.word	0x51eb851f

0800238c <uart_stm32_async_init>:

	return 0;
}

static int uart_stm32_async_init(const struct device *dev)
{
 800238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002390:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 8002392:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002394:	6843      	ldr	r3, [r0, #4]
 8002396:	681e      	ldr	r6, [r3, #0]

	data->uart_dev = dev;
 8002398:	60a0      	str	r0, [r4, #8]

	if (data->dma_rx.dma_dev != NULL) {
 800239a:	69a0      	ldr	r0, [r4, #24]
 800239c:	b140      	cbz	r0, 80023b0 <uart_stm32_async_init+0x24>
 800239e:	f003 f846 	bl	800542e <z_device_ready>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	f000 8088 	beq.w	80024b8 <uart_stm32_async_init+0x12c>
 80023a8:	2300      	movs	r3, #0
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80aa 	bne.w	8002504 <uart_stm32_async_init+0x178>
			return -ENODEV;
		}
	}

	if (data->dma_tx.dma_dev != NULL) {
 80023b0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80023b4:	b143      	cbz	r3, 80023c8 <uart_stm32_async_init+0x3c>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 80023b6:	69a0      	ldr	r0, [r4, #24]
 80023b8:	f003 f839 	bl	800542e <z_device_ready>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d07e      	beq.n	80024be <uart_stm32_async_init+0x132>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80a1 	bne.w	800250a <uart_stm32_async_init+0x17e>
	struct uart_stm32_data *data = DEV_DATA(dev);
 80023c8:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 80023ca:	2700      	movs	r7, #0
 80023cc:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80023d0:	686b      	ldr	r3, [r5, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 80023d4:	6953      	ldr	r3, [r2, #20]
 80023d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023da:	6153      	str	r3, [r2, #20]

	/* Disable both TX and RX DMA requests */
	uart_stm32_dma_rx_disable(dev);
	uart_stm32_dma_tx_disable(dev);

	k_work_init_delayable(&data->dma_rx.timeout_work,
 80023dc:	494c      	ldr	r1, [pc, #304]	; (8002510 <uart_stm32_async_init+0x184>)
 80023de:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80023e2:	f003 f928 	bl	8005636 <k_work_init_delayable>
			    uart_stm32_async_rx_timeout);
	k_work_init_delayable(&data->dma_tx.timeout_work,
 80023e6:	494b      	ldr	r1, [pc, #300]	; (8002514 <uart_stm32_async_init+0x188>)
 80023e8:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80023ec:	f003 f923 	bl	8005636 <k_work_init_delayable>
			    uart_stm32_async_tx_timeout);

	/* Configure dma rx config */
	memset(&data->dma_rx.blk_cfg, 0, sizeof(data->dma_rx.blk_cfg));
 80023f0:	f104 0844 	add.w	r8, r4, #68	; 0x44
 80023f4:	2220      	movs	r2, #32
 80023f6:	4639      	mov	r1, r7
 80023f8:	4640      	mov	r0, r8
 80023fa:	f001 feeb 	bl	80041d4 <memset>
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 80023fe:	3604      	adds	r6, #4

#if defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_rx.blk_cfg.source_address =
 8002400:	6466      	str	r6, [r4, #68]	; 0x44
	data->dma_rx.blk_cfg.source_address =
				LL_USART_DMA_GetRegAddr(UartInstance,
						LL_USART_DMA_REG_DATA_RECEIVE);
#endif

	data->dma_rx.blk_cfg.dest_address = 0; /* dest not ready */
 8002402:	64a7      	str	r7, [r4, #72]	; 0x48

	if (data->dma_rx.src_addr_increment) {
 8002404:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05b      	beq.n	80024c4 <uart_stm32_async_init+0x138>
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 800240c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002410:	f36f 0383 	bfc	r3, #2, #2
 8002414:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_rx.dst_addr_increment) {
 8002418:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800241c:	2b00      	cmp	r3, #0
 800241e:	d059      	beq.n	80024d4 <uart_stm32_async_init+0x148>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8002420:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002424:	f36f 1305 	bfc	r3, #4, #2
 8002428:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	/* RX disable circular buffer */
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 800242c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002430:	f36f 1386 	bfc	r3, #6, #1
 8002434:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.dest_reload_en = 0;
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f36f 13c7 	bfc	r3, #7, #1
 800243e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.fifo_mode_control = data->dma_rx.fifo_threshold;
 8002442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002444:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8002448:	f362 0303 	bfi	r3, r2, #0, #4
 800244c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

	data->dma_rx.dma_cfg.head_block = &data->dma_rx.blk_cfg;
 8002450:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	data->dma_rx.dma_cfg.user_data = (void *)dev;
 8002454:	6365      	str	r5, [r4, #52]	; 0x34
	data->rx_next_buffer = NULL;
 8002456:	2700      	movs	r7, #0
 8002458:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800245c:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c

	/* Configure dma tx config */
	memset(&data->dma_tx.blk_cfg, 0, sizeof(data->dma_tx.blk_cfg));
 8002460:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
 8002464:	2220      	movs	r2, #32
 8002466:	4639      	mov	r1, r7
 8002468:	4640      	mov	r0, r8
 800246a:	f001 feb3 	bl	80041d4 <memset>

#if defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_tx.blk_cfg.dest_address =
 800246e:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
	data->dma_tx.blk_cfg.dest_address =
			LL_USART_DMA_GetRegAddr(UartInstance,
					LL_USART_DMA_REG_DATA_TRANSMIT);
#endif

	data->dma_tx.blk_cfg.source_address = 0; /* not ready */
 8002472:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc

	if (data->dma_tx.src_addr_increment) {
 8002476:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 800247a:	b39b      	cbz	r3, 80024e4 <uart_stm32_async_init+0x158>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 800247c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8002480:	f36f 0383 	bfc	r3, #2, #2
 8002484:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_tx.dst_addr_increment) {
 8002488:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 800248c:	b393      	cbz	r3, 80024f4 <uart_stm32_async_init+0x168>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 800248e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8002492:	f36f 1305 	bfc	r3, #4, #2
 8002496:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 800249a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800249e:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 80024a2:	f362 0303 	bfi	r3, r2, #0, #4
 80024a6:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9

	data->dma_tx.dma_cfg.head_block = &data->dma_tx.blk_cfg;
 80024aa:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
	data->dma_tx.dma_cfg.user_data = (void *)dev;
 80024ae:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc

	return 0;
 80024b2:	2000      	movs	r0, #0
}
 80024b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b8:	f06f 0312 	mvn.w	r3, #18
 80024bc:	e775      	b.n	80023aa <uart_stm32_async_init+0x1e>
 80024be:	f06f 0312 	mvn.w	r3, #18
 80024c2:	e77e      	b.n	80023c2 <uart_stm32_async_init+0x36>
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80024c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80024c8:	2202      	movs	r2, #2
 80024ca:	f362 0383 	bfi	r3, r2, #2, #2
 80024ce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80024d2:	e7a1      	b.n	8002418 <uart_stm32_async_init+0x8c>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80024d4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80024d8:	2202      	movs	r2, #2
 80024da:	f362 1305 	bfi	r3, r2, #4, #2
 80024de:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80024e2:	e7a3      	b.n	800242c <uart_stm32_async_init+0xa0>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80024e4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 80024e8:	2202      	movs	r2, #2
 80024ea:	f362 0383 	bfi	r3, r2, #2, #2
 80024ee:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80024f2:	e7c9      	b.n	8002488 <uart_stm32_async_init+0xfc>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80024f4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 80024f8:	2202      	movs	r2, #2
 80024fa:	f362 1305 	bfi	r3, r2, #4, #2
 80024fe:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8002502:	e7ca      	b.n	800249a <uart_stm32_async_init+0x10e>
			return -ENODEV;
 8002504:	f06f 0012 	mvn.w	r0, #18
 8002508:	e7d4      	b.n	80024b4 <uart_stm32_async_init+0x128>
			return -ENODEV;
 800250a:	f06f 0012 	mvn.w	r0, #18
 800250e:	e7d1      	b.n	80024b4 <uart_stm32_async_init+0x128>
 8002510:	08005355 	.word	0x08005355
 8002514:	08005063 	.word	0x08005063

08002518 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8002518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	4604      	mov	r4, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8002520:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8002522:	6907      	ldr	r7, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002524:	46b0      	mov	r8, r6
 8002526:	f858 5b0c 	ldr.w	r5, [r8], #12
	data->clock = clk;
 800252a:	484c      	ldr	r0, [pc, #304]	; (800265c <uart_stm32_init+0x144>)
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	f002 ff7e 	bl	800542e <z_device_ready>
 8002532:	2800      	cmp	r0, #0
 8002534:	d07c      	beq.n	8002630 <uart_stm32_init+0x118>
	const struct clock_control_driver_api *api =
 8002536:	4849      	ldr	r0, [pc, #292]	; (800265c <uart_stm32_init+0x144>)
 8002538:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4641      	mov	r1, r8
 800253e:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8002540:	2800      	cmp	r0, #0
 8002542:	f040 8088 	bne.w	8002656 <uart_stm32_init+0x13e>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8002546:	6863      	ldr	r3, [r4, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	6a31      	ldr	r1, [r6, #32]
 800254c:	69f0      	ldr	r0, [r6, #28]
 800254e:	f001 fd03 	bl	8003f58 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8002552:	2800      	cmp	r0, #0
 8002554:	db69      	blt.n	800262a <uart_stm32_init+0x112>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002556:	68eb      	ldr	r3, [r5, #12]
 8002558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800255c:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800255e:	68eb      	ldr	r3, [r5, #12]
 8002560:	f043 030c 	orr.w	r3, r3, #12
 8002564:	60eb      	str	r3, [r5, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8002566:	69b3      	ldr	r3, [r6, #24]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d069      	beq.n	8002640 <uart_stm32_init+0x128>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800256c:	2b01      	cmp	r3, #1
 800256e:	d062      	beq.n	8002636 <uart_stm32_init+0x11e>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002570:	2200      	movs	r2, #0
		ll_parity = LL_USART_PARITY_NONE;
 8002572:	4611      	mov	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002574:	68eb      	ldr	r3, [r5, #12]
 8002576:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800257a:	430a      	orrs	r2, r1
 800257c:	4313      	orrs	r3, r2
 800257e:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002580:	692b      	ldr	r3, [r5, #16]
 8002582:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002586:	612b      	str	r3, [r5, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8002588:	7d33      	ldrb	r3, [r6, #20]
 800258a:	b12b      	cbz	r3, 8002598 <uart_stm32_init+0x80>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800258c:	6863      	ldr	r3, [r4, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002590:	6953      	ldr	r3, [r2, #20]
 8002592:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002596:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8002598:	f8d7 8000 	ldr.w	r8, [r7]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800259c:	6923      	ldr	r3, [r4, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800259e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80025a2:	f859 7b0c 	ldr.w	r7, [r9], #12
	if (clock_control_get_rate(data->clock,
 80025a6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80025aa:	4650      	mov	r0, sl
 80025ac:	f002 ff3f 	bl	800542e <z_device_ready>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d04a      	beq.n	800264a <uart_stm32_init+0x132>
	const struct clock_control_driver_api *api =
 80025b4:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d048      	beq.n	8002650 <uart_stm32_init+0x138>
	return api->get_rate(dev, sys, rate);
 80025be:	aa01      	add	r2, sp, #4
 80025c0:	4649      	mov	r1, r9
 80025c2:	4650      	mov	r0, sl
 80025c4:	4798      	blx	r3
 80025c6:	2800      	cmp	r0, #0
 80025c8:	db25      	blt.n	8002616 <uart_stm32_init+0xfe>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025d0:	60fb      	str	r3, [r7, #12]
		LL_USART_SetBaudRate(UartInstance,
 80025d2:	9a01      	ldr	r2, [sp, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80025d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80025e0:	fbb2 f2f8 	udiv	r2, r2, r8
 80025e4:	481e      	ldr	r0, [pc, #120]	; (8002660 <uart_stm32_init+0x148>)
 80025e6:	fba0 1302 	umull	r1, r3, r0, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	0119      	lsls	r1, r3, #4
 80025ee:	b289      	uxth	r1, r1
 80025f0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80025f4:	fb0c 2313 	mls	r3, ip, r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	; 0x32
 80025fc:	fba0 2303 	umull	r2, r3, r0, r3
 8002600:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8002604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002608:	440a      	add	r2, r1
 800260a:	b292      	uxth	r2, r2
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	4413      	add	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	60bb      	str	r3, [r7, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002616:	68eb      	ldr	r3, [r5, #12]
 8002618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800261c:	60eb      	str	r3, [r5, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API)
	config->uconf.irq_config_func(dev);
 800261e:	68b3      	ldr	r3, [r6, #8]
 8002620:	4620      	mov	r0, r4
 8002622:	4798      	blx	r3
#elif defined(CONFIG_PM)
	config->irq_config_func(dev);
#endif /* defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API) */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff feb1 	bl	800238c <uart_stm32_async_init>
#else
	return 0;
#endif
}
 800262a:	b002      	add	sp, #8
 800262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002630:	f06f 0012 	mvn.w	r0, #18
 8002634:	e784      	b.n	8002540 <uart_stm32_init+0x28>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800263a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800263e:	e799      	b.n	8002574 <uart_stm32_init+0x5c>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8002644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002648:	e794      	b.n	8002574 <uart_stm32_init+0x5c>
 800264a:	f06f 0012 	mvn.w	r0, #18
 800264e:	e7ba      	b.n	80025c6 <uart_stm32_init+0xae>
		return -ENOSYS;
 8002650:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8002654:	e7b7      	b.n	80025c6 <uart_stm32_init+0xae>
		return -EIO;
 8002656:	f06f 0004 	mvn.w	r0, #4
 800265a:	e7e6      	b.n	800262a <uart_stm32_init+0x112>
 800265c:	08005a84 	.word	0x08005a84
 8002660:	51eb851f 	.word	0x51eb851f

08002664 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8002664:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002668:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800266a:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800266c:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800266e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002672:	d101      	bne.n	8002678 <elapsed+0x14>
	    || (val1 < val2)) {
 8002674:	4281      	cmp	r1, r0
 8002676:	d208      	bcs.n	800268a <elapsed+0x26>
		overflow_cyc += last_load;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <elapsed+0x34>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <elapsed+0x38>)
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	440a      	add	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8002684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002688:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <elapsed+0x38>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1a1b      	subs	r3, r3, r0
 8002690:	4a01      	ldr	r2, [pc, #4]	; (8002698 <elapsed+0x34>)
 8002692:	6810      	ldr	r0, [r2, #0]
}
 8002694:	4418      	add	r0, r3
 8002696:	4770      	bx	lr
 8002698:	20000b30 	.word	0x20000b30
 800269c:	20000b2c 	.word	0x20000b2c

080026a0 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 80026a0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80026a2:	f7ff ffdf 	bl	8002664 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <sys_clock_isr+0x38>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <sys_clock_isr+0x3c>)
 80026ac:	6811      	ldr	r1, [r2, #0]
 80026ae:	4408      	add	r0, r1
 80026b0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <sys_clock_isr+0x40>)
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	1ac0      	subs	r0, r0, r3
 80026bc:	4909      	ldr	r1, [pc, #36]	; (80026e4 <sys_clock_isr+0x44>)
 80026be:	fba1 1000 	umull	r1, r0, r1, r0
 80026c2:	0a80      	lsrs	r0, r0, #10
		announced_cycles += dticks * CYC_PER_TICK;
 80026c4:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80026c8:	fb01 3300 	mla	r3, r1, r0, r3
 80026cc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80026ce:	f001 f9e7 	bl	8003aa0 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 80026d2:	f7fe fd91 	bl	80011f8 <z_arm_exc_exit>
}
 80026d6:	bd08      	pop	{r3, pc}
 80026d8:	20000b30 	.word	0x20000b30
 80026dc:	20000b28 	.word	0x20000b28
 80026e0:	20000b24 	.word	0x20000b24
 80026e4:	51eb851f 	.word	0x51eb851f

080026e8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <sys_clock_driver_init+0x28>)
 80026ea:	2210      	movs	r2, #16
 80026ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80026f0:	f640 427f 	movw	r2, #3199	; 0xc7f
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <sys_clock_driver_init+0x2c>)
 80026f6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80026f8:	2000      	movs	r0, #0
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <sys_clock_driver_init+0x30>)
 80026fc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80026fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002702:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002704:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	f042 0207 	orr.w	r2, r2, #7
 800270c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	20000b2c 	.word	0x20000b2c
 8002718:	20000b30 	.word	0x20000b30

0800271c <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800271c:	b111      	cbz	r1, 8002724 <sys_clock_set_timeout+0x8>
 800271e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002722:	d00f      	beq.n	8002744 <sys_clock_set_timeout+0x28>
{
 8002724:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <sys_clock_set_timeout+0xe8>)
 8002728:	681d      	ldr	r5, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800272a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800272e:	d014      	beq.n	800275a <sys_clock_set_timeout+0x3e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002730:	1e46      	subs	r6, r0, #1
 8002732:	2e00      	cmp	r6, #0
 8002734:	dd14      	ble.n	8002760 <sys_clock_set_timeout+0x44>
 8002736:	f241 4378 	movw	r3, #5240	; 0x1478
 800273a:	429e      	cmp	r6, r3
 800273c:	dd11      	ble.n	8002762 <sys_clock_set_timeout+0x46>
 800273e:	f241 4679 	movw	r6, #5241	; 0x1479
 8002742:	e00e      	b.n	8002762 <sys_clock_set_timeout+0x46>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8002744:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002748:	6913      	ldr	r3, [r2, #16]
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <sys_clock_set_timeout+0xe8>)
 8002752:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002756:	601a      	str	r2, [r3, #0]
		return;
 8002758:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800275a:	f241 4079 	movw	r0, #5241	; 0x1479
 800275e:	e7e7      	b.n	8002730 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002760:	2600      	movs	r6, #0
	__asm__ volatile(
 8002762:	f04f 0310 	mov.w	r3, #16
 8002766:	f3ef 8411 	mrs	r4, BASEPRI
 800276a:	f383 8812 	msr	BASEPRI_MAX, r3
 800276e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 8002772:	f7ff ff77 	bl	8002664 <elapsed>

	val1 = SysTick->VAL;
 8002776:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800277a:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <sys_clock_set_timeout+0xec>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4410      	add	r0, r2
 8002782:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <sys_clock_set_timeout+0xf0>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <sys_clock_set_timeout+0xf4>)
 800278c:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 800278e:	1ac2      	subs	r2, r0, r3
 8002790:	d415      	bmi.n	80027be <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 8002792:	f44f 6c48 	mov.w	ip, #3200	; 0xc80

		/* Round delay up to next tick boundary */
		delay += unannounced;
 8002796:	fb0c 2206 	mla	r2, ip, r6, r2
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800279a:	f602 427f 	addw	r2, r2, #3199	; 0xc7f
 800279e:	4e1d      	ldr	r6, [pc, #116]	; (8002814 <sys_clock_set_timeout+0xf8>)
 80027a0:	fba6 6202 	umull	r6, r2, r6, r2
 80027a4:	0a92      	lsrs	r2, r2, #10
		delay -= unannounced;
 80027a6:	1a1b      	subs	r3, r3, r0
 80027a8:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d90a      	bls.n	80027c8 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <sys_clock_set_timeout+0xfc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d909      	bls.n	80027cc <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <sys_clock_set_timeout+0xe8>)
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e008      	b.n	80027d0 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <sys_clock_set_timeout+0xe8>)
 80027c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e003      	b.n	80027d0 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 80027c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <sys_clock_set_timeout+0xe8>)
 80027ce:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 80027d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027d4:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <sys_clock_set_timeout+0xe8>)
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	3a01      	subs	r2, #1
 80027dc:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 80027e2:	42b1      	cmp	r1, r6
 80027e4:	d209      	bcs.n	80027fa <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 80027e6:	1bad      	subs	r5, r5, r6
 80027e8:	440d      	add	r5, r1
 80027ea:	4428      	add	r0, r5
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <sys_clock_set_timeout+0xec>)
 80027ee:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 80027f0:	f384 8811 	msr	BASEPRI, r4
 80027f4:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 80027fa:	1b8d      	subs	r5, r1, r6
 80027fc:	4428      	add	r0, r5
 80027fe:	4b02      	ldr	r3, [pc, #8]	; (8002808 <sys_clock_set_timeout+0xec>)
 8002800:	6018      	str	r0, [r3, #0]
 8002802:	e7f5      	b.n	80027f0 <sys_clock_set_timeout+0xd4>
 8002804:	20000b2c 	.word	0x20000b2c
 8002808:	20000b28 	.word	0x20000b28
 800280c:	20000b30 	.word	0x20000b30
 8002810:	20000b24 	.word	0x20000b24
 8002814:	51eb851f 	.word	0x51eb851f
 8002818:	00ffe880 	.word	0x00ffe880

0800281c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 800281c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800281e:	f04f 0310 	mov.w	r3, #16
 8002822:	f3ef 8411 	mrs	r4, BASEPRI
 8002826:	f383 8812 	msr	BASEPRI_MAX, r3
 800282a:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800282e:	f7ff ff19 	bl	8002664 <elapsed>
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <sys_clock_elapsed+0x34>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4418      	add	r0, r3
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <sys_clock_elapsed+0x38>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 800283e:	f384 8811 	msr	BASEPRI, r4
 8002842:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <sys_clock_elapsed+0x3c>)
 8002848:	fba3 3000 	umull	r3, r0, r3, r0
}
 800284c:	0a80      	lsrs	r0, r0, #10
 800284e:	bd10      	pop	{r4, pc}
 8002850:	20000b28 	.word	0x20000b28
 8002854:	20000b24 	.word	0x20000b24
 8002858:	51eb851f 	.word	0x51eb851f

0800285c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800285c:	b510      	push	{r4, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800285e:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 8002860:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8002862:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8002864:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 8002866:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8002868:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800286a:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800286c:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800286e:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8002870:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8002872:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 8002874:	6a54      	ldr	r4, [r2, #36]	; 0x24
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8002876:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002878:	3901      	subs	r1, #1
 800287a:	4c0f      	ldr	r4, [pc, #60]	; (80028b8 <LL_DMA_Init+0x5c>)
 800287c:	f814 e001 	ldrb.w	lr, [r4, r1]
 8002880:	eb0e 0c00 	add.w	ip, lr, r0
 8002884:	f85e 1000 	ldr.w	r1, [lr, r0]
 8002888:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800288c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002890:	430b      	orrs	r3, r1
 8002892:	f84e 3000 	str.w	r3, [lr, r0]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8002896:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002898:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800289c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800289e:	f8cc 3008 	str.w	r3, [ip, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 80028a2:	6a12      	ldr	r2, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80028a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8cc 3004 	str.w	r3, [ip, #4]


  return SUCCESS;
}
 80028b2:	2000      	movs	r0, #0
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	08006254 	.word	0x08006254

080028bc <UTILS_GetPLLOutputFrequency>:
  /* Check different PLL parameters according to RM                          */
  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     96 MHz as PLLVCO when the product is in range 1,
     48 MHz as PLLVCO when the product is in range 2,
     24 MHz when the product is in range 3. */
  pllfreq = PLL_InputFrequency * (PLLMulTable[UTILS_PLLInitStruct->PLLMul >> RCC_CFGR_PLLMUL_Pos]);
 80028bc:	680a      	ldr	r2, [r1, #0]
 80028be:	0c92      	lsrs	r2, r2, #18
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <UTILS_GetPLLOutputFrequency+0x18>)
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	fb03 f000 	mul.w	r0, r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     maximum frequency 32000000 in range 1 */
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLDiv >> RCC_CFGR_PLLDIV_Pos)+1U);
 80028c8:	684b      	ldr	r3, [r1, #4]
 80028ca:	0d9b      	lsrs	r3, r3, #22
 80028cc:	3301      	adds	r3, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 80028ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80028d2:	4770      	bx	lr
 80028d4:	08006248 	.word	0x08006248

080028d8 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <UTILS_PLL_IsBusy+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028e0:	d001      	beq.n	80028e6 <UTILS_PLL_IsBusy+0xe>

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 80028e2:	2001      	movs	r0, #1
 80028e4:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 80028e6:	2000      	movs	r0, #0
  }

  return status;
}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 80028f0:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <LL_SetSystemCoreClock+0x8>)
 80028f2:	6018      	str	r0, [r3, #0]
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	200002d8 	.word	0x200002d8

080028fc <LL_SetFlashLatency>:
  if ((Frequency == 0U) || (Frequency > UTILS_MAX_FREQUENCY_SCALE1))
 80028fc:	1e42      	subs	r2, r0, #1
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <LL_SetFlashLatency+0x70>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d231      	bcs.n	8002968 <LL_SetFlashLatency+0x6c>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8002904:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <LL_SetFlashLatency+0x74>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800290c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002910:	d01c      	beq.n	800294c <LL_SetFlashLatency+0x50>
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <LL_SetFlashLatency+0x74>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    else if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d01a      	beq.n	8002956 <LL_SetFlashLatency+0x5a>
      if (Frequency > UTILS_SCALE3_LATENCY1_FREQ)
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <LL_SetFlashLatency+0x78>)
 8002922:	4298      	cmp	r0, r3
 8002924:	d91c      	bls.n	8002960 <LL_SetFlashLatency+0x64>
  * @rmtoll FLASH_ACR    ACC64         LL_FLASH_Enable64bitAccess
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_Enable64bitAccess(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ACC64);
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <LL_SetFlashLatency+0x7c>)
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	2101      	movs	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002932:	4a11      	ldr	r2, [pc, #68]	; (8002978 <LL_SetFlashLatency+0x7c>)
 8002934:	6813      	ldr	r3, [r2, #0]
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	430b      	orrs	r3, r1
 800293c:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
    if (LL_FLASH_GetLatency() != latency)
 8002944:	4299      	cmp	r1, r3
 8002946:	d00d      	beq.n	8002964 <LL_SetFlashLatency+0x68>
      status = ERROR;
 8002948:	2001      	movs	r0, #1
}
 800294a:	4770      	bx	lr
      if (Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <LL_SetFlashLatency+0x80>)
 800294e:	4298      	cmp	r0, r3
 8002950:	d8e9      	bhi.n	8002926 <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8002952:	2100      	movs	r1, #0
 8002954:	e7ed      	b.n	8002932 <LL_SetFlashLatency+0x36>
      if (Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <LL_SetFlashLatency+0x84>)
 8002958:	4298      	cmp	r0, r3
 800295a:	d8e4      	bhi.n	8002926 <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800295c:	2100      	movs	r1, #0
 800295e:	e7e8      	b.n	8002932 <LL_SetFlashLatency+0x36>
 8002960:	2100      	movs	r1, #0
 8002962:	e7e6      	b.n	8002932 <LL_SetFlashLatency+0x36>
  ErrorStatus status = SUCCESS;
 8002964:	2000      	movs	r0, #0
 8002966:	4770      	bx	lr
    status = ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	4770      	bx	lr
 800296c:	01e84800 	.word	0x01e84800
 8002970:	40007000 	.word	0x40007000
 8002974:	001e8480 	.word	0x001e8480
 8002978:	40023c00 	.word	0x40023c00
 800297c:	00f42400 	.word	0x00f42400
 8002980:	007a1200 	.word	0x007a1200

08002984 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002988:	680b      	ldr	r3, [r1, #0]
 800298a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (SystemCoreClock < hclk_frequency)
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	42ab      	cmp	r3, r5
 800299c:	d32f      	bcc.n	80029fe <UTILS_EnablePLLAndSwitchSystem+0x7a>
  ErrorStatus status = SUCCESS;
 800299e:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80029a0:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029b2:	d0fa      	beq.n	80029aa <UTILS_EnablePLLAndSwitchSystem+0x26>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 80029b4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	f042 0203 	orr.w	r2, r2, #3
 80029c8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d1f9      	bne.n	80029ca <UTILS_EnablePLLAndSwitchSystem+0x46>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 80029d6:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 80029e4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (SystemCoreClock > hclk_frequency)
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	42ab      	cmp	r3, r5
 80029f6:	d809      	bhi.n	8002a0c <UTILS_EnablePLLAndSwitchSystem+0x88>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 80029f8:	b16e      	cbz	r6, 8002a16 <UTILS_EnablePLLAndSwitchSystem+0x92>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80029fa:	4630      	mov	r0, r6
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 80029fe:	4628      	mov	r0, r5
 8002a00:	f7ff ff7c 	bl	80028fc <LL_SetFlashLatency>
  if (status == SUCCESS)
 8002a04:	4606      	mov	r6, r0
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d1f2      	bne.n	80029f0 <UTILS_EnablePLLAndSwitchSystem+0x6c>
 8002a0a:	e7c9      	b.n	80029a0 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f7ff ff75 	bl	80028fc <LL_SetFlashLatency>
 8002a12:	4606      	mov	r6, r0
 8002a14:	e7f0      	b.n	80029f8 <UTILS_EnablePLLAndSwitchSystem+0x74>
    LL_SetSystemCoreClock(hclk_frequency);
 8002a16:	4628      	mov	r0, r5
 8002a18:	f7ff ff6a 	bl	80028f0 <LL_SetSystemCoreClock>
 8002a1c:	e7ed      	b.n	80029fa <UTILS_EnablePLLAndSwitchSystem+0x76>
 8002a1e:	bf00      	nop
 8002a20:	08006238 	.word	0x08006238
 8002a24:	200002d8 	.word	0x200002d8
 8002a28:	40023800 	.word	0x40023800

08002a2c <LL_PLL_ConfigSystemClock_HSI>:
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8002a32:	f7ff ff51 	bl	80028d8 <UTILS_PLL_IsBusy>
 8002a36:	b9f8      	cbnz	r0, 8002a78 <LL_PLL_ConfigSystemClock_HSI+0x4c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4810      	ldr	r0, [pc, #64]	; (8002a7c <LL_PLL_ConfigSystemClock_HSI+0x50>)
 8002a3c:	f7ff ff3e 	bl	80028bc <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f013 0f02 	tst.w	r3, #2
 8002a48:	d109      	bne.n	8002a5e <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8002a4c:	6813      	ldr	r3, [r2, #0]
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f013 0f02 	tst.w	r3, #2
 8002a5c:	d0fa      	beq.n	8002a54 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6864      	ldr	r4, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8002a62:	4907      	ldr	r1, [pc, #28]	; (8002a80 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8002a64:	688b      	ldr	r3, [r1, #8]
 8002a66:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002a6a:	4322      	orrs	r2, r4
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7ff ff87 	bl	8002984 <UTILS_EnablePLLAndSwitchSystem>
}
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
    status = ERROR;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e7fc      	b.n	8002a76 <LL_PLL_ConfigSystemClock_HSI+0x4a>
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	40023800 	.word	0x40023800

08002a84 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8002a86:	e000      	b.n	8002a8a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8002a88:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8002a8a:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <z_device_state_init+0x14>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d3fb      	bcc.n	8002a88 <z_device_state_init+0x4>
	}
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08005a84 	.word	0x08005a84
 8002a98:	08005bbc 	.word	0x08005bbc

08002a9c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <z_sys_init_run_level+0x4c>)
 8002aa2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002aa6:	e009      	b.n	8002abc <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8002aa8:	4240      	negs	r0, r0
 8002aaa:	e017      	b.n	8002adc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8002aac:	68eb      	ldr	r3, [r5, #12]
 8002aae:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8002ab0:	68ea      	ldr	r2, [r5, #12]
 8002ab2:	7853      	ldrb	r3, [r2, #1]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002aba:	3408      	adds	r4, #8
 8002abc:	1c73      	adds	r3, r6, #1
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <z_sys_init_run_level+0x4c>)
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	d90d      	bls.n	8002ae4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8002ac8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	4628      	mov	r0, r5
 8002ace:	4798      	blx	r3
		if (dev != NULL) {
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d0f2      	beq.n	8002aba <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d0eb      	beq.n	8002ab0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	dbe5      	blt.n	8002aa8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8002adc:	28ff      	cmp	r0, #255	; 0xff
 8002ade:	dde5      	ble.n	8002aac <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8002ae0:	20ff      	movs	r0, #255	; 0xff
 8002ae2:	e7e3      	b.n	8002aac <z_sys_init_run_level+0x10>
		}
	}
}
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800625c 	.word	0x0800625c

08002aec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8002aec:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8002aee:	4605      	mov	r5, r0
 8002af0:	b328      	cbz	r0, 8002b3e <z_impl_device_get_binding+0x52>
 8002af2:	7803      	ldrb	r3, [r0, #0]
 8002af4:	b32b      	cbz	r3, 8002b42 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8002af6:	4c14      	ldr	r4, [pc, #80]	; (8002b48 <z_impl_device_get_binding+0x5c>)
 8002af8:	e000      	b.n	8002afc <z_impl_device_get_binding+0x10>
 8002afa:	3418      	adds	r4, #24
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <z_impl_device_get_binding+0x60>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	d008      	beq.n	8002b14 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8002b02:	4620      	mov	r0, r4
 8002b04:	f002 fc93 	bl	800542e <z_device_ready>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d0f6      	beq.n	8002afa <z_impl_device_get_binding+0xe>
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	42ab      	cmp	r3, r5
 8002b10:	d1f3      	bne.n	8002afa <z_impl_device_get_binding+0xe>
 8002b12:	e012      	b.n	8002b3a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8002b14:	4c0c      	ldr	r4, [pc, #48]	; (8002b48 <z_impl_device_get_binding+0x5c>)
 8002b16:	e000      	b.n	8002b1a <z_impl_device_get_binding+0x2e>
 8002b18:	3418      	adds	r4, #24
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <z_impl_device_get_binding+0x60>)
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	d00b      	beq.n	8002b38 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8002b20:	4620      	mov	r0, r4
 8002b22:	f002 fc84 	bl	800542e <z_device_ready>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d0f6      	beq.n	8002b18 <z_impl_device_get_binding+0x2c>
 8002b2a:	6821      	ldr	r1, [r4, #0]
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f001 fb04 	bl	800413a <strcmp>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d1f0      	bne.n	8002b18 <z_impl_device_get_binding+0x2c>
 8002b36:	e000      	b.n	8002b3a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8002b38:	2400      	movs	r4, #0
}
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8002b3e:	4604      	mov	r4, r0
 8002b40:	e7fb      	b.n	8002b3a <z_impl_device_get_binding+0x4e>
 8002b42:	2400      	movs	r4, #0
 8002b44:	e7f9      	b.n	8002b3a <z_impl_device_get_binding+0x4e>
 8002b46:	bf00      	nop
 8002b48:	08005a84 	.word	0x08005a84
 8002b4c:	08005bbc 	.word	0x08005bbc

08002b50 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8002b50:	b510      	push	{r4, lr}
 8002b52:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8002b54:	4c10      	ldr	r4, [pc, #64]	; (8002b98 <init_idle_thread+0x48>)
 8002b56:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
 8002b5a:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002b5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <init_idle_thread+0x4c>)
 8002b64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9305      	str	r3, [sp, #20]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	9204      	str	r2, [sp, #16]
 8002b70:	220f      	movs	r2, #15
 8002b72:	9203      	str	r2, [sp, #12]
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	9000      	str	r0, [sp, #0]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <init_idle_thread+0x50>)
 8002b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b80:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <init_idle_thread+0x54>)
 8002b82:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 f8d8 	bl	8002d3c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002b8c:	7b63      	ldrb	r3, [r4, #13]
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8002b94:	b006      	add	sp, #24
 8002b96:	bd10      	pop	{r4, pc}
 8002b98:	20000318 	.word	0x20000318
 8002b9c:	20000b34 	.word	0x20000b34
 8002ba0:	08005527 	.word	0x08005527
 8002ba4:	20000fa0 	.word	0x20000fa0

08002ba8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8002bac:	f000 fd90 	bl	80036d0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8002bb0:	4d1b      	ldr	r5, [pc, #108]	; (8002c20 <prepare_multithreading+0x78>)
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <prepare_multithreading+0x7c>)
 8002bb4:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <prepare_multithreading+0x80>)
 8002bb8:	9305      	str	r3, [sp, #20]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9304      	str	r3, [sp, #16]
 8002bbe:	2400      	movs	r4, #0
 8002bc0:	9403      	str	r4, [sp, #12]
 8002bc2:	9402      	str	r4, [sp, #8]
 8002bc4:	9401      	str	r4, [sp, #4]
 8002bc6:	9400      	str	r4, [sp, #0]
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <prepare_multithreading+0x84>)
 8002bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bce:	4918      	ldr	r1, [pc, #96]	; (8002c30 <prepare_multithreading+0x88>)
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f000 f8b3 	bl	8002d3c <z_setup_new_thread>
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	7b6b      	ldrb	r3, [r5, #13]
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8002be0:	4628      	mov	r0, r5
 8002be2:	f002 fd9c 	bl	800571e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8002be6:	2c00      	cmp	r4, #0
 8002be8:	dd02      	ble.n	8002bf0 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8002bea:	4630      	mov	r0, r6
 8002bec:	b006      	add	sp, #24
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff ffad 	bl	8002b50 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <prepare_multithreading+0x8c>)
 8002bf8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8002bfc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <prepare_multithreading+0x7c>)
 8002c02:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c06:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8002c08:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8002c0a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <prepare_multithreading+0x90>)
 8002c10:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8002c14:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8002c18:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8002c1a:	3401      	adds	r4, #1
 8002c1c:	e7e3      	b.n	8002be6 <prepare_multithreading+0x3e>
 8002c1e:	bf00      	nop
 8002c20:	20000398 	.word	0x20000398
 8002c24:	20000b34 	.word	0x20000b34
 8002c28:	08006274 	.word	0x08006274
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	20000b80 	.word	0x20000b80
 8002c34:	20000318 	.word	0x20000318
 8002c38:	200010c0 	.word	0x200010c0

08002c3c <bg_thread_main>:
{
 8002c3c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <bg_thread_main+0x30>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8002c44:	2002      	movs	r0, #2
 8002c46:	f7ff ff29 	bl	8002a9c <z_sys_init_run_level>
	boot_banner();
 8002c4a:	f000 ffab 	bl	8003ba4 <boot_banner>
	z_cpp_init_static();
 8002c4e:	f001 f885 	bl	8003d5c <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8002c52:	2003      	movs	r0, #3
 8002c54:	f7ff ff22 	bl	8002a9c <z_sys_init_run_level>
	z_init_static_threads();
 8002c58:	f000 f8a0 	bl	8002d9c <z_init_static_threads>
	main();
 8002c5c:	f7fd fc50 	bl	8000500 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <bg_thread_main+0x34>)
 8002c62:	7b13      	ldrb	r3, [r2, #12]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002c6a:	bd08      	pop	{r3, pc}
 8002c6c:	20000b7d 	.word	0x20000b7d
 8002c70:	20000398 	.word	0x20000398

08002c74 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8002c74:	b508      	push	{r3, lr}
 8002c76:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002c78:	4a01      	ldr	r2, [pc, #4]	; (8002c80 <switch_to_main_thread+0xc>)
 8002c7a:	4802      	ldr	r0, [pc, #8]	; (8002c84 <switch_to_main_thread+0x10>)
 8002c7c:	f7fe fa92 	bl	80011a4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002c80:	08002c3d 	.word	0x08002c3d
 8002c84:	20000398 	.word	0x20000398

08002c88 <z_bss_zero>:
{
 8002c88:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8002c8a:	4803      	ldr	r0, [pc, #12]	; (8002c98 <z_bss_zero+0x10>)
 8002c8c:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <z_bss_zero+0x14>)
 8002c8e:	1a12      	subs	r2, r2, r0
 8002c90:	2100      	movs	r1, #0
 8002c92:	f001 fa9f 	bl	80041d4 <memset>
}
 8002c96:	bd08      	pop	{r3, pc}
 8002c98:	20000318 	.word	0x20000318
 8002c9c:	20000b80 	.word	0x20000b80

08002ca0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8002ca0:	b500      	push	{lr}
 8002ca2:	b0a1      	sub	sp, #132	; 0x84
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <z_cstart+0x74>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002ca6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002caa:	4c1b      	ldr	r4, [pc, #108]	; (8002d18 <z_cstart+0x78>)
 8002cac:	6963      	ldr	r3, [r4, #20]
 8002cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb2:	6163      	str	r3, [r4, #20]
 8002cb4:	23f0      	movs	r3, #240	; 0xf0
 8002cb6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002cba:	2500      	movs	r5, #0
 8002cbc:	77e5      	strb	r5, [r4, #31]
 8002cbe:	7625      	strb	r5, [r4, #24]
 8002cc0:	7665      	strb	r5, [r4, #25]
 8002cc2:	76a5      	strb	r5, [r4, #26]
 8002cc4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002cce:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002cd0:	f7fe fba2 	bl	8001418 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002cd4:	f7fe f978 	bl	8000fc8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cdc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002cde:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002ce0:	f7fe fc60 	bl	80015a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8002ce4:	f7fe fbf0 	bl	80014c8 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8002ce8:	2401      	movs	r4, #1
 8002cea:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002cee:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8002cf2:	9519      	str	r5, [sp, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
 8002cf4:	951a      	str	r5, [sp, #104]	; 0x68
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <z_cstart+0x7c>)
 8002cf8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002cfc:	f7ff fec2 	bl	8002a84 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8002d00:	4628      	mov	r0, r5
 8002d02:	f7ff fecb 	bl	8002a9c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fec8 	bl	8002a9c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8002d0c:	f7ff ff4c 	bl	8002ba8 <prepare_multithreading>
 8002d10:	f7ff ffb0 	bl	8002c74 <switch_to_main_thread>
 8002d14:	200018e0 	.word	0x200018e0
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	20000b34 	.word	0x20000b34

08002d20 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8002d20:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002d22:	ea53 0102 	orrs.w	r1, r3, r2
 8002d26:	d102      	bne.n	8002d2e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8002d28:	f002 fbcc 	bl	80054c4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8002d2c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002d2e:	4902      	ldr	r1, [pc, #8]	; (8002d38 <schedule_new_thread+0x18>)
 8002d30:	3018      	adds	r0, #24
 8002d32:	f000 fe27 	bl	8003984 <z_add_timeout>
 8002d36:	e7f9      	b.n	8002d2c <schedule_new_thread+0xc>
 8002d38:	08005757 	.word	0x08005757

08002d3c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	4604      	mov	r4, r0
 8002d42:	460e      	mov	r6, r1
 8002d44:	4615      	mov	r5, r2
 8002d46:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002d48:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8002d4c:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8002d4e:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8002d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d52:	2204      	movs	r2, #4
 8002d54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d56:	f002 fbb9 	bl	80054cc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	4631      	mov	r1, r6
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f002 fb98 	bl	8005494 <setup_thread_stack>
 8002d64:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	463b      	mov	r3, r7
 8002d74:	4602      	mov	r2, r0
 8002d76:	4631      	mov	r1, r6
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fe f9cd 	bl	8001118 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <z_setup_new_thread+0x5c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	b123      	cbz	r3, 8002d92 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	6723      	str	r3, [r4, #112]	; 0x70
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	b005      	add	sp, #20
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8002d92:	6723      	str	r3, [r4, #112]	; 0x70
		return stack_ptr;
 8002d94:	e7fa      	b.n	8002d8c <z_setup_new_thread+0x50>
 8002d96:	bf00      	nop
 8002d98:	20000b34 	.word	0x20000b34

08002d9c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8002da0:	4c1d      	ldr	r4, [pc, #116]	; (8002e18 <z_init_static_threads+0x7c>)
 8002da2:	e014      	b.n	8002dce <z_init_static_threads+0x32>
		z_setup_new_thread(
 8002da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002da6:	9305      	str	r3, [sp, #20]
 8002da8:	6a23      	ldr	r3, [r4, #32]
 8002daa:	9304      	str	r3, [sp, #16]
 8002dac:	69e3      	ldr	r3, [r4, #28]
 8002dae:	9303      	str	r3, [sp, #12]
 8002db0:	69a3      	ldr	r3, [r4, #24]
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	6963      	ldr	r3, [r4, #20]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	6923      	ldr	r3, [r4, #16]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	68e3      	ldr	r3, [r4, #12]
 8002dbe:	68a2      	ldr	r2, [r4, #8]
 8002dc0:	6861      	ldr	r1, [r4, #4]
 8002dc2:	6820      	ldr	r0, [r4, #0]
 8002dc4:	f7ff ffba 	bl	8002d3c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002dcc:	3430      	adds	r4, #48	; 0x30
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <z_init_static_threads+0x80>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d3e7      	bcc.n	8002da4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8002dd4:	f000 fa60 	bl	8003298 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002dd8:	4c0f      	ldr	r4, [pc, #60]	; (8002e18 <z_init_static_threads+0x7c>)
 8002dda:	e000      	b.n	8002dde <z_init_static_threads+0x42>
 8002ddc:	3430      	adds	r4, #48	; 0x30
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <z_init_static_threads+0x80>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d214      	bcs.n	8002e0e <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dea:	d0f7      	beq.n	8002ddc <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8002dec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002df0:	17d8      	asrs	r0, r3, #31
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002df2:	0082      	lsls	r2, r0, #2
 8002df4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002df8:	0099      	lsls	r1, r3, #2
 8002dfa:	18c9      	adds	r1, r1, r3
 8002dfc:	eb40 0002 	adc.w	r0, r0, r2
 8002e00:	184a      	adds	r2, r1, r1
 8002e02:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	f7ff ff8a 	bl	8002d20 <schedule_new_thread>
 8002e0c:	e7e6      	b.n	8002ddc <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8002e0e:	f000 fbed 	bl	80035ec <k_sched_unlock>
}
 8002e12:	b006      	add	sp, #24
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	bf00      	nop
 8002e18:	20000318 	.word	0x20000318
 8002e1c:	20000318 	.word	0x20000318

08002e20 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4604      	mov	r4, r0
	__asm__ volatile(
 8002e24:	f04f 0310 	mov.w	r3, #16
 8002e28:	f3ef 8511 	mrs	r5, BASEPRI
 8002e2c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002e30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8002e34:	f002 fd13 	bl	800585e <z_unpend_first_thread>

	if (thread != NULL) {
 8002e38:	b140      	cbz	r0, 8002e4c <z_impl_k_sem_give+0x2c>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8002e3e:	f002 fc6e 	bl	800571e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8002e42:	4629      	mov	r1, r5
 8002e44:	4806      	ldr	r0, [pc, #24]	; (8002e60 <z_impl_k_sem_give+0x40>)
 8002e46:	f000 fa0b 	bl	8003260 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8002e4c:	68a3      	ldr	r3, [r4, #8]
 8002e4e:	68e2      	ldr	r2, [r4, #12]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <z_impl_k_sem_give+0x3c>
 8002e54:	2201      	movs	r2, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	60a3      	str	r3, [r4, #8]
}
 8002e5a:	e7f2      	b.n	8002e42 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	e7fa      	b.n	8002e56 <z_impl_k_sem_give+0x36>
 8002e60:	20000b58 	.word	0x20000b58

08002e64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	f04f 0410 	mov.w	r4, #16
 8002e6c:	f3ef 8111 	mrs	r1, BASEPRI
 8002e70:	f384 8812 	msr	BASEPRI_MAX, r4
 8002e74:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8002e78:	6884      	ldr	r4, [r0, #8]
 8002e7a:	b144      	cbz	r4, 8002e8e <z_impl_k_sem_take+0x2a>
		sem->count--;
 8002e7c:	3c01      	subs	r4, #1
 8002e7e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8002e80:	f381 8811 	msr	BASEPRI, r1
 8002e84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8002e88:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8002e8e:	ea53 0402 	orrs.w	r4, r3, r2
 8002e92:	d006      	beq.n	8002ea2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <z_impl_k_sem_take+0x4c>)
 8002e9c:	f000 fb50 	bl	8003540 <z_pend_curr>
	return ret;
 8002ea0:	e7f3      	b.n	8002e8a <z_impl_k_sem_take+0x26>
 8002ea2:	f381 8811 	msr	BASEPRI, r1
 8002ea6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8002eaa:	f06f 000f 	mvn.w	r0, #15
 8002eae:	e7ec      	b.n	8002e8a <z_impl_k_sem_take+0x26>
 8002eb0:	20000b58 	.word	0x20000b58

08002eb4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8002eb8:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8002eba:	f013 0f02 	tst.w	r3, #2
 8002ebe:	d15c      	bne.n	8002f7a <submit_to_queue_locked+0xc6>
 8002ec0:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8002ec2:	f013 0f04 	tst.w	r3, #4
 8002ec6:	d15d      	bne.n	8002f84 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8002ec8:	680b      	ldr	r3, [r1, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d038      	beq.n	8002f40 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 8002ece:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8002ed0:	f013 0f01 	tst.w	r3, #1
 8002ed4:	d037      	beq.n	8002f46 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 8002ed6:	68a3      	ldr	r3, [r4, #8]
 8002ed8:	602b      	str	r3, [r5, #0]
			ret = 2;
 8002eda:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 8002edc:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	d03f      	beq.n	8002f62 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <submit_to_queue_locked+0xd4>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	42b3      	cmp	r3, r6
 8002ee8:	d02f      	beq.n	8002f4a <submit_to_queue_locked+0x96>
 8002eea:	2300      	movs	r3, #0
 8002eec:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 8002eee:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002ef2:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002ef6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8002efa:	f013 0f01 	tst.w	r3, #1
 8002efe:	d033      	beq.n	8002f68 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 8002f00:	b101      	cbz	r1, 8002f04 <submit_to_queue_locked+0x50>
 8002f02:	b3a2      	cbz	r2, 8002f6e <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 8002f04:	b100      	cbz	r0, 8002f08 <submit_to_queue_locked+0x54>
 8002f06:	b3a9      	cbz	r1, 8002f74 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8002f0c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8002f10:	b313      	cbz	r3, 8002f58 <submit_to_queue_locked+0xa4>
	parent->next = child;
 8002f12:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8002f14:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8002f18:	b12e      	cbz	r6, 8002f26 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	f106 0088 	add.w	r0, r6, #136	; 0x88
 8002f22:	f002 fcc7 	bl	80058b4 <z_sched_wake>
		ret = 1;
 8002f26:	2001      	movs	r0, #1

		if (rc < 0) {
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	db06      	blt.n	8002f3a <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 8002f2c:	68e3      	ldr	r3, [r4, #12]
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	60a3      	str	r3, [r4, #8]
 8002f38:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	dc21      	bgt.n	8002f82 <submit_to_queue_locked+0xce>
 8002f3e:	e01e      	b.n	8002f7e <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 8002f40:	6883      	ldr	r3, [r0, #8]
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e7c3      	b.n	8002ece <submit_to_queue_locked+0x1a>
		ret = 1;
 8002f46:	2701      	movs	r7, #1
 8002f48:	e7c8      	b.n	8002edc <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8002f4a:	f002 fab2 	bl	80054b2 <k_is_in_isr>
 8002f4e:	b908      	cbnz	r0, 8002f54 <submit_to_queue_locked+0xa0>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e7cb      	b.n	8002eec <submit_to_queue_locked+0x38>
 8002f54:	2300      	movs	r3, #0
 8002f56:	e7c9      	b.n	8002eec <submit_to_queue_locked+0x38>
 8002f58:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 8002f5c:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 8002f60:	e7da      	b.n	8002f18 <submit_to_queue_locked+0x64>
		return -EINVAL;
 8002f62:	f06f 0015 	mvn.w	r0, #21
 8002f66:	e7df      	b.n	8002f28 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 8002f68:	f06f 0012 	mvn.w	r0, #18
 8002f6c:	e7dc      	b.n	8002f28 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8002f6e:	f06f 000f 	mvn.w	r0, #15
 8002f72:	e7d9      	b.n	8002f28 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8002f74:	f06f 000f 	mvn.w	r0, #15
 8002f78:	e7d6      	b.n	8002f28 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8002f7a:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 8002f84:	2000      	movs	r0, #0
 8002f86:	e7fa      	b.n	8002f7e <submit_to_queue_locked+0xca>
 8002f88:	20000b34 	.word	0x20000b34

08002f8c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 8002f8c:	b508      	push	{r3, lr}
 8002f8e:	4684      	mov	ip, r0
 8002f90:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002f92:	ea53 0102 	orrs.w	r1, r3, r2
 8002f96:	d00c      	beq.n	8002fb2 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 8002f98:	68c1      	ldr	r1, [r0, #12]
 8002f9a:	f041 0108 	orr.w	r1, r1, #8
 8002f9e:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 8002fa0:	f8dc 1000 	ldr.w	r1, [ip]
 8002fa4:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 8002fa6:	4905      	ldr	r1, [pc, #20]	; (8002fbc <schedule_for_queue_locked+0x30>)
 8002fa8:	3010      	adds	r0, #16
 8002faa:	f000 fceb 	bl	8003984 <z_add_timeout>

	return ret;
 8002fae:	2001      	movs	r0, #1
}
 8002fb0:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 8002fb2:	4661      	mov	r1, ip
 8002fb4:	f7ff ff7e 	bl	8002eb4 <submit_to_queue_locked>
 8002fb8:	e7fa      	b.n	8002fb0 <schedule_for_queue_locked+0x24>
 8002fba:	bf00      	nop
 8002fbc:	080055cf 	.word	0x080055cf

08002fc0 <finalize_cancel_locked>:
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 8002fc4:	68c3      	ldr	r3, [r0, #12]
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	60c3      	str	r3, [r0, #12]
	return list->head;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <finalize_cancel_locked+0x78>)
 8002fce:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8002fd0:	b1fb      	cbz	r3, 8003012 <finalize_cancel_locked+0x52>
 8002fd2:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 8002fd4:	b103      	cbz	r3, 8002fd8 <finalize_cancel_locked+0x18>
	return node->next;
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	2600      	movs	r6, #0
 8002fda:	e01f      	b.n	800301c <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8002fdc:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8002fde:	b166      	cbz	r6, 8002ffa <finalize_cancel_locked+0x3a>
	return node->next;
 8002fe0:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 8002fe2:	6031      	str	r1, [r6, #0]
	return list->tail;
 8002fe4:	4914      	ldr	r1, [pc, #80]	; (8003038 <finalize_cancel_locked+0x78>)
 8002fe6:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d00f      	beq.n	800300c <finalize_cancel_locked+0x4c>
	parent->next = child;
 8002fec:	2100      	movs	r1, #0
 8002fee:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 8002ff0:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 8002ff4:	f7ff ff14 	bl	8002e20 <z_impl_k_sem_give>
}
 8002ff8:	e015      	b.n	8003026 <finalize_cancel_locked+0x66>
	return node->next;
 8002ffa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <finalize_cancel_locked+0x78>)
 8002ffe:	6008      	str	r0, [r1, #0]
	return list->tail;
 8003000:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8003002:	428b      	cmp	r3, r1
 8003004:	d1f2      	bne.n	8002fec <finalize_cancel_locked+0x2c>
	list->tail = node;
 8003006:	490c      	ldr	r1, [pc, #48]	; (8003038 <finalize_cancel_locked+0x78>)
 8003008:	6048      	str	r0, [r1, #4]
}
 800300a:	e7ef      	b.n	8002fec <finalize_cancel_locked+0x2c>
	list->tail = node;
 800300c:	490a      	ldr	r1, [pc, #40]	; (8003038 <finalize_cancel_locked+0x78>)
 800300e:	604e      	str	r6, [r1, #4]
}
 8003010:	e7ec      	b.n	8002fec <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8003012:	461c      	mov	r4, r3
 8003014:	e7e0      	b.n	8002fd8 <finalize_cancel_locked+0x18>
 8003016:	4622      	mov	r2, r4
 8003018:	4623      	mov	r3, r4
 800301a:	4614      	mov	r4, r2
 800301c:	b153      	cbz	r3, 8003034 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	42aa      	cmp	r2, r5
 8003022:	d0db      	beq.n	8002fdc <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8003024:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8003026:	2c00      	cmp	r4, #0
 8003028:	d0f5      	beq.n	8003016 <finalize_cancel_locked+0x56>
 800302a:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800302c:	2c00      	cmp	r4, #0
 800302e:	d0f3      	beq.n	8003018 <finalize_cancel_locked+0x58>
	return node->next;
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	e7f1      	b.n	8003018 <finalize_cancel_locked+0x58>
}
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	20000b60 	.word	0x20000b60

0800303c <work_queue_main>:
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b085      	sub	sp, #20
 8003040:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 8003042:	e016      	b.n	8003072 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8003044:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 8003048:	f023 0204 	bic.w	r2, r3, #4
 800304c:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 8003050:	f013 0f04 	tst.w	r3, #4
 8003054:	d159      	bne.n	800310a <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8003056:	2300      	movs	r3, #0
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003062:	e9cd 2300 	strd	r2, r3, [sp]
 8003066:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800306a:	4631      	mov	r1, r6
 800306c:	482e      	ldr	r0, [pc, #184]	; (8003128 <work_queue_main+0xec>)
 800306e:	f000 fc13 	bl	8003898 <z_sched_wait>
	__asm__ volatile(
 8003072:	f04f 0310 	mov.w	r3, #16
 8003076:	f3ef 8611 	mrs	r6, BASEPRI
 800307a:	f383 8812 	msr	BASEPRI_MAX, r3
 800307e:	f3bf 8f6f 	isb	sy
	return list->head;
 8003082:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 8003086:	2c00      	cmp	r4, #0
 8003088:	d0dc      	beq.n	8003044 <work_queue_main+0x8>
	return node->next;
 800308a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800308c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 8003090:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8003094:	4294      	cmp	r4, r2
 8003096:	d035      	beq.n	8003104 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 8003098:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80030a4:	68e3      	ldr	r3, [r4, #12]
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 80030b2:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 80030b4:	2c00      	cmp	r4, #0
 80030b6:	d0ce      	beq.n	8003056 <work_queue_main+0x1a>
	__asm__ volatile(
 80030b8:	f386 8811 	msr	BASEPRI, r6
 80030bc:	f3bf 8f6f 	isb	sy
			handler(work);
 80030c0:	4620      	mov	r0, r4
 80030c2:	4798      	blx	r3
	__asm__ volatile(
 80030c4:	f04f 0310 	mov.w	r3, #16
 80030c8:	f3ef 8611 	mrs	r6, BASEPRI
 80030cc:	f383 8812 	msr	BASEPRI_MAX, r3
 80030d0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80030d4:	68e3      	ldr	r3, [r4, #12]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	60e3      	str	r3, [r4, #12]
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80030dc:	f013 0f02 	tst.w	r3, #2
 80030e0:	d11e      	bne.n	8003120 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 80030e2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 80030ee:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 80030f2:	f386 8811 	msr	BASEPRI, r6
 80030f6:	f3bf 8f6f 	isb	sy
			if (yield) {
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1b9      	bne.n	8003072 <work_queue_main+0x36>
	z_impl_k_yield();
 80030fe:	f000 faf5 	bl	80036ec <z_impl_k_yield>
}
 8003102:	e7b6      	b.n	8003072 <work_queue_main+0x36>
	list->tail = node;
 8003104:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8003108:	e7c6      	b.n	8003098 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800310a:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800310e:	2200      	movs	r2, #0
 8003110:	2101      	movs	r1, #1
 8003112:	4638      	mov	r0, r7
 8003114:	f002 fbce 	bl	80058b4 <z_sched_wake>
 8003118:	2800      	cmp	r0, #0
 800311a:	d1f8      	bne.n	800310e <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	e7c9      	b.n	80030b4 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff ff4d 	bl	8002fc0 <finalize_cancel_locked>
 8003126:	e7dc      	b.n	80030e2 <work_queue_main+0xa6>
 8003128:	20000b5c 	.word	0x20000b5c

0800312c <k_work_queue_start>:
{
 800312c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	4604      	mov	r4, r0
 8003132:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8003134:	2000      	movs	r0, #0
 8003136:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800313a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800313e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 8003142:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 8003146:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800314a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800314e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 8003152:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
 8003156:	b1fd      	cbz	r5, 8003198 <k_work_queue_start+0x6c>
 8003158:	7928      	ldrb	r0, [r5, #4]
 800315a:	b9f8      	cbnz	r0, 800319c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800315c:	2001      	movs	r0, #1
	*flagp = flags;
 800315e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003162:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003166:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800316a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800316e:	2000      	movs	r0, #0
 8003170:	9004      	str	r0, [sp, #16]
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	9002      	str	r0, [sp, #8]
 8003176:	9001      	str	r0, [sp, #4]
 8003178:	9400      	str	r4, [sp, #0]
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <k_work_queue_start+0x78>)
 800317c:	4620      	mov	r0, r4
 800317e:	f002 f9b0 	bl	80054e2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 8003182:	b125      	cbz	r5, 800318e <k_work_queue_start+0x62>
 8003184:	6829      	ldr	r1, [r5, #0]
 8003186:	b111      	cbz	r1, 800318e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 8003188:	4620      	mov	r0, r4
 800318a:	f002 f998 	bl	80054be <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800318e:	4620      	mov	r0, r4
 8003190:	f002 f998 	bl	80054c4 <z_impl_k_thread_start>
}
 8003194:	b009      	add	sp, #36	; 0x24
 8003196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8003198:	2001      	movs	r0, #1
 800319a:	e7e0      	b.n	800315e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800319c:	f240 1001 	movw	r0, #257	; 0x101
 80031a0:	e7dd      	b.n	800315e <k_work_queue_start+0x32>
 80031a2:	bf00      	nop
 80031a4:	0800303d 	.word	0x0800303d

080031a8 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 80031a8:	b508      	push	{r3, lr}
 80031aa:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <k_work_reschedule+0xc>)
 80031ae:	f002 fa4e 	bl	800564e <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 80031b2:	bd08      	pop	{r3, pc}
 80031b4:	20000420 	.word	0x20000420

080031b8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031bc:	bf08      	it	eq
 80031be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80031c2:	d100      	bne.n	80031c6 <add_thread_timeout+0xe>
 80031c4:	4770      	bx	lr
{
 80031c6:	b508      	push	{r3, lr}
 80031c8:	4902      	ldr	r1, [pc, #8]	; (80031d4 <add_thread_timeout+0x1c>)
 80031ca:	3018      	adds	r0, #24
 80031cc:	f000 fbda 	bl	8003984 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 80031d0:	bd08      	pop	{r3, pc}
 80031d2:	bf00      	nop
 80031d4:	08005757 	.word	0x08005757

080031d8 <z_reset_time_slice>:
{
 80031d8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <z_reset_time_slice+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b903      	cbnz	r3, 80031e2 <z_reset_time_slice+0xa>
}
 80031e0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80031e2:	f7ff fb1b 	bl	800281c <sys_clock_elapsed>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <z_reset_time_slice+0x24>)
 80031ea:	6810      	ldr	r0, [r2, #0]
 80031ec:	4403      	add	r3, r0
 80031ee:	4a04      	ldr	r2, [pc, #16]	; (8003200 <z_reset_time_slice+0x28>)
 80031f0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80031f2:	2100      	movs	r1, #0
 80031f4:	f002 fbca 	bl	800598c <z_set_timeout_expiry>
}
 80031f8:	e7f2      	b.n	80031e0 <z_reset_time_slice+0x8>
 80031fa:	bf00      	nop
 80031fc:	20000b74 	.word	0x20000b74
 8003200:	20000b34 	.word	0x20000b34

08003204 <k_sched_time_slice_set>:
{
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800320a:	2300      	movs	r3, #0
	__asm__ volatile(
 800320c:	f04f 0210 	mov.w	r2, #16
 8003210:	f3ef 8611 	mrs	r6, BASEPRI
 8003214:	f382 8812 	msr	BASEPRI_MAX, r2
 8003218:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800321c:	e00c      	b.n	8003238 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800321e:	2b02      	cmp	r3, #2
 8003220:	bfb8      	it	lt
 8003222:	2302      	movlt	r3, #2
 8003224:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <k_sched_time_slice_set+0x50>)
 8003228:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800322a:	f7ff ffd5 	bl	80031d8 <z_reset_time_slice>
	__asm__ volatile(
 800322e:	f386 8811 	msr	BASEPRI, r6
 8003232:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8003236:	2301      	movs	r3, #1
 8003238:	b953      	cbnz	r3, 8003250 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <k_sched_time_slice_set+0x54>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8003240:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003244:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <k_sched_time_slice_set+0x58>)
 8003248:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800324a:	2c00      	cmp	r4, #0
 800324c:	dce7      	bgt.n	800321e <k_sched_time_slice_set+0x1a>
 800324e:	e7ea      	b.n	8003226 <k_sched_time_slice_set+0x22>
}
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	bf00      	nop
 8003254:	20000b70 	.word	0x20000b70
 8003258:	20000b34 	.word	0x20000b34
 800325c:	20000b74 	.word	0x20000b74

08003260 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8003260:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8003262:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003264:	b921      	cbnz	r1, 8003270 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003266:	f3ef 8305 	mrs	r3, IPSR
 800326a:	b913      	cbnz	r3, 8003272 <z_reschedule+0x12>
 800326c:	2101      	movs	r1, #1
 800326e:	e000      	b.n	8003272 <z_reschedule+0x12>
 8003270:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8003272:	f011 0f01 	tst.w	r1, #1
 8003276:	d007      	beq.n	8003288 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <z_reschedule+0x34>)
 800327a:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800327c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800327e:	429a      	cmp	r2, r3
 8003280:	d002      	beq.n	8003288 <z_reschedule+0x28>
	ret = arch_swap(key);
 8003282:	f7fd fef5 	bl	8001070 <arch_swap>
		z_swap(lock, key);
 8003286:	e003      	b.n	8003290 <z_reschedule+0x30>
 8003288:	f380 8811 	msr	BASEPRI, r0
 800328c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8003290:	bd08      	pop	{r3, pc}
 8003292:	bf00      	nop
 8003294:	20000b34 	.word	0x20000b34

08003298 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8003298:	2300      	movs	r3, #0
	__asm__ volatile(
 800329a:	f04f 0210 	mov.w	r2, #16
 800329e:	f3ef 8111 	mrs	r1, BASEPRI
 80032a2:	f382 8812 	msr	BASEPRI_MAX, r2
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	e009      	b.n	80032c0 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <k_sched_lock+0x30>)
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	7bd3      	ldrb	r3, [r2, #15]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80032b6:	f381 8811 	msr	BASEPRI, r1
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	2301      	movs	r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f3      	beq.n	80032ac <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000b34 	.word	0x20000b34

080032cc <update_cache>:
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80032d0:	480f      	ldr	r0, [pc, #60]	; (8003310 <update_cache+0x44>)
 80032d2:	f002 fa1d 	bl	8005710 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80032d6:	4605      	mov	r5, r0
 80032d8:	b170      	cbz	r0, 80032f8 <update_cache+0x2c>
	if (preempt_ok != 0) {
 80032da:	b984      	cbnz	r4, 80032fe <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <update_cache+0x48>)
 80032de:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 80032e0:	7b5a      	ldrb	r2, [r3, #13]
 80032e2:	f012 0f1f 	tst.w	r2, #31
 80032e6:	d10a      	bne.n	80032fe <update_cache+0x32>
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
	return node->next != NULL;
 80032e8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80032ea:	b942      	cbnz	r2, 80032fe <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80032ec:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 80032ee:	2a7f      	cmp	r2, #127	; 0x7f
 80032f0:	d905      	bls.n	80032fe <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <update_cache+0x48>)
 80032f4:	6193      	str	r3, [r2, #24]
 80032f6:	e00a      	b.n	800330e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <update_cache+0x48>)
 80032fa:	68dd      	ldr	r5, [r3, #12]
 80032fc:	e7ed      	b.n	80032da <update_cache+0xe>
		if (thread != _current) {
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <update_cache+0x48>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	42ab      	cmp	r3, r5
 8003304:	d001      	beq.n	800330a <update_cache+0x3e>
			z_reset_time_slice();
 8003306:	f7ff ff67 	bl	80031d8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800330a:	4b02      	ldr	r3, [pc, #8]	; (8003314 <update_cache+0x48>)
 800330c:	619d      	str	r5, [r3, #24]
}
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20000b50 	.word	0x20000b50
 8003314:	20000b34 	.word	0x20000b34

08003318 <move_thread_to_end_of_prio_q>:
{
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800331c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800331e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db28      	blt.n	8003378 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003326:	7b6b      	ldrb	r3, [r5, #13]
 8003328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800332c:	736b      	strb	r3, [r5, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <move_thread_to_end_of_prio_q+0x80>)
 8003330:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003334:	429c      	cmp	r4, r3
 8003336:	d02d      	beq.n	8003394 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003338:	b16c      	cbz	r4, 8003356 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800333a:	4621      	mov	r1, r4
 800333c:	4628      	mov	r0, r5
 800333e:	f002 f9c0 	bl	80056c2 <z_sched_prio_cmp>
 8003342:	2800      	cmp	r0, #0
 8003344:	dc20      	bgt.n	8003388 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003346:	b134      	cbz	r4, 8003356 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <move_thread_to_end_of_prio_q+0x80>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	429c      	cmp	r4, r3
 800334e:	d002      	beq.n	8003356 <move_thread_to_end_of_prio_q+0x3e>
 8003350:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003352:	2c00      	cmp	r4, #0
 8003354:	d1f0      	bne.n	8003338 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <move_thread_to_end_of_prio_q+0x80>)
 8003358:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800335a:	f103 011c 	add.w	r1, r3, #28
 800335e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8003360:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8003362:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8003364:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <move_thread_to_end_of_prio_q+0x80>)
 8003368:	6898      	ldr	r0, [r3, #8]
 800336a:	42a8      	cmp	r0, r5
 800336c:	bf14      	ite	ne
 800336e:	2000      	movne	r0, #0
 8003370:	2001      	moveq	r0, #1
 8003372:	f7ff ffab 	bl	80032cc <update_cache>
}
 8003376:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800337c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 800337e:	4601      	mov	r1, r0
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <move_thread_to_end_of_prio_q+0x84>)
 8003382:	f002 f9bd 	bl	8005700 <z_priq_dumb_remove>
}
 8003386:	e7ce      	b.n	8003326 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003388:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800338a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800338c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800338e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8003390:	6065      	str	r5, [r4, #4]
}
 8003392:	e7e8      	b.n	8003366 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003394:	2400      	movs	r4, #0
 8003396:	e7cf      	b.n	8003338 <move_thread_to_end_of_prio_q+0x20>
 8003398:	20000b34 	.word	0x20000b34
 800339c:	20000b50 	.word	0x20000b50

080033a0 <z_time_slice>:
{
 80033a0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80033a2:	f04f 0310 	mov.w	r3, #16
 80033a6:	f3ef 8411 	mrs	r4, BASEPRI
 80033aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80033ae:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <z_time_slice+0x98>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <z_time_slice+0x9c>)
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d017      	beq.n	80033ee <z_time_slice+0x4e>
	pending_current = NULL;
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <z_time_slice+0x9c>)
 80033c0:	2100      	movs	r1, #0
 80033c2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <z_time_slice+0xa0>)
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	b372      	cbz	r2, 8003428 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80033ca:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80033cc:	2a7f      	cmp	r2, #127	; 0x7f
 80033ce:	d815      	bhi.n	80033fc <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 80033d0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80033d2:	f012 0f1f 	tst.w	r2, #31
 80033d6:	d11b      	bne.n	8003410 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80033d8:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80033dc:	4a19      	ldr	r2, [pc, #100]	; (8003444 <z_time_slice+0xa4>)
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4291      	cmp	r1, r2
 80033e2:	db17      	blt.n	8003414 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <z_time_slice+0xa8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d016      	beq.n	8003418 <z_time_slice+0x78>
 80033ea:	2201      	movs	r2, #1
 80033ec:	e007      	b.n	80033fe <z_time_slice+0x5e>
		z_reset_time_slice();
 80033ee:	f7ff fef3 	bl	80031d8 <z_reset_time_slice>
	__asm__ volatile(
 80033f2:	f384 8811 	msr	BASEPRI, r4
 80033f6:	f3bf 8f6f 	isb	sy
		return;
 80033fa:	e01c      	b.n	8003436 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 80033fc:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 80033fe:	b19a      	cbz	r2, 8003428 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <z_time_slice+0x98>)
 8003402:	6912      	ldr	r2, [r2, #16]
 8003404:	4282      	cmp	r2, r0
 8003406:	dd09      	ble.n	800341c <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 8003408:	1a10      	subs	r0, r2, r0
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <z_time_slice+0x98>)
 800340c:	6118      	str	r0, [r3, #16]
 800340e:	e00e      	b.n	800342e <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8003410:	2200      	movs	r2, #0
 8003412:	e7f4      	b.n	80033fe <z_time_slice+0x5e>
 8003414:	2200      	movs	r2, #0
 8003416:	e7f2      	b.n	80033fe <z_time_slice+0x5e>
 8003418:	2200      	movs	r2, #0
 800341a:	e7f0      	b.n	80033fe <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff7b 	bl	8003318 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8003422:	f7ff fed9 	bl	80031d8 <z_reset_time_slice>
 8003426:	e002      	b.n	800342e <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <z_time_slice+0x98>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	f384 8811 	msr	BASEPRI, r4
 8003432:	f3bf 8f6f 	isb	sy
}
 8003436:	bd10      	pop	{r4, pc}
 8003438:	20000b34 	.word	0x20000b34
 800343c:	20000b68 	.word	0x20000b68
 8003440:	20000b74 	.word	0x20000b74
 8003444:	20000b70 	.word	0x20000b70
 8003448:	20000318 	.word	0x20000318

0800344c <ready_thread>:
{
 800344c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800344e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8003450:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8003454:	2a00      	cmp	r2, #0
 8003456:	db2d      	blt.n	80034b4 <ready_thread+0x68>
 8003458:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800345a:	f013 0f1f 	tst.w	r3, #31
 800345e:	d105      	bne.n	800346c <ready_thread+0x20>
	return node->next != NULL;
 8003460:	6982      	ldr	r2, [r0, #24]
 8003462:	b10a      	cbz	r2, 8003468 <ready_thread+0x1c>
 8003464:	2200      	movs	r2, #0
 8003466:	e002      	b.n	800346e <ready_thread+0x22>
 8003468:	2201      	movs	r2, #1
 800346a:	e000      	b.n	800346e <ready_thread+0x22>
 800346c:	2200      	movs	r2, #0
 800346e:	b30a      	cbz	r2, 80034b4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003474:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <ready_thread+0x7c>)
 8003478:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800347c:	429d      	cmp	r5, r3
 800347e:	d020      	beq.n	80034c2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003480:	b16d      	cbz	r5, 800349e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003482:	4629      	mov	r1, r5
 8003484:	4620      	mov	r0, r4
 8003486:	f002 f91c 	bl	80056c2 <z_sched_prio_cmp>
 800348a:	2800      	cmp	r0, #0
 800348c:	dc13      	bgt.n	80034b6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800348e:	b135      	cbz	r5, 800349e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <ready_thread+0x7c>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	429d      	cmp	r5, r3
 8003496:	d002      	beq.n	800349e <ready_thread+0x52>
 8003498:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800349a:	2d00      	cmp	r5, #0
 800349c:	d1f0      	bne.n	8003480 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <ready_thread+0x7c>)
 80034a0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 80034a2:	f103 011c 	add.w	r1, r3, #28
 80034a6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 80034a8:	6062      	str	r2, [r4, #4]
	tail->next = node;
 80034aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80034ac:	621c      	str	r4, [r3, #32]
		update_cache(0);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7ff ff0c 	bl	80032cc <update_cache>
}
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 80034b6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 80034b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80034ba:	6025      	str	r5, [r4, #0]
	prev->next = node;
 80034bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80034be:	606c      	str	r4, [r5, #4]
}
 80034c0:	e7f5      	b.n	80034ae <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80034c2:	2500      	movs	r5, #0
 80034c4:	e7dc      	b.n	8003480 <ready_thread+0x34>
 80034c6:	bf00      	nop
 80034c8:	20000b34 	.word	0x20000b34

080034cc <z_sched_start>:
{
 80034cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80034ce:	f04f 0310 	mov.w	r3, #16
 80034d2:	f3ef 8411 	mrs	r4, BASEPRI
 80034d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80034da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80034de:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 80034e0:	f013 0f04 	tst.w	r3, #4
 80034e4:	d104      	bne.n	80034f0 <z_sched_start+0x24>
	__asm__ volatile(
 80034e6:	f384 8811 	msr	BASEPRI, r4
 80034ea:	f3bf 8f6f 	isb	sy
}
 80034ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 80034f6:	f7ff ffa9 	bl	800344c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80034fa:	4621      	mov	r1, r4
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <z_sched_start+0x38>)
 80034fe:	f7ff feaf 	bl	8003260 <z_reschedule>
 8003502:	e7f4      	b.n	80034ee <z_sched_start+0x22>
 8003504:	20000b6c 	.word	0x20000b6c

08003508 <unready_thread>:
{
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800350c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800350e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db08      	blt.n	8003528 <unready_thread+0x20>
	update_cache(thread == _current);
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <unready_thread+0x30>)
 8003518:	6898      	ldr	r0, [r3, #8]
 800351a:	42a0      	cmp	r0, r4
 800351c:	bf14      	ite	ne
 800351e:	2000      	movne	r0, #0
 8003520:	2001      	moveq	r0, #1
 8003522:	f7ff fed3 	bl	80032cc <update_cache>
}
 8003526:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003528:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800352c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 800352e:	4601      	mov	r1, r0
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <unready_thread+0x34>)
 8003532:	f002 f8e5 	bl	8005700 <z_priq_dumb_remove>
}
 8003536:	e7ee      	b.n	8003516 <unready_thread+0xe>
 8003538:	20000b34 	.word	0x20000b34
 800353c:	20000b50 	.word	0x20000b50

08003540 <z_pend_curr>:
{
 8003540:	b510      	push	{r4, lr}
 8003542:	460c      	mov	r4, r1
 8003544:	4611      	mov	r1, r2
	pending_current = _current;
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <z_pend_curr+0x20>)
 8003548:	6898      	ldr	r0, [r3, #8]
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <z_pend_curr+0x24>)
 800354c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800354e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003552:	f002 f962 	bl	800581a <pend>
 8003556:	4620      	mov	r0, r4
 8003558:	f7fd fd8a 	bl	8001070 <arch_swap>
}
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	20000b34 	.word	0x20000b34
 8003564:	20000b68 	.word	0x20000b68

08003568 <z_impl_k_thread_suspend>:
{
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800356c:	3018      	adds	r0, #24
 800356e:	f002 f9ef 	bl	8005950 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8003572:	2300      	movs	r3, #0
	__asm__ volatile(
 8003574:	f04f 0210 	mov.w	r2, #16
 8003578:	f3ef 8511 	mrs	r5, BASEPRI
 800357c:	f382 8812 	msr	BASEPRI_MAX, r2
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	e010      	b.n	80035a8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003586:	7b63      	ldrb	r3, [r4, #13]
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <z_impl_k_thread_suspend+0x7c>)
 8003590:	6898      	ldr	r0, [r3, #8]
 8003592:	42a0      	cmp	r0, r4
 8003594:	bf14      	ite	ne
 8003596:	2000      	movne	r0, #0
 8003598:	2001      	moveq	r0, #1
 800359a:	f7ff fe97 	bl	80032cc <update_cache>
	__asm__ volatile(
 800359e:	f385 8811 	msr	BASEPRI, r5
 80035a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80035a6:	2301      	movs	r3, #1
 80035a8:	b963      	cbnz	r3, 80035c4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 80035aa:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 80035ac:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	dae8      	bge.n	8003586 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80035b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b8:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 80035ba:	4621      	mov	r1, r4
 80035bc:	480a      	ldr	r0, [pc, #40]	; (80035e8 <z_impl_k_thread_suspend+0x80>)
 80035be:	f002 f89f 	bl	8005700 <z_priq_dumb_remove>
}
 80035c2:	e7e0      	b.n	8003586 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <z_impl_k_thread_suspend+0x7c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d000      	beq.n	80035ce <z_impl_k_thread_suspend+0x66>
}
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80035ce:	f04f 0310 	mov.w	r3, #16
 80035d2:	f3ef 8011 	mrs	r0, BASEPRI
 80035d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80035da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80035de:	f002 f87a 	bl	80056d6 <z_reschedule_irqlock>
 80035e2:	e7f3      	b.n	80035cc <z_impl_k_thread_suspend+0x64>
 80035e4:	20000b34 	.word	0x20000b34
 80035e8:	20000b50 	.word	0x20000b50

080035ec <k_sched_unlock>:

void k_sched_unlock(void)
{
 80035ec:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 80035ee:	2300      	movs	r3, #0
 80035f0:	f04f 0210 	mov.w	r2, #16
 80035f4:	f3ef 8411 	mrs	r4, BASEPRI
 80035f8:	f382 8812 	msr	BASEPRI_MAX, r2
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	e00c      	b.n	800361c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <k_sched_unlock+0x4c>)
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	7bd3      	ldrb	r3, [r2, #15]
 8003608:	3301      	adds	r3, #1
 800360a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff fe5d 	bl	80032cc <update_cache>
	__asm__ volatile(
 8003612:	f384 8811 	msr	BASEPRI, r4
 8003616:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800361a:	2301      	movs	r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <k_sched_unlock+0x16>
	__asm__ volatile(
 8003620:	f04f 0310 	mov.w	r3, #16
 8003624:	f3ef 8011 	mrs	r0, BASEPRI
 8003628:	f383 8812 	msr	BASEPRI_MAX, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f002 f851 	bl	80056d6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	20000b34 	.word	0x20000b34

0800363c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800363c:	7b43      	ldrb	r3, [r0, #13]
 800363e:	f013 0f08 	tst.w	r3, #8
 8003642:	d142      	bne.n	80036ca <end_thread+0x8e>
{
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800364e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003652:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8003654:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003658:	d12b      	bne.n	80036b2 <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 800365a:	68ab      	ldr	r3, [r5, #8]
 800365c:	b15b      	cbz	r3, 8003676 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800365e:	4628      	mov	r0, r5
 8003660:	f002 f82d 	bl	80056be <pended_on_thread>
 8003664:	4629      	mov	r1, r5
 8003666:	f002 f84b 	bl	8005700 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800366a:	7b6b      	ldrb	r3, [r5, #13]
 800366c:	f023 0302 	bic.w	r3, r3, #2
 8003670:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	60ab      	str	r3, [r5, #8]
 8003676:	f105 0018 	add.w	r0, r5, #24
 800367a:	f002 f969 	bl	8005950 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800367e:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8003680:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003682:	42ac      	cmp	r4, r5
 8003684:	d01d      	beq.n	80036c2 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8003686:	b1e4      	cbz	r4, 80036c2 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8003688:	4620      	mov	r0, r4
 800368a:	f002 f818 	bl	80056be <pended_on_thread>
 800368e:	4621      	mov	r1, r4
 8003690:	f002 f836 	bl	8005700 <z_priq_dumb_remove>
 8003694:	7b63      	ldrb	r3, [r4, #13]
 8003696:	f023 0302 	bic.w	r3, r3, #2
 800369a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800369c:	2600      	movs	r6, #0
 800369e:	60a6      	str	r6, [r4, #8]
 80036a0:	f104 0018 	add.w	r0, r4, #24
 80036a4:	f002 f954 	bl	8005950 <z_abort_timeout>
 80036a8:	67a6      	str	r6, [r4, #120]	; 0x78
		ready_thread(thread);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fece 	bl	800344c <ready_thread>
 80036b0:	e7e6      	b.n	8003680 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80036b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b6:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 80036b8:	4601      	mov	r1, r0
 80036ba:	4804      	ldr	r0, [pc, #16]	; (80036cc <end_thread+0x90>)
 80036bc:	f002 f820 	bl	8005700 <z_priq_dumb_remove>
}
 80036c0:	e7cb      	b.n	800365a <end_thread+0x1e>
		update_cache(1);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f7ff fe02 	bl	80032cc <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
 80036ca:	4770      	bx	lr
 80036cc:	20000b50 	.word	0x20000b50

080036d0 <z_sched_init>:
{
 80036d0:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <z_sched_init+0x18>)
 80036d4:	f103 021c 	add.w	r2, r3, #28
 80036d8:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 80036da:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80036dc:	2100      	movs	r1, #0
 80036de:	4608      	mov	r0, r1
 80036e0:	f7ff fd90 	bl	8003204 <k_sched_time_slice_set>
}
 80036e4:	bd08      	pop	{r3, pc}
 80036e6:	bf00      	nop
 80036e8:	20000b34 	.word	0x20000b34

080036ec <z_impl_k_yield>:
{
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	f04f 0310 	mov.w	r3, #16
 80036f2:	f3ef 8611 	mrs	r6, BASEPRI
 80036f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80036fa:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 80036fe:	4c1c      	ldr	r4, [pc, #112]	; (8003770 <z_impl_k_yield+0x84>)
 8003700:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003702:	7b4b      	ldrb	r3, [r1, #13]
 8003704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003708:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 800370a:	f104 071c 	add.w	r7, r4, #28
 800370e:	4638      	mov	r0, r7
 8003710:	f001 fff6 	bl	8005700 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8003714:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8003716:	7b6b      	ldrb	r3, [r5, #13]
 8003718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800371c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800371e:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003720:	42bc      	cmp	r4, r7
 8003722:	d023      	beq.n	800376c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003724:	b16c      	cbz	r4, 8003742 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003726:	4621      	mov	r1, r4
 8003728:	4628      	mov	r0, r5
 800372a:	f001 ffca 	bl	80056c2 <z_sched_prio_cmp>
 800372e:	2800      	cmp	r0, #0
 8003730:	dc16      	bgt.n	8003760 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003732:	b134      	cbz	r4, 8003742 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <z_impl_k_yield+0x84>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	429c      	cmp	r4, r3
 800373a:	d002      	beq.n	8003742 <z_impl_k_yield+0x56>
 800373c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800373e:	2c00      	cmp	r4, #0
 8003740:	d1f0      	bne.n	8003724 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <z_impl_k_yield+0x84>)
 8003744:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8003746:	f103 011c 	add.w	r1, r3, #28
 800374a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800374c:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800374e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8003750:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8003752:	2001      	movs	r0, #1
 8003754:	f7ff fdba 	bl	80032cc <update_cache>
 8003758:	4630      	mov	r0, r6
 800375a:	f7fd fc89 	bl	8001070 <arch_swap>
}
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8003760:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8003762:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8003764:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8003766:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8003768:	6065      	str	r5, [r4, #4]
}
 800376a:	e7f2      	b.n	8003752 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800376c:	2400      	movs	r4, #0
 800376e:	e7d9      	b.n	8003724 <z_impl_k_yield+0x38>
 8003770:	20000b34 	.word	0x20000b34

08003774 <z_tick_sleep>:
{
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8003778:	ea50 0301 	orrs.w	r3, r0, r1
 800377c:	d038      	beq.n	80037f0 <z_tick_sleep+0x7c>
 800377e:	4604      	mov	r4, r0
 8003780:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8003782:	f06f 0301 	mvn.w	r3, #1
 8003786:	1a1b      	subs	r3, r3, r0
 8003788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800378c:	eb62 0201 	sbc.w	r2, r2, r1
 8003790:	2b01      	cmp	r3, #1
 8003792:	f172 0300 	sbcs.w	r3, r2, #0
 8003796:	db2f      	blt.n	80037f8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8003798:	f06f 0501 	mvn.w	r5, #1
 800379c:	1a2d      	subs	r5, r5, r0
 800379e:	f04f 0310 	mov.w	r3, #16
 80037a2:	f3ef 8811 	mrs	r8, BASEPRI
 80037a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80037aa:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 80037ae:	4f14      	ldr	r7, [pc, #80]	; (8003800 <z_tick_sleep+0x8c>)
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <z_tick_sleep+0x90>)
 80037b4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80037b6:	f7ff fea7 	bl	8003508 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80037ba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80037bc:	4622      	mov	r2, r4
 80037be:	4633      	mov	r3, r6
 80037c0:	4911      	ldr	r1, [pc, #68]	; (8003808 <z_tick_sleep+0x94>)
 80037c2:	3018      	adds	r0, #24
 80037c4:	f000 f8de 	bl	8003984 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80037c8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80037ca:	7b53      	ldrb	r3, [r2, #13]
 80037cc:	f043 0310 	orr.w	r3, r3, #16
 80037d0:	7353      	strb	r3, [r2, #13]
 80037d2:	4640      	mov	r0, r8
 80037d4:	f7fd fc4c 	bl	8001070 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80037d8:	f002 f903 	bl	80059e2 <sys_clock_tick_get_32>
 80037dc:	1a28      	subs	r0, r5, r0
 80037de:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80037e2:	2801      	cmp	r0, #1
 80037e4:	f173 0300 	sbcs.w	r3, r3, #0
 80037e8:	da00      	bge.n	80037ec <z_tick_sleep+0x78>
	return 0;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 80037f0:	f7ff ff7c 	bl	80036ec <z_impl_k_yield>
		return 0;
 80037f4:	2000      	movs	r0, #0
 80037f6:	e7f9      	b.n	80037ec <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80037f8:	f002 f8f3 	bl	80059e2 <sys_clock_tick_get_32>
 80037fc:	1905      	adds	r5, r0, r4
 80037fe:	e7ce      	b.n	800379e <z_tick_sleep+0x2a>
 8003800:	20000b34 	.word	0x20000b34
 8003804:	20000b68 	.word	0x20000b68
 8003808:	08005757 	.word	0x08005757

0800380c <z_impl_k_sleep>:
{
 800380c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800380e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8003812:	bf08      	it	eq
 8003814:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8003818:	d007      	beq.n	800382a <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800381a:	f7ff ffab 	bl	8003774 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800381e:	220a      	movs	r2, #10
 8003820:	2300      	movs	r3, #0
 8003822:	17c1      	asrs	r1, r0, #31
 8003824:	f7fc fc7e 	bl	8000124 <__aeabi_uldivmod>
}
 8003828:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800382a:	4b03      	ldr	r3, [pc, #12]	; (8003838 <z_impl_k_sleep+0x2c>)
 800382c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800382e:	f7ff fe9b 	bl	8003568 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8003832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003836:	e7f7      	b.n	8003828 <z_impl_k_sleep+0x1c>
 8003838:	20000b34 	.word	0x20000b34

0800383c <z_impl_z_current_get>:
}
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <z_impl_z_current_get+0x8>)
 800383e:	6898      	ldr	r0, [r3, #8]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000b34 	.word	0x20000b34

08003848 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	f04f 0310 	mov.w	r3, #16
 800384e:	f3ef 8511 	mrs	r5, BASEPRI
 8003852:	f383 8812 	msr	BASEPRI_MAX, r3
 8003856:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800385a:	7b43      	ldrb	r3, [r0, #13]
 800385c:	f013 0f08 	tst.w	r3, #8
 8003860:	d004      	beq.n	800386c <z_thread_abort+0x24>
	__asm__ volatile(
 8003862:	f385 8811 	msr	BASEPRI, r5
 8003866:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	4604      	mov	r4, r0
	end_thread(thread);
 800386e:	f7ff fee5 	bl	800363c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <z_thread_abort+0x4c>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	42a3      	cmp	r3, r4
 8003878:	d004      	beq.n	8003884 <z_thread_abort+0x3c>
 800387a:	f385 8811 	msr	BASEPRI, r5
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	e7f2      	b.n	800386a <z_thread_abort+0x22>
 8003884:	f3ef 8305 	mrs	r3, IPSR
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f6      	bne.n	800387a <z_thread_abort+0x32>
 800388c:	4628      	mov	r0, r5
 800388e:	f7fd fbef 	bl	8001070 <arch_swap>
	return ret;
 8003892:	e7f2      	b.n	800387a <z_thread_abort+0x32>
 8003894:	20000b34 	.word	0x20000b34

08003898 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8003898:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800389c:	b083      	sub	sp, #12
 800389e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80038a0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80038a4:	e9cd bc00 	strd	fp, ip, [sp]
 80038a8:	f7ff fe4a 	bl	8003540 <z_pend_curr>

	if (data != NULL) {
 80038ac:	b11c      	cbz	r4, 80038b6 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 80038ae:	4b03      	ldr	r3, [pc, #12]	; (80038bc <z_sched_wait+0x24>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80038b6:	b003      	add	sp, #12
 80038b8:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 80038bc:	20000b34 	.word	0x20000b34

080038c0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80038c0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80038c4:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <z_data_copy+0x20>)
 80038c6:	1a12      	subs	r2, r2, r0
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <z_data_copy+0x24>)
 80038ca:	f000 fc54 	bl	8004176 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80038ce:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <z_data_copy+0x28>)
 80038d0:	4906      	ldr	r1, [pc, #24]	; (80038ec <z_data_copy+0x2c>)
 80038d2:	4807      	ldr	r0, [pc, #28]	; (80038f0 <z_data_copy+0x30>)
 80038d4:	f000 fc4f 	bl	8004176 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80038d8:	bd08      	pop	{r3, pc}
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000318 	.word	0x20000318
 80038e4:	080062c0 	.word	0x080062c0
 80038e8:	00000000 	.word	0x00000000
 80038ec:	080062c0 	.word	0x080062c0
 80038f0:	20000000 	.word	0x20000000

080038f4 <first>:
	return list->head == list;
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <first+0x10>)
 80038f6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80038f8:	4298      	cmp	r0, r3
 80038fa:	d000      	beq.n	80038fe <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 80038fc:	4770      	bx	lr
 80038fe:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8003900:	e7fc      	b.n	80038fc <first+0x8>
 8003902:	bf00      	nop
 8003904:	200002dc 	.word	0x200002dc

08003908 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003908:	b130      	cbz	r0, 8003918 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <next+0x14>)
 800390c:	6852      	ldr	r2, [r2, #4]
 800390e:	4290      	cmp	r0, r2
 8003910:	d001      	beq.n	8003916 <next+0xe>
 8003912:	6800      	ldr	r0, [r0, #0]
 8003914:	4770      	bx	lr
 8003916:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	200002dc 	.word	0x200002dc

08003920 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8003920:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <elapsed+0x14>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	b10b      	cbz	r3, 800392c <elapsed+0xc>
 8003928:	2000      	movs	r0, #0
}
 800392a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800392c:	f7fe ff76 	bl	800281c <sys_clock_elapsed>
 8003930:	e7fb      	b.n	800392a <elapsed+0xa>
 8003932:	bf00      	nop
 8003934:	20000b78 	.word	0x20000b78

08003938 <next_timeout>:

static int32_t next_timeout(void)
{
 8003938:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800393a:	f7ff ffdb 	bl	80038f4 <first>
 800393e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8003940:	f7ff ffee 	bl	8003920 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8003944:	b18c      	cbz	r4, 800396a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	6962      	ldr	r2, [r4, #20]
 800394a:	1a1b      	subs	r3, r3, r0
 800394c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8003950:	2b01      	cmp	r3, #1
 8003952:	f172 0100 	sbcs.w	r1, r2, #0
 8003956:	db11      	blt.n	800397c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8003958:	4618      	mov	r0, r3
 800395a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800395e:	f172 0300 	sbcs.w	r3, r2, #0
 8003962:	db04      	blt.n	800396e <next_timeout+0x36>
 8003964:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003968:	e001      	b.n	800396e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 800396a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <next_timeout+0x48>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	b113      	cbz	r3, 800397a <next_timeout+0x42>
 8003974:	4283      	cmp	r3, r0
 8003976:	da00      	bge.n	800397a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 8003978:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800397a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 800397c:	2000      	movs	r0, #0
 800397e:	e7f6      	b.n	800396e <next_timeout+0x36>
 8003980:	20000b34 	.word	0x20000b34

08003984 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003988:	bf08      	it	eq
 800398a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800398e:	d07f      	beq.n	8003a90 <z_add_timeout+0x10c>
{
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4604      	mov	r4, r0
 8003996:	4691      	mov	r9, r2
 8003998:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800399a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800399c:	2300      	movs	r3, #0
	__asm__ volatile(
 800399e:	f04f 0210 	mov.w	r2, #16
 80039a2:	f3ef 8711 	mrs	r7, BASEPRI
 80039a6:	f382 8812 	msr	BASEPRI_MAX, r2
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	e021      	b.n	80039f4 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80039b0:	f7ff ffb6 	bl	8003920 <elapsed>
 80039b4:	eb19 0800 	adds.w	r8, r9, r0
 80039b8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 80039bc:	f118 0301 	adds.w	r3, r8, #1
 80039c0:	f140 0000 	adc.w	r0, r0, #0
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	6160      	str	r0, [r4, #20]
 80039c8:	e038      	b.n	8003a3c <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 80039ca:	1a51      	subs	r1, r2, r1
 80039cc:	eb66 0303 	sbc.w	r3, r6, r3
 80039d0:	6101      	str	r1, [r0, #16]
 80039d2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 80039d4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 80039d6:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80039d8:	6020      	str	r0, [r4, #0]
	prev->next = node;
 80039da:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80039dc:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 80039de:	2800      	cmp	r0, #0
 80039e0:	d040      	beq.n	8003a64 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80039e2:	f7ff ff87 	bl	80038f4 <first>
 80039e6:	4284      	cmp	r4, r0
 80039e8:	d043      	beq.n	8003a72 <z_add_timeout+0xee>
	__asm__ volatile(
 80039ea:	f387 8811 	msr	BASEPRI, r7
 80039ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80039f2:	2301      	movs	r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d149      	bne.n	8003a8c <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80039f8:	f06f 0201 	mvn.w	r2, #1
 80039fc:	ebb2 0209 	subs.w	r2, r2, r9
 8003a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a04:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dbd1      	blt.n	80039b0 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <z_add_timeout+0x110>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	eb19 0202 	adds.w	r2, r9, r2
 8003a16:	eb43 0305 	adc.w	r3, r3, r5
 8003a1a:	f06f 0801 	mvn.w	r8, #1
 8003a1e:	ebb8 0802 	subs.w	r8, r8, r2
 8003a22:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 8003a26:	4641      	mov	r1, r8
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f1b8 0f01 	cmp.w	r8, #1
 8003a2e:	f173 0300 	sbcs.w	r3, r3, #0
 8003a32:	da01      	bge.n	8003a38 <z_add_timeout+0xb4>
 8003a34:	2101      	movs	r1, #1
 8003a36:	2200      	movs	r2, #0
 8003a38:	6121      	str	r1, [r4, #16]
 8003a3a:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8003a3c:	f7ff ff5a 	bl	80038f4 <first>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d0cc      	beq.n	80039de <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8003a44:	6902      	ldr	r2, [r0, #16]
 8003a46:	6946      	ldr	r6, [r0, #20]
 8003a48:	6921      	ldr	r1, [r4, #16]
 8003a4a:	6963      	ldr	r3, [r4, #20]
 8003a4c:	4291      	cmp	r1, r2
 8003a4e:	eb73 0c06 	sbcs.w	ip, r3, r6
 8003a52:	dbba      	blt.n	80039ca <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8003a54:	1a89      	subs	r1, r1, r2
 8003a56:	eb63 0306 	sbc.w	r3, r3, r6
 8003a5a:	6121      	str	r1, [r4, #16]
 8003a5c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8003a5e:	f7ff ff53 	bl	8003908 <next>
 8003a62:	e7ed      	b.n	8003a40 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <z_add_timeout+0x114>)
 8003a66:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8003a68:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8003a6a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8003a6c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8003a6e:	605c      	str	r4, [r3, #4]
}
 8003a70:	e7b7      	b.n	80039e2 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8003a72:	f7ff ff61 	bl	8003938 <next_timeout>

			if (next_time == 0 ||
 8003a76:	4603      	mov	r3, r0
 8003a78:	b118      	cbz	r0, 8003a82 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 8003a7a:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <z_add_timeout+0x118>)
 8003a7c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8003a7e:	4282      	cmp	r2, r0
 8003a80:	d0b3      	beq.n	80039ea <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fe49 	bl	800271c <sys_clock_set_timeout>
 8003a8a:	e7ae      	b.n	80039ea <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000418 	.word	0x20000418
 8003a98:	200002dc 	.word	0x200002dc
 8003a9c:	20000b34 	.word	0x20000b34

08003aa0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8003aa4:	f7ff fc7c 	bl	80033a0 <z_time_slice>
	__asm__ volatile(
 8003aa8:	f04f 0310 	mov.w	r3, #16
 8003aac:	f3ef 8511 	mrs	r5, BASEPRI
 8003ab0:	f383 8812 	msr	BASEPRI_MAX, r3
 8003ab4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <sys_clock_announce+0xbc>)
 8003aba:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8003abc:	e020      	b.n	8003b00 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8003abe:	4828      	ldr	r0, [pc, #160]	; (8003b60 <sys_clock_announce+0xc0>)
 8003ac0:	6801      	ldr	r1, [r0, #0]
 8003ac2:	6846      	ldr	r6, [r0, #4]
 8003ac4:	1889      	adds	r1, r1, r2
 8003ac6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 8003aca:	6001      	str	r1, [r0, #0]
 8003acc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <sys_clock_announce+0xbc>)
 8003ad2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8003adc:	4620      	mov	r0, r4
 8003ade:	f001 ff20 	bl	8005922 <remove_timeout>
	__asm__ volatile(
 8003ae2:	f385 8811 	msr	BASEPRI, r5
 8003ae6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	4620      	mov	r0, r4
 8003aee:	4798      	blx	r3
	__asm__ volatile(
 8003af0:	f04f 0310 	mov.w	r3, #16
 8003af4:	f3ef 8511 	mrs	r5, BASEPRI
 8003af8:	f383 8812 	msr	BASEPRI_MAX, r3
 8003afc:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8003b00:	f7ff fef8 	bl	80038f4 <first>
 8003b04:	4604      	mov	r4, r0
 8003b06:	b140      	cbz	r0, 8003b1a <sys_clock_announce+0x7a>
 8003b08:	6902      	ldr	r2, [r0, #16]
 8003b0a:	6941      	ldr	r1, [r0, #20]
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <sys_clock_announce+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	17d8      	asrs	r0, r3, #31
 8003b12:	4293      	cmp	r3, r2
 8003b14:	eb70 0101 	sbcs.w	r1, r0, r1
 8003b18:	dad1      	bge.n	8003abe <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8003b1a:	b144      	cbz	r4, 8003b2e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <sys_clock_announce+0xbc>)
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	6962      	ldr	r2, [r4, #20]
 8003b24:	1a5b      	subs	r3, r3, r1
 8003b26:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <sys_clock_announce+0xc0>)
 8003b30:	4e0a      	ldr	r6, [pc, #40]	; (8003b5c <sys_clock_announce+0xbc>)
 8003b32:	6830      	ldr	r0, [r6, #0]
 8003b34:	6813      	ldr	r3, [r2, #0]
 8003b36:	6851      	ldr	r1, [r2, #4]
 8003b38:	181b      	adds	r3, r3, r0
 8003b3a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 8003b42:	2400      	movs	r4, #0
 8003b44:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8003b46:	f7ff fef7 	bl	8003938 <next_timeout>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	f7fe fde6 	bl	800271c <sys_clock_set_timeout>
	__asm__ volatile(
 8003b50:	f385 8811 	msr	BASEPRI, r5
 8003b54:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000b78 	.word	0x20000b78
 8003b60:	20000418 	.word	0x20000418

08003b64 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8003b64:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8003b66:	2300      	movs	r3, #0
	__asm__ volatile(
 8003b68:	f04f 0210 	mov.w	r2, #16
 8003b6c:	f3ef 8411 	mrs	r4, BASEPRI
 8003b70:	f382 8812 	msr	BASEPRI_MAX, r2
 8003b74:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8003b78:	4618      	mov	r0, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	e00c      	b.n	8003b98 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 8003b7e:	f7fe fe4d 	bl	800281c <sys_clock_elapsed>
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <sys_clock_tick_get+0x3c>)
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	6851      	ldr	r1, [r2, #4]
 8003b88:	18c0      	adds	r0, r0, r3
 8003b8a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8003b8e:	f384 8811 	msr	BASEPRI, r4
 8003b92:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8003b96:	2301      	movs	r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000418 	.word	0x20000418

08003ba4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8003ba4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8003ba6:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <boot_banner+0x10>)
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <boot_banner+0x14>)
 8003baa:	4804      	ldr	r0, [pc, #16]	; (8003bbc <boot_banner+0x18>)
 8003bac:	f000 f825 	bl	8003bfa <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8003bb0:	bd08      	pop	{r3, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08005e7c 	.word	0x08005e7c
 8003bb8:	0800627c 	.word	0x0800627c
 8003bbc:	0800628c 	.word	0x0800628c

08003bc0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <k_sys_work_q_init+0x28>)
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	2400      	movs	r4, #0
 8003bca:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8003bce:	ab02      	add	r3, sp, #8
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <k_sys_work_q_init+0x2c>)
 8003bdc:	4804      	ldr	r0, [pc, #16]	; (8003bf0 <k_sys_work_q_init+0x30>)
 8003bde:	f7ff faa5 	bl	800312c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8003be2:	4620      	mov	r0, r4
 8003be4:	b004      	add	sp, #16
 8003be6:	bd10      	pop	{r4, pc}
 8003be8:	080062b4 	.word	0x080062b4
 8003bec:	200018e0 	.word	0x200018e0
 8003bf0:	20000420 	.word	0x20000420

08003bf4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8003bf4:	4770      	bx	lr

08003bf6 <arch_printk_char_out>:
}
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	4770      	bx	lr

08003bfa <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 8003bfa:	b40f      	push	{r0, r1, r2, r3}
 8003bfc:	b500      	push	{lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	a904      	add	r1, sp, #16
 8003c02:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003c06:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8003c08:	f7fc fcec 	bl	80005e4 <vprintk>
	}
	va_end(ap);
}
 8003c0c:	b003      	add	sp, #12
 8003c0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c12:	b004      	add	sp, #16
 8003c14:	4770      	bx	lr

08003c16 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003c16:	b508      	push	{r3, lr}
 8003c18:	4604      	mov	r4, r0
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8003c1e:	461a      	mov	r2, r3
 8003c20:	47a0      	blx	r4
	return z_impl_z_current_get();
 8003c22:	f7ff fe0b 	bl	800383c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8003c26:	f7fd fc39 	bl	800149c <z_impl_k_thread_abort>

08003c2a <extract_decimal>:
{
 8003c2a:	4684      	mov	ip, r0
	const char *sp = *str;
 8003c2c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8003c2e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
 8003c30:	e005      	b.n	8003c3e <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8003c32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c36:	3201      	adds	r2, #1
 8003c38:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003c3c:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8003c3e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8003c40:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003c44:	2909      	cmp	r1, #9
 8003c46:	d9f4      	bls.n	8003c32 <extract_decimal+0x8>
	*str = sp;
 8003c48:	f8cc 2000 	str.w	r2, [ip]
}
 8003c4c:	4770      	bx	lr

08003c4e <encode_uint>:
{
 8003c4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c52:	b083      	sub	sp, #12
 8003c54:	4604      	mov	r4, r0
 8003c56:	460d      	mov	r5, r1
 8003c58:	9201      	str	r2, [sp, #4]
 8003c5a:	469a      	mov	sl, r3
 8003c5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8003c5e:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003c60:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8003c64:	2b6f      	cmp	r3, #111	; 0x6f
 8003c66:	d00f      	beq.n	8003c88 <encode_uint+0x3a>
 8003c68:	d906      	bls.n	8003c78 <encode_uint+0x2a>
 8003c6a:	2b70      	cmp	r3, #112	; 0x70
 8003c6c:	d00f      	beq.n	8003c8e <encode_uint+0x40>
 8003c6e:	2b78      	cmp	r3, #120	; 0x78
 8003c70:	d110      	bne.n	8003c94 <encode_uint+0x46>
		return 16;
 8003c72:	f04f 0910 	mov.w	r9, #16
 8003c76:	e026      	b.n	8003cc6 <encode_uint+0x78>
	switch (specifier) {
 8003c78:	2b58      	cmp	r3, #88	; 0x58
 8003c7a:	d002      	beq.n	8003c82 <encode_uint+0x34>
 8003c7c:	f04f 090a 	mov.w	r9, #10
 8003c80:	e021      	b.n	8003cc6 <encode_uint+0x78>
		return 16;
 8003c82:	f04f 0910 	mov.w	r9, #16
 8003c86:	e01e      	b.n	8003cc6 <encode_uint+0x78>
		return 8;
 8003c88:	f04f 0908 	mov.w	r9, #8
 8003c8c:	e01b      	b.n	8003cc6 <encode_uint+0x78>
		return 16;
 8003c8e:	f04f 0910 	mov.w	r9, #16
 8003c92:	e018      	b.n	8003cc6 <encode_uint+0x78>
	switch (specifier) {
 8003c94:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
 8003c98:	e015      	b.n	8003cc6 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003c9a:	f1bb 0f19 	cmp.w	fp, #25
 8003c9e:	d821      	bhi.n	8003ce4 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003ca0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003ca2:	3237      	adds	r2, #55	; 0x37
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
 8003caa:	463a      	mov	r2, r7
 8003cac:	4643      	mov	r3, r8
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f7fc fa37 	bl	8000124 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8003cb6:	42bc      	cmp	r4, r7
 8003cb8:	f175 0300 	sbcs.w	r3, r5, #0
 8003cbc:	d316      	bcc.n	8003cec <encode_uint+0x9e>
 8003cbe:	4556      	cmp	r6, sl
 8003cc0:	d914      	bls.n	8003cec <encode_uint+0x9e>
		value /= radix;
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8003cc6:	f04f 0800 	mov.w	r8, #0
 8003cca:	464f      	mov	r7, r9
 8003ccc:	464a      	mov	r2, r9
 8003cce:	4643      	mov	r3, r8
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fa26 	bl	8000124 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003cd8:	2a09      	cmp	r2, #9
 8003cda:	d8de      	bhi.n	8003c9a <encode_uint+0x4c>
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	3230      	adds	r2, #48	; 0x30
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	e7e0      	b.n	8003ca6 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003ce4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003ce6:	3257      	adds	r2, #87	; 0x57
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	e7dc      	b.n	8003ca6 <encode_uint+0x58>
	if (conv->flag_hash) {
 8003cec:	9b01      	ldr	r3, [sp, #4]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f013 0f20 	tst.w	r3, #32
 8003cf4:	d005      	beq.n	8003d02 <encode_uint+0xb4>
		if (radix == 8) {
 8003cf6:	f1b9 0f08 	cmp.w	r9, #8
 8003cfa:	d006      	beq.n	8003d0a <encode_uint+0xbc>
		} else if (radix == 16) {
 8003cfc:	f1b9 0f10 	cmp.w	r9, #16
 8003d00:	d009      	beq.n	8003d16 <encode_uint+0xc8>
}
 8003d02:	4630      	mov	r0, r6
 8003d04:	b003      	add	sp, #12
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8003d0a:	9a01      	ldr	r2, [sp, #4]
 8003d0c:	7893      	ldrb	r3, [r2, #2]
 8003d0e:	f043 0308 	orr.w	r3, r3, #8
 8003d12:	7093      	strb	r3, [r2, #2]
 8003d14:	e7f5      	b.n	8003d02 <encode_uint+0xb4>
			conv->altform_0c = true;
 8003d16:	9a01      	ldr	r2, [sp, #4]
 8003d18:	7893      	ldrb	r3, [r2, #2]
 8003d1a:	f043 0310 	orr.w	r3, r3, #16
 8003d1e:	7093      	strb	r3, [r2, #2]
 8003d20:	e7ef      	b.n	8003d02 <encode_uint+0xb4>

08003d22 <outs>:
{
 8003d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d26:	4607      	mov	r7, r0
 8003d28:	460e      	mov	r6, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	4698      	mov	r8, r3
	size_t count = 0;
 8003d2e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003d30:	e006      	b.n	8003d40 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 8003d32:	4631      	mov	r1, r6
 8003d34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003d38:	47b8      	blx	r7
		if (rc < 0) {
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	db09      	blt.n	8003d52 <outs+0x30>
		++count;
 8003d3e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003d40:	4544      	cmp	r4, r8
 8003d42:	d3f6      	bcc.n	8003d32 <outs+0x10>
 8003d44:	f1b8 0f00 	cmp.w	r8, #0
 8003d48:	d102      	bne.n	8003d50 <outs+0x2e>
 8003d4a:	7823      	ldrb	r3, [r4, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <outs+0x10>
	return (int)count;
 8003d50:	4628      	mov	r0, r5
}
 8003d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d56 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003d56:	4770      	bx	lr

08003d58 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8003d58:	2000      	movs	r0, #0
 8003d5a:	4770      	bx	lr

08003d5c <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8003d5c:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 8003d5e:	f7fd f8fd 	bl	8000f5c <__do_global_ctors_aux>
	__do_init_array_aux();
 8003d62:	f7fd f8ed 	bl	8000f40 <__do_init_array_aux>
}
 8003d66:	bd08      	pop	{r3, pc}

08003d68 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	461e      	mov	r6, r3
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
 8003d6e:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8003d72:	f000 f8a8 	bl	8003ec6 <stream_flash_buffered_write>
 8003d76:	4605      	mov	r5, r0
	if (!flush) {
 8003d78:	b90e      	cbnz	r6, 8003d7e <flash_img_buffered_write+0x16>

	flash_area_close(ctx->flash_area);
	ctx->flash_area = NULL;

	return rc;
}
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
	flash_area_close(ctx->flash_area);
 8003d7e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8003d82:	f000 f804 	bl	8003d8e <flash_area_close>
	ctx->flash_area = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
	return rc;
 8003d8c:	e7f5      	b.n	8003d7a <flash_img_buffered_write+0x12>

08003d8e <flash_area_close>:
}

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
 8003d8e:	4770      	bx	lr

08003d90 <stream_flash_erase_page>:
#endif /* CONFIG_STREAM_FLASH_PROGRESS */

#ifdef CONFIG_STREAM_FLASH_ERASE

int stream_flash_erase_page(struct stream_flash_ctx *ctx, off_t off)
{
 8003d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d94:	b085      	sub	sp, #20
 8003d96:	4604      	mov	r4, r0
	int rc;
	struct flash_pages_info page;

	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
 8003d98:	68c0      	ldr	r0, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 8003d9a:	aa01      	add	r2, sp, #4
 8003d9c:	f000 fe48 	bl	8004a30 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
 8003da0:	4605      	mov	r5, r0
 8003da2:	bb00      	cbnz	r0, 8003de6 <stream_flash_erase_page+0x56>
		LOG_ERR("Error %d while getting page info", rc);
		return rc;
	}

	if (ctx->last_erased_page_start_offset == page.start_offset) {
 8003da4:	6a23      	ldr	r3, [r4, #32]
 8003da6:	9f01      	ldr	r7, [sp, #4]
 8003da8:	42bb      	cmp	r3, r7
 8003daa:	d01c      	beq.n	8003de6 <stream_flash_erase_page+0x56>
		return 0;
	}

	LOG_DBG("Erasing page at offset 0x%08lx", (long)page.start_offset);

	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
 8003dac:	68e6      	ldr	r6, [r4, #12]
 8003dae:	f8dd 9008 	ldr.w	r9, [sp, #8]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
 8003db2:	f8d6 8008 	ldr.w	r8, [r6, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
 8003db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003dba:	b123      	cbz	r3, 8003dc6 <stream_flash_erase_page+0x36>
		rc = api->write_protection(dev, false);
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	4798      	blx	r3
		if (rc) {
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	b960      	cbnz	r0, 8003de0 <stream_flash_erase_page+0x50>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
 8003dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003dca:	464a      	mov	r2, r9
 8003dcc:	4639      	mov	r1, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4798      	blx	r3
 8003dd2:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
 8003dd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003dd8:	b113      	cbz	r3, 8003de0 <stream_flash_erase_page+0x50>
		(void) api->write_protection(dev, true);
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4798      	blx	r3

	if (rc != 0) {
 8003de0:	b90d      	cbnz	r5, 8003de6 <stream_flash_erase_page+0x56>
		LOG_ERR("Error %d while erasing page", rc);
	} else {
		ctx->last_erased_page_start_offset = page.start_offset;
 8003de2:	9b01      	ldr	r3, [sp, #4]
 8003de4:	6223      	str	r3, [r4, #32]
	}

	return rc;
}
 8003de6:	4628      	mov	r0, r5
 8003de8:	b005      	add	sp, #20
 8003dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003dee <flash_sync>:

#endif /* CONFIG_STREAM_FLASH_ERASE */

static int flash_sync(struct stream_flash_ctx *ctx)
{
 8003dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int rc = 0;
	size_t write_addr = ctx->offset + ctx->bytes_written;
 8003df2:	6946      	ldr	r6, [r0, #20]
 8003df4:	6903      	ldr	r3, [r0, #16]
 8003df6:	441e      	add	r6, r3
	size_t buf_bytes_aligned;
	size_t fill_length;
	uint8_t filler;


	if (ctx->buf_bytes == 0) {
 8003df8:	6881      	ldr	r1, [r0, #8]
 8003dfa:	b919      	cbnz	r1, 8003e04 <flash_sync+0x16>
		return 0;
 8003dfc:	2500      	movs	r5, #0

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
 8003dfe:	4628      	mov	r0, r5
 8003e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e04:	4604      	mov	r4, r0
					     write_addr + ctx->buf_bytes - 1);
 8003e06:	4431      	add	r1, r6
		rc = stream_flash_erase_page(ctx,
 8003e08:	3901      	subs	r1, #1
 8003e0a:	f7ff ffc1 	bl	8003d90 <stream_flash_erase_page>
		if (rc < 0) {
 8003e0e:	1e05      	subs	r5, r0, #0
 8003e10:	dbf5      	blt.n	8003dfe <flash_sync+0x10>
	fill_length = flash_get_write_block_size(ctx->fdev);
 8003e12:	68e0      	ldr	r0, [r4, #12]
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
 8003e14:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4798      	blx	r3
 8003e1a:	6803      	ldr	r3, [r0, #0]
	if (ctx->buf_bytes % fill_length) {
 8003e1c:	68a5      	ldr	r5, [r4, #8]
 8003e1e:	fbb5 f2f3 	udiv	r2, r5, r3
 8003e22:	fb03 5512 	mls	r5, r3, r2, r5
 8003e26:	b15d      	cbz	r5, 8003e40 <flash_sync+0x52>
		fill_length -= ctx->buf_bytes % fill_length;
 8003e28:	1b5d      	subs	r5, r3, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
 8003e2a:	68e0      	ldr	r0, [r4, #12]
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
 8003e2c:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
 8003e32:	6827      	ldr	r7, [r4, #0]
 8003e34:	68a3      	ldr	r3, [r4, #8]
 8003e36:	462a      	mov	r2, r5
 8003e38:	7901      	ldrb	r1, [r0, #4]
 8003e3a:	18f8      	adds	r0, r7, r3
 8003e3c:	f000 f9ca 	bl	80041d4 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	eb03 0805 	add.w	r8, r3, r5
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
 8003e46:	68e7      	ldr	r7, [r4, #12]
 8003e48:	f8d4 a000 	ldr.w	sl, [r4]
	const struct flash_driver_api *api =
 8003e4c:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
 8003e50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003e54:	b123      	cbz	r3, 8003e60 <flash_sync+0x72>
		rc = api->write_protection(dev, false);
 8003e56:	2100      	movs	r1, #0
 8003e58:	4638      	mov	r0, r7
 8003e5a:	4798      	blx	r3
		if (rc) {
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b968      	cbnz	r0, 8003e7c <flash_sync+0x8e>
	rc = api->write(dev, offset, data, len);
 8003e60:	4643      	mov	r3, r8
 8003e62:	4652      	mov	r2, sl
 8003e64:	4631      	mov	r1, r6
 8003e66:	4638      	mov	r0, r7
 8003e68:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8003e6c:	47a8      	blx	r5
 8003e6e:	4605      	mov	r5, r0
	if (api->write_protection != NULL) {
 8003e70:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003e74:	b113      	cbz	r3, 8003e7c <flash_sync+0x8e>
		(void) api->write_protection(dev, true);
 8003e76:	2101      	movs	r1, #1
 8003e78:	4638      	mov	r0, r7
 8003e7a:	4798      	blx	r3
	if (rc != 0) {
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	d1be      	bne.n	8003dfe <flash_sync+0x10>
	if (ctx->callback) {
 8003e80:	69e3      	ldr	r3, [r4, #28]
 8003e82:	b92b      	cbnz	r3, 8003e90 <flash_sync+0xa2>
 8003e84:	e018      	b.n	8003eb8 <flash_sync+0xca>
			ctx->buf[i] = ~ctx->buf[i];
 8003e86:	6820      	ldr	r0, [r4, #0]
 8003e88:	5d43      	ldrb	r3, [r0, r5]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	5543      	strb	r3, [r0, r5]
		for (int i = 0; i < ctx->buf_bytes; i++) {
 8003e8e:	3501      	adds	r5, #1
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	42ab      	cmp	r3, r5
 8003e94:	d8f7      	bhi.n	8003e86 <flash_sync+0x98>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
 8003e96:	68e0      	ldr	r0, [r4, #12]
 8003e98:	6822      	ldr	r2, [r4, #0]
	const struct flash_driver_api *api =
 8003e9a:	6881      	ldr	r1, [r0, #8]
	return api->read(dev, offset, data, len);
 8003e9c:	680d      	ldr	r5, [r1, #0]
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	47a8      	blx	r5
		if (rc != 0) {
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d1aa      	bne.n	8003dfe <flash_sync+0x10>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
 8003ea8:	69e3      	ldr	r3, [r4, #28]
 8003eaa:	4632      	mov	r2, r6
 8003eac:	68a1      	ldr	r1, [r4, #8]
 8003eae:	6820      	ldr	r0, [r4, #0]
 8003eb0:	4798      	blx	r3
		if (rc != 0) {
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d1a2      	bne.n	8003dfe <flash_sync+0x10>
	ctx->bytes_written += ctx->buf_bytes;
 8003eb8:	68a2      	ldr	r2, [r4, #8]
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60a3      	str	r3, [r4, #8]
	return rc;
 8003ec4:	e79b      	b.n	8003dfe <flash_sync+0x10>

08003ec6 <stream_flash_buffered_write>:

int stream_flash_buffered_write(struct stream_flash_ctx *ctx, const uint8_t *data,
				size_t len, bool flush)
{
 8003ec6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int processed = 0;
	int rc = 0;
	int buf_empty_bytes;

	if (!ctx) {
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d03e      	beq.n	8003f4c <stream_flash_buffered_write+0x86>
 8003ece:	468a      	mov	sl, r1
 8003ed0:	4690      	mov	r8, r2
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
 8003ed6:	6903      	ldr	r3, [r0, #16]
 8003ed8:	6882      	ldr	r2, [r0, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	4443      	add	r3, r8
 8003ede:	6982      	ldr	r2, [r0, #24]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d836      	bhi.n	8003f52 <stream_flash_buffered_write+0x8c>
	int rc = 0;
 8003ee4:	f04f 0900 	mov.w	r9, #0
	int processed = 0;
 8003ee8:	464e      	mov	r6, r9
		return -ENOMEM;
	}

	while ((len - processed) >=
 8003eea:	4631      	mov	r1, r6
 8003eec:	eba8 0706 	sub.w	r7, r8, r6
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
 8003ef0:	6865      	ldr	r5, [r4, #4]
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	1aed      	subs	r5, r5, r3
	while ((len - processed) >=
 8003ef6:	42af      	cmp	r7, r5
 8003ef8:	d30f      	bcc.n	8003f1a <stream_flash_buffered_write+0x54>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	462a      	mov	r2, r5
 8003efe:	eb0a 0106 	add.w	r1, sl, r6
 8003f02:	4418      	add	r0, r3
 8003f04:	f000 f937 	bl	8004176 <memcpy>
		       buf_empty_bytes);

		ctx->buf_bytes = ctx->buf_len;
 8003f08:	6863      	ldr	r3, [r4, #4]
 8003f0a:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f7ff ff6e 	bl	8003dee <flash_sync>

		if (rc != 0) {
 8003f12:	4681      	mov	r9, r0
 8003f14:	b940      	cbnz	r0, 8003f28 <stream_flash_buffered_write+0x62>
			return rc;
		}

		processed += buf_empty_bytes;
 8003f16:	442e      	add	r6, r5
 8003f18:	e7e7      	b.n	8003eea <stream_flash_buffered_write+0x24>
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
 8003f1a:	4546      	cmp	r6, r8
 8003f1c:	d307      	bcc.n	8003f2e <stream_flash_buffered_write+0x68>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
	}

	if (flush && ctx->buf_bytes > 0) {
 8003f1e:	f1bb 0f00 	cmp.w	fp, #0
 8003f22:	d001      	beq.n	8003f28 <stream_flash_buffered_write+0x62>
 8003f24:	68a3      	ldr	r3, [r4, #8]
 8003f26:	b963      	cbnz	r3, 8003f42 <stream_flash_buffered_write+0x7c>
		rc = flash_sync(ctx);
	}

	return rc;
}
 8003f28:	4648      	mov	r0, r9
 8003f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(ctx->buf + ctx->buf_bytes,
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	463a      	mov	r2, r7
 8003f32:	4451      	add	r1, sl
 8003f34:	4418      	add	r0, r3
 8003f36:	f000 f91e 	bl	8004176 <memcpy>
		ctx->buf_bytes += len - processed;
 8003f3a:	68a3      	ldr	r3, [r4, #8]
 8003f3c:	443b      	add	r3, r7
 8003f3e:	60a3      	str	r3, [r4, #8]
 8003f40:	e7ed      	b.n	8003f1e <stream_flash_buffered_write+0x58>
		rc = flash_sync(ctx);
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff ff53 	bl	8003dee <flash_sync>
 8003f48:	4681      	mov	r9, r0
 8003f4a:	e7ed      	b.n	8003f28 <stream_flash_buffered_write+0x62>
		return -EFAULT;
 8003f4c:	f06f 090d 	mvn.w	r9, #13
 8003f50:	e7ea      	b.n	8003f28 <stream_flash_buffered_write+0x62>
		return -ENOMEM;
 8003f52:	f06f 090b 	mvn.w	r9, #11
 8003f56:	e7e7      	b.n	8003f28 <stream_flash_buffered_write+0x62>

08003f58 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8003f5a:	b329      	cbz	r1, 8003fa8 <stm32_dt_pinctrl_configure+0x50>
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 8003f60:	2400      	movs	r4, #0
	uint32_t func = 0;
 8003f62:	4625      	mov	r5, r4
 8003f64:	e00f      	b.n	8003f86 <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8003f66:	b2d3      	uxtb	r3, r2
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d019      	beq.n	8003fa0 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8003f6c:	0b13      	lsrs	r3, r2, #12
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4318      	orrs	r0, r3
 8003f7c:	f7fc fffe 	bl	8000f7c <stm32_pin_configure>
		if (ret != 0) {
 8003f80:	4603      	mov	r3, r0
 8003f82:	b990      	cbnz	r0, 8003faa <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 8003f84:	3401      	adds	r4, #1
 8003f86:	42bc      	cmp	r4, r7
 8003f88:	d20c      	bcs.n	8003fa4 <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 8003f8a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8003f8e:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003f92:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8003f96:	d1e6      	bne.n	8003f66 <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8003f98:	685d      	ldr	r5, [r3, #4]
 8003f9a:	f045 0520 	orr.w	r5, r5, #32
 8003f9e:	e7e5      	b.n	8003f6c <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 8003fa0:	2530      	movs	r5, #48	; 0x30
 8003fa2:	e7e3      	b.n	8003f6c <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <stm32_dt_pinctrl_configure+0x52>
		return 0;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fae <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003fae:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003fb0:	f001 fa56 	bl	8005460 <z_fatal_error>
}
 8003fb4:	bd08      	pop	{r3, pc}

08003fb6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8003fb6:	b508      	push	{r3, lr}
 8003fb8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8003fba:	6800      	ldr	r0, [r0, #0]
 8003fbc:	f7ff fff7 	bl	8003fae <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8003fc0:	bd08      	pop	{r3, pc}

08003fc2 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 8003fc2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f7ff fff1 	bl	8003fae <z_arm_fatal_error>
}
 8003fcc:	bd08      	pop	{r3, pc}

08003fce <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8003fce:	b508      	push	{r3, lr}
	handler();
 8003fd0:	f7fd f832 	bl	8001038 <z_SysNmiOnReset>
	z_arm_int_exit();
 8003fd4:	f7fd f910 	bl	80011f8 <z_arm_exc_exit>
}
 8003fd8:	bd08      	pop	{r3, pc}

08003fda <memory_fault_recoverable>:
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4770      	bx	lr

08003fde <debug_monitor>:
	*recoverable = false;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	700b      	strb	r3, [r1, #0]
}
 8003fe2:	4770      	bx	lr

08003fe4 <fault_handle>:
{
 8003fe4:	b508      	push	{r3, lr}
	*recoverable = false;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 8003fea:	1ecb      	subs	r3, r1, #3
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	d81a      	bhi.n	8004026 <fault_handle+0x42>
 8003ff0:	e8df f003 	tbb	[pc, r3]
 8003ff4:	110d0905 	.word	0x110d0905
 8003ff8:	19191919 	.word	0x19191919
 8003ffc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
 8003ffe:	4611      	mov	r1, r2
 8004000:	f7fd f982 	bl	8001308 <hard_fault>
		break;
 8004004:	e010      	b.n	8004028 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
 8004006:	2100      	movs	r1, #0
 8004008:	f7fd f93a 	bl	8001280 <mem_manage_fault>
		break;
 800400c:	e00c      	b.n	8004028 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
 800400e:	2100      	movs	r1, #0
 8004010:	f7fd f900 	bl	8001214 <bus_fault>
		break;
 8004014:	e008      	b.n	8004028 <fault_handle+0x44>
		reason = usage_fault(esf);
 8004016:	f7fd f921 	bl	800125c <usage_fault>
		break;
 800401a:	e005      	b.n	8004028 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
 800401c:	4611      	mov	r1, r2
 800401e:	f7ff ffde 	bl	8003fde <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004022:	2000      	movs	r0, #0
		break;
 8004024:	e000      	b.n	8004028 <fault_handle+0x44>
	switch (fault) {
 8004026:	2000      	movs	r0, #0
}
 8004028:	bd08      	pop	{r3, pc}

0800402a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800402a:	6843      	ldr	r3, [r0, #4]
 800402c:	1e5a      	subs	r2, r3, #1
		&&
 800402e:	4213      	tst	r3, r2
 8004030:	d106      	bne.n	8004040 <mpu_partition_is_valid+0x16>
		&&
 8004032:	2b1f      	cmp	r3, #31
 8004034:	d906      	bls.n	8004044 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 8004036:	6803      	ldr	r3, [r0, #0]
		&&
 8004038:	421a      	tst	r2, r3
 800403a:	d005      	beq.n	8004048 <mpu_partition_is_valid+0x1e>
 800403c:	2000      	movs	r0, #0
 800403e:	4770      	bx	lr
 8004040:	2000      	movs	r0, #0
 8004042:	4770      	bx	lr
 8004044:	2000      	movs	r0, #0
 8004046:	4770      	bx	lr
 8004048:	2001      	movs	r0, #1
}
 800404a:	4770      	bx	lr

0800404c <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
 800404c:	2807      	cmp	r0, #7
 800404e:	d805      	bhi.n	800405c <region_allocate_and_init+0x10>
{
 8004050:	b510      	push	{r4, lr}
 8004052:	4604      	mov	r4, r0
	region_init(index, region_conf);
 8004054:	f7fd fa58 	bl	8001508 <region_init>
	return index;
 8004058:	4620      	mov	r0, r4
}
 800405a:	bd10      	pop	{r4, pc}
		return -EINVAL;
 800405c:	f06f 0015 	mvn.w	r0, #21
}
 8004060:	4770      	bx	lr

08004062 <mpu_configure_region>:
{
 8004062:	b500      	push	{lr}
 8004064:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 8004066:	680b      	ldr	r3, [r1, #0]
 8004068:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800406a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800406c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800406e:	2b20      	cmp	r3, #32
 8004070:	d912      	bls.n	8004098 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 8004072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004076:	d811      	bhi.n	800409c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8004078:	3b01      	subs	r3, #1
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	f1c3 031f 	rsb	r3, r3, #31
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8004088:	4313      	orrs	r3, r2
 800408a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800408c:	a901      	add	r1, sp, #4
 800408e:	f7ff ffdd 	bl	800404c <region_allocate_and_init>
}
 8004092:	b005      	add	sp, #20
 8004094:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 8004098:	2308      	movs	r3, #8
 800409a:	e7f5      	b.n	8004088 <mpu_configure_region+0x26>
		return REGION_4G;
 800409c:	233e      	movs	r3, #62	; 0x3e
 800409e:	e7f3      	b.n	8004088 <mpu_configure_region+0x26>

080040a0 <mpu_configure_regions>:
{
 80040a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a4:	4680      	mov	r8, r0
 80040a6:	460f      	mov	r7, r1
 80040a8:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
 80040aa:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
 80040ac:	2500      	movs	r5, #0
 80040ae:	e009      	b.n	80040c4 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80040b0:	4621      	mov	r1, r4
 80040b2:	b2f0      	uxtb	r0, r6
 80040b4:	f7ff ffd5 	bl	8004062 <mpu_configure_region>
 80040b8:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
 80040ba:	f110 0f16 	cmn.w	r0, #22
 80040be:	d014      	beq.n	80040ea <mpu_configure_regions+0x4a>
		reg_index++;
 80040c0:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 80040c2:	3501      	adds	r5, #1
 80040c4:	42bd      	cmp	r5, r7
 80040c6:	da10      	bge.n	80040ea <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 80040c8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80040cc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80040d0:	6862      	ldr	r2, [r4, #4]
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	d0f5      	beq.n	80040c2 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 80040d6:	f1b9 0f00 	cmp.w	r9, #0
 80040da:	d0e9      	beq.n	80040b0 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 80040dc:	4620      	mov	r0, r4
 80040de:	f7ff ffa4 	bl	800402a <mpu_partition_is_valid>
		if (do_sanity_check &&
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d1e4      	bne.n	80040b0 <mpu_configure_regions+0x10>
			return -EINVAL;
 80040e6:	f06f 0615 	mvn.w	r6, #21
}
 80040ea:	4630      	mov	r0, r6
 80040ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080040f0 <arm_core_mpu_configure_static_mpu_regions>:
{
 80040f0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 80040f2:	f7fd fa1d 	bl	8001530 <mpu_configure_static_mpu_regions>
}
 80040f6:	bd08      	pop	{r3, pc}

080040f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80040f8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 80040fa:	f7fd fa23 	bl	8001544 <mpu_configure_dynamic_mpu_regions>
}
 80040fe:	bd08      	pop	{r3, pc}

08004100 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8004100:	4602      	mov	r2, r0
 8004102:	e002      	b.n	800410a <strcpy+0xa>
		*d = *s;
 8004104:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
 8004108:	3101      	adds	r1, #1
	while (*s != '\0') {
 800410a:	780b      	ldrb	r3, [r1, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f9      	bne.n	8004104 <strcpy+0x4>
	}

	*d = '\0';
 8004110:	7013      	strb	r3, [r2, #0]

	return dest;
}
 8004112:	4770      	bx	lr

08004114 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8004114:	4603      	mov	r3, r0
	size_t n = 0;
 8004116:	2000      	movs	r0, #0

	while (*s != '\0') {
 8004118:	e001      	b.n	800411e <strlen+0xa>
		s++;
 800411a:	3301      	adds	r3, #1
		n++;
 800411c:	3001      	adds	r0, #1
	while (*s != '\0') {
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	2a00      	cmp	r2, #0
 8004122:	d1fa      	bne.n	800411a <strlen+0x6>
	}

	return n;
}
 8004124:	4770      	bx	lr

08004126 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8004126:	4603      	mov	r3, r0
	size_t n = 0;
 8004128:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 800412a:	e001      	b.n	8004130 <strnlen+0xa>
		s++;
 800412c:	3301      	adds	r3, #1
		n++;
 800412e:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	b10a      	cbz	r2, 8004138 <strnlen+0x12>
 8004134:	4288      	cmp	r0, r1
 8004136:	d3f9      	bcc.n	800412c <strnlen+0x6>
	}

	return n;
}
 8004138:	4770      	bx	lr

0800413a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 800413a:	e001      	b.n	8004140 <strcmp+0x6>
		s1++;
 800413c:	3001      	adds	r0, #1
		s2++;
 800413e:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8004140:	7803      	ldrb	r3, [r0, #0]
 8004142:	780a      	ldrb	r2, [r1, #0]
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <strcmp+0x12>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f7      	bne.n	800413c <strcmp+0x2>
	}

	return *s1 - *s2;
}
 800414c:	1a98      	subs	r0, r3, r2
 800414e:	4770      	bx	lr

08004150 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8004150:	e002      	b.n	8004158 <strncmp+0x8>
		s1++;
 8004152:	3001      	adds	r0, #1
		s2++;
 8004154:	3101      	adds	r1, #1
		n--;
 8004156:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8004158:	b132      	cbz	r2, 8004168 <strncmp+0x18>
 800415a:	7803      	ldrb	r3, [r0, #0]
 800415c:	f891 c000 	ldrb.w	ip, [r1]
 8004160:	4563      	cmp	r3, ip
 8004162:	d101      	bne.n	8004168 <strncmp+0x18>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f4      	bne.n	8004152 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8004168:	b11a      	cbz	r2, 8004172 <strncmp+0x22>
 800416a:	7800      	ldrb	r0, [r0, #0]
 800416c:	780b      	ldrb	r3, [r1, #0]
 800416e:	1ac0      	subs	r0, r0, r3
 8004170:	4770      	bx	lr
 8004172:	2000      	movs	r0, #0
}
 8004174:	4770      	bx	lr

08004176 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8004176:	ea80 0301 	eor.w	r3, r0, r1
 800417a:	f013 0f03 	tst.w	r3, #3
 800417e:	d001      	beq.n	8004184 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
 8004180:	4603      	mov	r3, r0
 8004182:	e023      	b.n	80041cc <memcpy+0x56>
 8004184:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
 8004186:	f013 0f03 	tst.w	r3, #3
 800418a:	d00f      	beq.n	80041ac <memcpy+0x36>
			if (n == 0) {
 800418c:	b30a      	cbz	r2, 80041d2 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
 800418e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8004192:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
 8004196:	3a01      	subs	r2, #1
 8004198:	e7f5      	b.n	8004186 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
 800419a:	f811 cb01 	ldrb.w	ip, [r1], #1
 800419e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
 80041a2:	3a01      	subs	r2, #1
	while (n > 0) {
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d1f8      	bne.n	800419a <memcpy+0x24>
	}

	return d;
}
 80041a8:	bc10      	pop	{r4}
 80041aa:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
 80041ac:	2a03      	cmp	r2, #3
 80041ae:	d90d      	bls.n	80041cc <memcpy+0x56>
{
 80041b0:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
 80041b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80041b6:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
 80041ba:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
 80041bc:	2a03      	cmp	r2, #3
 80041be:	d8f8      	bhi.n	80041b2 <memcpy+0x3c>
 80041c0:	e7f0      	b.n	80041a4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
 80041c2:	f811 cb01 	ldrb.w	ip, [r1], #1
 80041c6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
 80041ca:	3a01      	subs	r2, #1
	while (n > 0) {
 80041cc:	2a00      	cmp	r2, #0
 80041ce:	d1f8      	bne.n	80041c2 <memcpy+0x4c>
 80041d0:	4770      	bx	lr
}
 80041d2:	4770      	bx	lr

080041d4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80041d4:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
 80041d8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 80041da:	e002      	b.n	80041e2 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
 80041dc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
 80041e0:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 80041e2:	f013 0f03 	tst.w	r3, #3
 80041e6:	d002      	beq.n	80041ee <memset+0x1a>
		if (n == 0) {
 80041e8:	2a00      	cmp	r2, #0
 80041ea:	d1f7      	bne.n	80041dc <memset+0x8>
 80041ec:	e00f      	b.n	800420e <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
 80041ee:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
 80041f0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
 80041f4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 80041f8:	2a03      	cmp	r2, #3
 80041fa:	d906      	bls.n	800420a <memset+0x36>
		*(d_word++) = c_word;
 80041fc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
 8004200:	3a04      	subs	r2, #4
 8004202:	e7f9      	b.n	80041f8 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
 8004204:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
 8004208:	3a01      	subs	r2, #1
	while (n > 0) {
 800420a:	2a00      	cmp	r2, #0
 800420c:	d1fa      	bne.n	8004204 <memset+0x30>
	}

	return buf;
}
 800420e:	4770      	bx	lr

08004210 <_stdout_hook_default>:
}
 8004210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004214:	4770      	bx	lr

08004216 <__stm32_exti_isr_0>:
{
 8004216:	b508      	push	{r3, lr}
 8004218:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800421a:	2101      	movs	r1, #1
 800421c:	2000      	movs	r0, #0
 800421e:	f7fd f9e9 	bl	80015f4 <__stm32_exti_isr>
}
 8004222:	bd08      	pop	{r3, pc}

08004224 <__stm32_exti_isr_1>:
{
 8004224:	b508      	push	{r3, lr}
 8004226:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 8004228:	2102      	movs	r1, #2
 800422a:	2001      	movs	r0, #1
 800422c:	f7fd f9e2 	bl	80015f4 <__stm32_exti_isr>
}
 8004230:	bd08      	pop	{r3, pc}

08004232 <__stm32_exti_isr_2>:
{
 8004232:	b508      	push	{r3, lr}
 8004234:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8004236:	2103      	movs	r1, #3
 8004238:	2002      	movs	r0, #2
 800423a:	f7fd f9db 	bl	80015f4 <__stm32_exti_isr>
}
 800423e:	bd08      	pop	{r3, pc}

08004240 <__stm32_exti_isr_3>:
{
 8004240:	b508      	push	{r3, lr}
 8004242:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8004244:	2104      	movs	r1, #4
 8004246:	2003      	movs	r0, #3
 8004248:	f7fd f9d4 	bl	80015f4 <__stm32_exti_isr>
}
 800424c:	bd08      	pop	{r3, pc}

0800424e <__stm32_exti_isr_4>:
{
 800424e:	b508      	push	{r3, lr}
 8004250:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8004252:	2105      	movs	r1, #5
 8004254:	2004      	movs	r0, #4
 8004256:	f7fd f9cd 	bl	80015f4 <__stm32_exti_isr>
}
 800425a:	bd08      	pop	{r3, pc}

0800425c <__stm32_exti_isr_9_5>:
{
 800425c:	b508      	push	{r3, lr}
 800425e:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 8004260:	210a      	movs	r1, #10
 8004262:	2005      	movs	r0, #5
 8004264:	f7fd f9c6 	bl	80015f4 <__stm32_exti_isr>
}
 8004268:	bd08      	pop	{r3, pc}

0800426a <__stm32_exti_isr_15_10>:
{
 800426a:	b508      	push	{r3, lr}
 800426c:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800426e:	2110      	movs	r1, #16
 8004270:	200a      	movs	r0, #10
 8004272:	f7fd f9bf 	bl	80015f4 <__stm32_exti_isr>
}
 8004276:	bd08      	pop	{r3, pc}

08004278 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 8004278:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800427a:	2200      	movs	r2, #0
 800427c:	4611      	mov	r1, r2
 800427e:	2006      	movs	r0, #6
 8004280:	f7fc fec4 	bl	800100c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8004284:	2200      	movs	r2, #0
 8004286:	4611      	mov	r1, r2
 8004288:	2007      	movs	r0, #7
 800428a:	f7fc febf 	bl	800100c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800428e:	2200      	movs	r2, #0
 8004290:	4611      	mov	r1, r2
 8004292:	2008      	movs	r0, #8
 8004294:	f7fc feba 	bl	800100c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8004298:	2200      	movs	r2, #0
 800429a:	4611      	mov	r1, r2
 800429c:	2009      	movs	r0, #9
 800429e:	f7fc feb5 	bl	800100c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80042a2:	2200      	movs	r2, #0
 80042a4:	4611      	mov	r1, r2
 80042a6:	200a      	movs	r0, #10
 80042a8:	f7fc feb0 	bl	800100c <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80042ac:	2200      	movs	r2, #0
 80042ae:	4611      	mov	r1, r2
 80042b0:	2017      	movs	r0, #23
 80042b2:	f7fc feab 	bl	800100c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80042b6:	2200      	movs	r2, #0
 80042b8:	4611      	mov	r1, r2
 80042ba:	2028      	movs	r0, #40	; 0x28
 80042bc:	f7fc fea6 	bl	800100c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 80042c0:	bd08      	pop	{r3, pc}

080042c2 <stm32_exti_init>:
{
 80042c2:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 80042c4:	f7ff ffd8 	bl	8004278 <__stm32_exti_connect_irqs>
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	bd08      	pop	{r3, pc}

080042cc <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 80042cc:	2300      	movs	r3, #0
 80042ce:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 80042d0:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 80042d2:	6083      	str	r3, [r0, #8]
}
 80042d4:	4770      	bx	lr

080042d6 <get_bus_clock>:
}
 80042d6:	fbb0 f0f1 	udiv	r0, r0, r1
 80042da:	4770      	bx	lr

080042dc <config_pll_init>:
	pllinit->PLLMul = pll_mul(STM32_PLL_MULTIPLIER);
 80042dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042e0:	6003      	str	r3, [r0, #0]
	pllinit->PLLDiv = pll_div(STM32_PLL_DIVISOR);
 80042e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042e6:	6043      	str	r3, [r0, #4]
}
 80042e8:	4770      	bx	lr

080042ea <dma_stm32_get_priority>:
	switch (priority) {
 80042ea:	2803      	cmp	r0, #3
 80042ec:	d815      	bhi.n	800431a <dma_stm32_get_priority+0x30>
 80042ee:	e8df f000 	tbb	[pc, r0]
 80042f2:	0502      	.short	0x0502
 80042f4:	0f0a      	.short	0x0f0a
		*ll_priority = LL_DMA_PRIORITY_LOW;
 80042f6:	2000      	movs	r0, #0
 80042f8:	6008      	str	r0, [r1, #0]
		break;
 80042fa:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 80042fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004300:	600b      	str	r3, [r1, #0]
	return 0;
 8004302:	2000      	movs	r0, #0
		break;
 8004304:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8004306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800430a:	600b      	str	r3, [r1, #0]
	return 0;
 800430c:	2000      	movs	r0, #0
		break;
 800430e:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8004310:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004314:	600b      	str	r3, [r1, #0]
	return 0;
 8004316:	2000      	movs	r0, #0
		break;
 8004318:	4770      	bx	lr
	switch (priority) {
 800431a:	f06f 0015 	mvn.w	r0, #21
}
 800431e:	4770      	bx	lr

08004320 <dma_stm32_get_direction>:
	switch (direction) {
 8004320:	2801      	cmp	r0, #1
 8004322:	d009      	beq.n	8004338 <dma_stm32_get_direction+0x18>
 8004324:	2802      	cmp	r0, #2
 8004326:	d00b      	beq.n	8004340 <dma_stm32_get_direction+0x20>
 8004328:	b110      	cbz	r0, 8004330 <dma_stm32_get_direction+0x10>
 800432a:	f06f 0015 	mvn.w	r0, #21
}
 800432e:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8004330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004334:	600b      	str	r3, [r1, #0]
		break;
 8004336:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8004338:	2310      	movs	r3, #16
 800433a:	600b      	str	r3, [r1, #0]
	return 0;
 800433c:	2000      	movs	r0, #0
		break;
 800433e:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004340:	2000      	movs	r0, #0
 8004342:	6008      	str	r0, [r1, #0]
		break;
 8004344:	4770      	bx	lr

08004346 <dma_stm32_get_memory_increment>:
	switch (increment) {
 8004346:	2801      	cmp	r0, #1
 8004348:	d00b      	beq.n	8004362 <dma_stm32_get_memory_increment+0x1c>
 800434a:	2802      	cmp	r0, #2
 800434c:	d006      	beq.n	800435c <dma_stm32_get_memory_increment+0x16>
 800434e:	b110      	cbz	r0, 8004356 <dma_stm32_get_memory_increment+0x10>
		return -EINVAL;
 8004350:	f06f 0015 	mvn.w	r0, #21
}
 8004354:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	600b      	str	r3, [r1, #0]
		break;
 800435a:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 800435c:	2000      	movs	r0, #0
 800435e:	6008      	str	r0, [r1, #0]
		break;
 8004360:	4770      	bx	lr
	switch (increment) {
 8004362:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004366:	4770      	bx	lr

08004368 <dma_stm32_get_periph_increment>:
	switch (increment) {
 8004368:	2801      	cmp	r0, #1
 800436a:	d00b      	beq.n	8004384 <dma_stm32_get_periph_increment+0x1c>
 800436c:	2802      	cmp	r0, #2
 800436e:	d006      	beq.n	800437e <dma_stm32_get_periph_increment+0x16>
 8004370:	b110      	cbz	r0, 8004378 <dma_stm32_get_periph_increment+0x10>
		return -EINVAL;
 8004372:	f06f 0015 	mvn.w	r0, #21
}
 8004376:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	600b      	str	r3, [r1, #0]
		break;
 800437c:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 800437e:	2000      	movs	r0, #0
 8004380:	6008      	str	r0, [r1, #0]
		break;
 8004382:	4770      	bx	lr
	switch (increment) {
 8004384:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004388:	4770      	bx	lr

0800438a <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 800438a:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 800438c:	2200      	movs	r2, #0
 800438e:	4611      	mov	r1, r2
 8004390:	200b      	movs	r0, #11
 8004392:	f7fc fe3b 	bl	800100c <z_arm_irq_priority_set>
 8004396:	200b      	movs	r0, #11
 8004398:	f7fc fe2a 	bl	8000ff0 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 800439c:	2200      	movs	r2, #0
 800439e:	4611      	mov	r1, r2
 80043a0:	200c      	movs	r0, #12
 80043a2:	f7fc fe33 	bl	800100c <z_arm_irq_priority_set>
 80043a6:	200c      	movs	r0, #12
 80043a8:	f7fc fe22 	bl	8000ff0 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 80043ac:	2200      	movs	r2, #0
 80043ae:	4611      	mov	r1, r2
 80043b0:	200d      	movs	r0, #13
 80043b2:	f7fc fe2b 	bl	800100c <z_arm_irq_priority_set>
 80043b6:	200d      	movs	r0, #13
 80043b8:	f7fc fe1a 	bl	8000ff0 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 80043bc:	2200      	movs	r2, #0
 80043be:	4611      	mov	r1, r2
 80043c0:	200e      	movs	r0, #14
 80043c2:	f7fc fe23 	bl	800100c <z_arm_irq_priority_set>
 80043c6:	200e      	movs	r0, #14
 80043c8:	f7fc fe12 	bl	8000ff0 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 80043cc:	2200      	movs	r2, #0
 80043ce:	4611      	mov	r1, r2
 80043d0:	200f      	movs	r0, #15
 80043d2:	f7fc fe1b 	bl	800100c <z_arm_irq_priority_set>
 80043d6:	200f      	movs	r0, #15
 80043d8:	f7fc fe0a 	bl	8000ff0 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 80043dc:	2200      	movs	r2, #0
 80043de:	4611      	mov	r1, r2
 80043e0:	2010      	movs	r0, #16
 80043e2:	f7fc fe13 	bl	800100c <z_arm_irq_priority_set>
 80043e6:	2010      	movs	r0, #16
 80043e8:	f7fc fe02 	bl	8000ff0 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 80043ec:	2200      	movs	r2, #0
 80043ee:	4611      	mov	r1, r2
 80043f0:	2011      	movs	r0, #17
 80043f2:	f7fc fe0b 	bl	800100c <z_arm_irq_priority_set>
 80043f6:	2011      	movs	r0, #17
 80043f8:	f7fc fdfa 	bl	8000ff0 <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 80043fc:	bd08      	pop	{r3, pc}

080043fe <dma_stm32_dump_stream_irq>:
{
 80043fe:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 8004400:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 8004402:	6918      	ldr	r0, [r3, #16]
 8004404:	f000 f953 	bl	80046ae <stm32_dma_dump_stream_irq>
}
 8004408:	bd08      	pop	{r3, pc}

0800440a <dma_stm32_clear_stream_irq>:
{
 800440a:	b538      	push	{r3, r4, r5, lr}
 800440c:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 800440e:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8004410:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8004412:	4628      	mov	r0, r5
 8004414:	f7fd fcb8 	bl	8001d88 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8004418:	4621      	mov	r1, r4
 800441a:	4628      	mov	r0, r5
 800441c:	f7fd fcac 	bl	8001d78 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f944 	bl	80046b0 <stm32_dma_clear_stream_irq>
}
 8004428:	bd38      	pop	{r3, r4, r5, pc}

0800442a <dma_stm32_irq_handler>:
{
 800442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442e:	4606      	mov	r6, r0
 8004430:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 8004432:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8004434:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 8004436:	699c      	ldr	r4, [r3, #24]
 8004438:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800443c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8004440:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 8004444:	2300      	movs	r3, #0
 8004446:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8004448:	4638      	mov	r0, r7
 800444a:	f7fd fcdf 	bl	8001e0c <stm32_dma_is_ht_irq_active>
 800444e:	b170      	cbz	r0, 800446e <dma_stm32_irq_handler+0x44>
		if (!stream->hal_override) {
 8004450:	7963      	ldrb	r3, [r4, #5]
 8004452:	b13b      	cbz	r3, 8004464 <dma_stm32_irq_handler+0x3a>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8004454:	6965      	ldr	r5, [r4, #20]
 8004456:	2300      	movs	r3, #0
 8004458:	4642      	mov	r2, r8
 800445a:	6921      	ldr	r1, [r4, #16]
 800445c:	4630      	mov	r0, r6
 800445e:	47a8      	blx	r5
}
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 8004464:	4629      	mov	r1, r5
 8004466:	4638      	mov	r0, r7
 8004468:	f7fd fc86 	bl	8001d78 <dma_stm32_clear_ht>
 800446c:	e7f2      	b.n	8004454 <dma_stm32_irq_handler+0x2a>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 800446e:	4629      	mov	r1, r5
 8004470:	4638      	mov	r0, r7
 8004472:	f7fd fcb1 	bl	8001dd8 <stm32_dma_is_tc_irq_active>
 8004476:	b168      	cbz	r0, 8004494 <dma_stm32_irq_handler+0x6a>
		if (!stream->hal_override) {
 8004478:	7963      	ldrb	r3, [r4, #5]
 800447a:	b133      	cbz	r3, 800448a <dma_stm32_irq_handler+0x60>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 800447c:	6965      	ldr	r5, [r4, #20]
 800447e:	2300      	movs	r3, #0
 8004480:	4642      	mov	r2, r8
 8004482:	6921      	ldr	r1, [r4, #16]
 8004484:	4630      	mov	r0, r6
 8004486:	47a8      	blx	r5
 8004488:	e7ea      	b.n	8004460 <dma_stm32_irq_handler+0x36>
			dma_stm32_clear_tc(dma, id);
 800448a:	4629      	mov	r1, r5
 800448c:	4638      	mov	r0, r7
 800448e:	f7fd fc7b 	bl	8001d88 <dma_stm32_clear_tc>
 8004492:	e7f3      	b.n	800447c <dma_stm32_irq_handler+0x52>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 8004494:	4629      	mov	r1, r5
 8004496:	4638      	mov	r0, r7
 8004498:	f000 f90e 	bl	80046b8 <stm32_dma_is_unexpected_irq_happened>
 800449c:	b138      	cbz	r0, 80044ae <dma_stm32_irq_handler+0x84>
		stream->dma_callback(dev, stream->user_data,
 800449e:	6965      	ldr	r5, [r4, #20]
 80044a0:	f06f 0304 	mvn.w	r3, #4
 80044a4:	4642      	mov	r2, r8
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	4630      	mov	r0, r6
 80044aa:	47a8      	blx	r5
 80044ac:	e7d8      	b.n	8004460 <dma_stm32_irq_handler+0x36>
		dma_stm32_dump_stream_irq(dev, id);
 80044ae:	4629      	mov	r1, r5
 80044b0:	4630      	mov	r0, r6
 80044b2:	f7ff ffa4 	bl	80043fe <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 80044b6:	4629      	mov	r1, r5
 80044b8:	4630      	mov	r0, r6
 80044ba:	f7ff ffa6 	bl	800440a <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 80044be:	6965      	ldr	r5, [r4, #20]
 80044c0:	f06f 0304 	mvn.w	r3, #4
 80044c4:	4642      	mov	r2, r8
 80044c6:	6921      	ldr	r1, [r4, #16]
 80044c8:	4630      	mov	r0, r6
 80044ca:	47a8      	blx	r5
}
 80044cc:	e7c8      	b.n	8004460 <dma_stm32_irq_handler+0x36>

080044ce <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 80044ce:	b508      	push	{r3, lr}
 80044d0:	2100      	movs	r1, #0
 80044d2:	f7ff ffaa 	bl	800442a <dma_stm32_irq_handler>
 80044d6:	bd08      	pop	{r3, pc}

080044d8 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 80044d8:	b508      	push	{r3, lr}
 80044da:	2101      	movs	r1, #1
 80044dc:	f7ff ffa5 	bl	800442a <dma_stm32_irq_handler>
 80044e0:	bd08      	pop	{r3, pc}

080044e2 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 80044e2:	b508      	push	{r3, lr}
 80044e4:	2102      	movs	r1, #2
 80044e6:	f7ff ffa0 	bl	800442a <dma_stm32_irq_handler>
 80044ea:	bd08      	pop	{r3, pc}

080044ec <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 80044ec:	b508      	push	{r3, lr}
 80044ee:	2103      	movs	r1, #3
 80044f0:	f7ff ff9b 	bl	800442a <dma_stm32_irq_handler>
 80044f4:	bd08      	pop	{r3, pc}

080044f6 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 80044f6:	b508      	push	{r3, lr}
 80044f8:	2104      	movs	r1, #4
 80044fa:	f7ff ff96 	bl	800442a <dma_stm32_irq_handler>
 80044fe:	bd08      	pop	{r3, pc}

08004500 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 8004500:	b508      	push	{r3, lr}
 8004502:	2105      	movs	r1, #5
 8004504:	f7ff ff91 	bl	800442a <dma_stm32_irq_handler>
 8004508:	bd08      	pop	{r3, pc}

0800450a <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 800450a:	b508      	push	{r3, lr}
 800450c:	2106      	movs	r1, #6
 800450e:	f7ff ff8c 	bl	800442a <dma_stm32_irq_handler>
 8004512:	bd08      	pop	{r3, pc}

08004514 <dma_stm32_disable_stream>:
{
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	4607      	mov	r7, r0
 8004518:	460e      	mov	r6, r1
	int count = 0;
 800451a:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 800451c:	4631      	mov	r1, r6
 800451e:	4638      	mov	r0, r7
 8004520:	f7fd fc9e 	bl	8001e60 <stm32_dma_disable_stream>
 8004524:	4603      	mov	r3, r0
 8004526:	b160      	cbz	r0, 8004542 <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 8004528:	1c65      	adds	r5, r4, #1
 800452a:	f241 3388 	movw	r3, #5000	; 0x1388
 800452e:	429c      	cmp	r4, r3
 8004530:	dc05      	bgt.n	800453e <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 8004532:	200a      	movs	r0, #10
 8004534:	2100      	movs	r1, #0
 8004536:	f7ff f969 	bl	800380c <z_impl_k_sleep>
 800453a:	462c      	mov	r4, r5
	for (;;) {
 800453c:	e7ee      	b.n	800451c <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 800453e:	f06f 030f 	mvn.w	r3, #15
}
 8004542:	4618      	mov	r0, r3
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004546 <dma_stm32_start>:
{
 8004546:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 8004548:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800454a:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 800454c:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	42a3      	cmp	r3, r4
 8004552:	d908      	bls.n	8004566 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 8004554:	4621      	mov	r1, r4
 8004556:	f7ff ff58 	bl	800440a <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f7fd fc6f 	bl	8001e40 <stm32_dma_enable_stream>
	return 0;
 8004562:	2000      	movs	r0, #0
}
 8004564:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8004566:	f06f 0015 	mvn.w	r0, #21
 800456a:	e7fb      	b.n	8004564 <dma_stm32_start+0x1e>

0800456c <LL_DMA_IsActiveFlag_TC1>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 800456c:	6800      	ldr	r0, [r0, #0]
}
 800456e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004572:	4770      	bx	lr

08004574 <LL_DMA_IsActiveFlag_TC2>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 8004574:	6800      	ldr	r0, [r0, #0]
}
 8004576:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800457a:	4770      	bx	lr

0800457c <LL_DMA_IsActiveFlag_TC3>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 800457c:	6800      	ldr	r0, [r0, #0]
}
 800457e:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8004582:	4770      	bx	lr

08004584 <LL_DMA_IsActiveFlag_TC4>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8004584:	6800      	ldr	r0, [r0, #0]
}
 8004586:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800458a:	4770      	bx	lr

0800458c <LL_DMA_IsActiveFlag_TC5>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 800458c:	6800      	ldr	r0, [r0, #0]
}
 800458e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8004592:	4770      	bx	lr

08004594 <LL_DMA_IsActiveFlag_TC6>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8004594:	6800      	ldr	r0, [r0, #0]
}
 8004596:	f3c0 5040 	ubfx	r0, r0, #21, #1
 800459a:	4770      	bx	lr

0800459c <LL_DMA_IsActiveFlag_TC7>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800459c:	6800      	ldr	r0, [r0, #0]
}
 800459e:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80045a2:	4770      	bx	lr

080045a4 <LL_DMA_IsActiveFlag_HT1>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 80045a4:	6800      	ldr	r0, [r0, #0]
}
 80045a6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80045aa:	4770      	bx	lr

080045ac <LL_DMA_IsActiveFlag_HT2>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2));
 80045ac:	6800      	ldr	r0, [r0, #0]
}
 80045ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80045b2:	4770      	bx	lr

080045b4 <LL_DMA_IsActiveFlag_HT3>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
 80045b4:	6800      	ldr	r0, [r0, #0]
}
 80045b6:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80045ba:	4770      	bx	lr

080045bc <LL_DMA_IsActiveFlag_HT4>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4));
 80045bc:	6800      	ldr	r0, [r0, #0]
}
 80045be:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80045c2:	4770      	bx	lr

080045c4 <LL_DMA_IsActiveFlag_HT5>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
 80045c4:	6800      	ldr	r0, [r0, #0]
}
 80045c6:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80045ca:	4770      	bx	lr

080045cc <LL_DMA_IsActiveFlag_HT6>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80045cc:	6800      	ldr	r0, [r0, #0]
}
 80045ce:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80045d2:	4770      	bx	lr

080045d4 <LL_DMA_IsActiveFlag_HT7>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
 80045d4:	6800      	ldr	r0, [r0, #0]
}
 80045d6:	f3c0 6080 	ubfx	r0, r0, #26, #1
 80045da:	4770      	bx	lr

080045dc <LL_DMA_ClearFlag_TC1>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80045dc:	6843      	ldr	r3, [r0, #4]
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	6043      	str	r3, [r0, #4]
}
 80045e4:	4770      	bx	lr

080045e6 <LL_DMA_ClearFlag_TC2>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80045e6:	6843      	ldr	r3, [r0, #4]
 80045e8:	f043 0320 	orr.w	r3, r3, #32
 80045ec:	6043      	str	r3, [r0, #4]
}
 80045ee:	4770      	bx	lr

080045f0 <LL_DMA_ClearFlag_TC3>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF3);
 80045f0:	6843      	ldr	r3, [r0, #4]
 80045f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f6:	6043      	str	r3, [r0, #4]
}
 80045f8:	4770      	bx	lr

080045fa <LL_DMA_ClearFlag_TC4>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF4);
 80045fa:	6843      	ldr	r3, [r0, #4]
 80045fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004600:	6043      	str	r3, [r0, #4]
}
 8004602:	4770      	bx	lr

08004604 <LL_DMA_ClearFlag_TC5>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004604:	6843      	ldr	r3, [r0, #4]
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	6043      	str	r3, [r0, #4]
}
 800460c:	4770      	bx	lr

0800460e <LL_DMA_ClearFlag_TC6>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800460e:	6843      	ldr	r3, [r0, #4]
 8004610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004614:	6043      	str	r3, [r0, #4]
}
 8004616:	4770      	bx	lr

08004618 <LL_DMA_ClearFlag_TC7>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8004618:	6843      	ldr	r3, [r0, #4]
 800461a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800461e:	6043      	str	r3, [r0, #4]
}
 8004620:	4770      	bx	lr

08004622 <LL_DMA_ClearFlag_HT1>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8004622:	6843      	ldr	r3, [r0, #4]
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	6043      	str	r3, [r0, #4]
}
 800462a:	4770      	bx	lr

0800462c <LL_DMA_ClearFlag_HT2>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF2);
 800462c:	6843      	ldr	r3, [r0, #4]
 800462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004632:	6043      	str	r3, [r0, #4]
}
 8004634:	4770      	bx	lr

08004636 <LL_DMA_ClearFlag_HT3>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8004636:	6843      	ldr	r3, [r0, #4]
 8004638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800463c:	6043      	str	r3, [r0, #4]
}
 800463e:	4770      	bx	lr

08004640 <LL_DMA_ClearFlag_HT4>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8004640:	6843      	ldr	r3, [r0, #4]
 8004642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004646:	6043      	str	r3, [r0, #4]
}
 8004648:	4770      	bx	lr

0800464a <LL_DMA_ClearFlag_HT5>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF5);
 800464a:	6843      	ldr	r3, [r0, #4]
 800464c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004650:	6043      	str	r3, [r0, #4]
}
 8004652:	4770      	bx	lr

08004654 <LL_DMA_ClearFlag_HT6>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8004654:	6843      	ldr	r3, [r0, #4]
 8004656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800465a:	6043      	str	r3, [r0, #4]
}
 800465c:	4770      	bx	lr

0800465e <LL_DMA_ClearFlag_HT7>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CHTIF7);
 800465e:	6843      	ldr	r3, [r0, #4]
 8004660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004664:	6043      	str	r3, [r0, #4]
}
 8004666:	4770      	bx	lr

08004668 <LL_DMA_ClearFlag_TE1>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8004668:	6843      	ldr	r3, [r0, #4]
 800466a:	f043 0308 	orr.w	r3, r3, #8
 800466e:	6043      	str	r3, [r0, #4]
}
 8004670:	4770      	bx	lr

08004672 <LL_DMA_ClearFlag_TE2>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8004672:	6843      	ldr	r3, [r0, #4]
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	6043      	str	r3, [r0, #4]
}
 800467a:	4770      	bx	lr

0800467c <LL_DMA_ClearFlag_TE3>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF3);
 800467c:	6843      	ldr	r3, [r0, #4]
 800467e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004682:	6043      	str	r3, [r0, #4]
}
 8004684:	4770      	bx	lr

08004686 <LL_DMA_ClearFlag_TE4>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8004686:	6843      	ldr	r3, [r0, #4]
 8004688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468c:	6043      	str	r3, [r0, #4]
}
 800468e:	4770      	bx	lr

08004690 <LL_DMA_ClearFlag_TE5>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8004690:	6843      	ldr	r3, [r0, #4]
 8004692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004696:	6043      	str	r3, [r0, #4]
}
 8004698:	4770      	bx	lr

0800469a <LL_DMA_ClearFlag_TE6>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF6);
 800469a:	6843      	ldr	r3, [r0, #4]
 800469c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046a0:	6043      	str	r3, [r0, #4]
}
 80046a2:	4770      	bx	lr

080046a4 <LL_DMA_ClearFlag_TE7>:
  SET_BIT(DMAx->IFCR, DMA_IFCR_CTEIF7);
 80046a4:	6843      	ldr	r3, [r0, #4]
 80046a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046aa:	6043      	str	r3, [r0, #4]
}
 80046ac:	4770      	bx	lr

080046ae <stm32_dma_dump_stream_irq>:
}
 80046ae:	4770      	bx	lr

080046b0 <stm32_dma_clear_stream_irq>:
{
 80046b0:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 80046b2:	f7fd fb89 	bl	8001dc8 <dma_stm32_clear_te>
}
 80046b6:	bd08      	pop	{r3, pc}

080046b8 <stm32_dma_is_unexpected_irq_happened>:
}
 80046b8:	2000      	movs	r0, #0
 80046ba:	4770      	bx	lr

080046bc <gpio_stm32_isr>:
{
 80046bc:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80046be:	684e      	ldr	r6, [r1, #4]
 80046c0:	2501      	movs	r5, #1
 80046c2:	4085      	lsls	r5, r0
	return list->head;
 80046c4:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80046c6:	b119      	cbz	r1, 80046d0 <gpio_stm32_isr+0x14>
 80046c8:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 80046ca:	b149      	cbz	r1, 80046e0 <gpio_stm32_isr+0x24>
	return node->next;
 80046cc:	680c      	ldr	r4, [r1, #0]
 80046ce:	e007      	b.n	80046e0 <gpio_stm32_isr+0x24>
 80046d0:	460c      	mov	r4, r1
 80046d2:	e005      	b.n	80046e0 <gpio_stm32_isr+0x24>
 80046d4:	b164      	cbz	r4, 80046f0 <gpio_stm32_isr+0x34>
 80046d6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 80046d8:	b104      	cbz	r4, 80046dc <gpio_stm32_isr+0x20>
	return node->next;
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	4621      	mov	r1, r4
 80046de:	461c      	mov	r4, r3
 80046e0:	b141      	cbz	r1, 80046f4 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 80046e2:	688a      	ldr	r2, [r1, #8]
 80046e4:	402a      	ands	r2, r5
 80046e6:	d0f5      	beq.n	80046d4 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80046e8:	684b      	ldr	r3, [r1, #4]
 80046ea:	4630      	mov	r0, r6
 80046ec:	4798      	blx	r3
 80046ee:	e7f1      	b.n	80046d4 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80046f0:	4623      	mov	r3, r4
 80046f2:	e7f3      	b.n	80046dc <gpio_stm32_isr+0x20>
}
 80046f4:	bd70      	pop	{r4, r5, r6, pc}

080046f6 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80046f6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80046fa:	d01b      	beq.n	8004734 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80046fc:	2310      	movs	r3, #16
 80046fe:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004700:	f010 0f02 	tst.w	r0, #2
 8004704:	d004      	beq.n	8004710 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8004706:	f010 0f04 	tst.w	r0, #4
 800470a:	d02c      	beq.n	8004766 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800470c:	2350      	movs	r3, #80	; 0x50
 800470e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8004710:	f010 0310 	ands.w	r3, r0, #16
 8004714:	d005      	beq.n	8004722 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004716:	680b      	ldr	r3, [r1, #0]
 8004718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800471c:	600b      	str	r3, [r1, #0]
	return 0;
 800471e:	2000      	movs	r0, #0
 8004720:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004722:	f010 0020 	ands.w	r0, r0, #32
 8004726:	d020      	beq.n	800476a <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004728:	680a      	ldr	r2, [r1, #0]
 800472a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800472e:	600a      	str	r2, [r1, #0]
	return 0;
 8004730:	4618      	mov	r0, r3
 8004732:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004734:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004738:	d011      	beq.n	800475e <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800473a:	2300      	movs	r3, #0
 800473c:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800473e:	f010 0310 	ands.w	r3, r0, #16
 8004742:	d004      	beq.n	800474e <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004748:	600b      	str	r3, [r1, #0]
	return 0;
 800474a:	2000      	movs	r0, #0
 800474c:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800474e:	f010 0020 	ands.w	r0, r0, #32
 8004752:	d00a      	beq.n	800476a <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004758:	600a      	str	r2, [r1, #0]
	return 0;
 800475a:	4618      	mov	r0, r3
 800475c:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800475e:	2330      	movs	r3, #48	; 0x30
 8004760:	600b      	str	r3, [r1, #0]
	return 0;
 8004762:	2000      	movs	r0, #0
 8004764:	4770      	bx	lr
				return -ENOTSUP;
 8004766:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800476a:	4770      	bx	lr

0800476c <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800476c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800476e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004770:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8004772:	600b      	str	r3, [r1, #0]
}
 8004774:	2000      	movs	r0, #0
 8004776:	4770      	bx	lr

08004778 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8004778:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800477a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800477c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800477e:	4042      	eors	r2, r0
 8004780:	400a      	ands	r2, r1
 8004782:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	2000      	movs	r0, #0
 8004788:	4770      	bx	lr

0800478a <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800478a:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800478c:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800478e:	6199      	str	r1, [r3, #24]
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8004794:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004796:	685b      	ldr	r3, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 8004798:	6299      	str	r1, [r3, #40]	; 0x28
}
 800479a:	2000      	movs	r0, #0
 800479c:	4770      	bx	lr

0800479e <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800479e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80047a0:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 80047a2:	6953      	ldr	r3, [r2, #20]
 80047a4:	404b      	eors	r3, r1
 80047a6:	6153      	str	r3, [r2, #20]
}
 80047a8:	2000      	movs	r0, #0
 80047aa:	4770      	bx	lr

080047ac <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 80047ac:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 80047ae:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 80047b0:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 80047b4:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 80047b6:	b1fb      	cbz	r3, 80047f8 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80047b8:	2000      	movs	r0, #0
 80047ba:	e00d      	b.n	80047d8 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 80047bc:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 80047be:	60a3      	str	r3, [r4, #8]
	return list->tail;
 80047c0:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80047c4:	4281      	cmp	r1, r0
 80047c6:	d112      	bne.n	80047ee <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 80047c8:	f8cc 3004 	str.w	r3, [ip, #4]
}
 80047cc:	e00f      	b.n	80047ee <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 80047ce:	f8cc 0004 	str.w	r0, [ip, #4]
}
 80047d2:	e00c      	b.n	80047ee <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80047d4:	4618      	mov	r0, r3
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b163      	cbz	r3, 80047f4 <gpio_stm32_manage_callback+0x48>
 80047da:	4299      	cmp	r1, r3
 80047dc:	d1fa      	bne.n	80047d4 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 80047de:	2800      	cmp	r0, #0
 80047e0:	d0ec      	beq.n	80047bc <gpio_stm32_manage_callback+0x10>
	return node->next;
 80047e2:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 80047e4:	6003      	str	r3, [r0, #0]
	return list->tail;
 80047e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80047ea:	4299      	cmp	r1, r3
 80047ec:	d0ef      	beq.n	80047ce <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 80047ee:	2300      	movs	r3, #0
 80047f0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80047f2:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 80047f4:	b903      	cbnz	r3, 80047f8 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 80047f6:	b162      	cbz	r2, 8004812 <gpio_stm32_manage_callback+0x66>
	if (set) {
 80047f8:	b172      	cbz	r2, 8004818 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 80047fa:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 80047fc:	600b      	str	r3, [r1, #0]
	list->head = node;
 80047fe:	60a1      	str	r1, [r4, #8]
	return list->tail;
 8004800:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 8004804:	b10b      	cbz	r3, 800480a <gpio_stm32_manage_callback+0x5e>
	return 0;
 8004806:	2000      	movs	r0, #0
 8004808:	e007      	b.n	800481a <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800480a:	f8cc 1004 	str.w	r1, [ip, #4]
 800480e:	2000      	movs	r0, #0
}
 8004810:	e003      	b.n	800481a <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 8004812:	f06f 0015 	mvn.w	r0, #21
 8004816:	e000      	b.n	800481a <gpio_stm32_manage_callback+0x6e>
	return 0;
 8004818:	2000      	movs	r0, #0
}
 800481a:	bc10      	pop	{r4}
 800481c:	4770      	bx	lr

0800481e <gpio_stm32_configure>:
{
 800481e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8004820:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004822:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8004824:	2001      	movs	r0, #1
 8004826:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8004828:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800482c:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004830:	6865      	ldr	r5, [r4, #4]
 8004832:	ea25 0500 	bic.w	r5, r5, r0
 8004836:	408e      	lsls	r6, r1
 8004838:	4335      	orrs	r5, r6
 800483a:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800483c:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004840:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004846:	2d00      	cmp	r5, #0
 8004848:	d04a      	beq.n	80048e0 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 800484a:	fab5 f585 	clz	r5, r5
 800484e:	006d      	lsls	r5, r5, #1
 8004850:	2703      	movs	r7, #3
 8004852:	fa07 f505 	lsl.w	r5, r7, r5
 8004856:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800485e:	2d00      	cmp	r5, #0
 8004860:	d040      	beq.n	80048e4 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 8004862:	fab5 f585 	clz	r5, r5
 8004866:	006d      	lsls	r5, r5, #1
 8004868:	fa0e f505 	lsl.w	r5, lr, r5
 800486c:	4335      	orrs	r5, r6
 800486e:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8004870:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004874:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800487a:	b3ad      	cbz	r5, 80048e8 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 800487c:	fab5 f585 	clz	r5, r5
 8004880:	006d      	lsls	r5, r5, #1
 8004882:	f04f 0e03 	mov.w	lr, #3
 8004886:	fa0e f505 	lsl.w	r5, lr, r5
 800488a:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004892:	b35d      	cbz	r5, 80048ec <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 8004894:	fab5 f585 	clz	r5, r5
 8004898:	006d      	lsls	r5, r5, #1
 800489a:	fa02 f505 	lsl.w	r5, r2, r5
 800489e:	ea4e 0505 	orr.w	r5, lr, r5
 80048a2:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 80048a4:	f1bc 0f20 	cmp.w	ip, #32
 80048a8:	d022      	beq.n	80048f0 <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80048aa:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80048ae:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d052      	beq.n	800495e <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2103      	movs	r1, #3
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d048      	beq.n	8004962 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 80048d0:	fab0 f080 	clz	r0, r0
 80048d4:	0040      	lsls	r0, r0, #1
 80048d6:	fa0c f000 	lsl.w	r0, ip, r0
 80048da:	4318      	orrs	r0, r3
 80048dc:	6020      	str	r0, [r4, #0]
}
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80048e0:	2520      	movs	r5, #32
 80048e2:	e7b4      	b.n	800484e <gpio_stm32_configure+0x30>
 80048e4:	2520      	movs	r5, #32
 80048e6:	e7be      	b.n	8004866 <gpio_stm32_configure+0x48>
 80048e8:	2520      	movs	r5, #32
 80048ea:	e7c9      	b.n	8004880 <gpio_stm32_configure+0x62>
 80048ec:	2520      	movs	r5, #32
 80048ee:	e7d3      	b.n	8004898 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 80048f0:	2907      	cmp	r1, #7
 80048f2:	dc19      	bgt.n	8004928 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048f4:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80048fa:	b18a      	cbz	r2, 8004920 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 80048fc:	fab2 f282 	clz	r2, r2
 8004900:	0092      	lsls	r2, r2, #2
 8004902:	250f      	movs	r5, #15
 8004904:	fa05 f202 	lsl.w	r2, r5, r2
 8004908:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004910:	b142      	cbz	r2, 8004924 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 8004912:	fab2 f282 	clz	r2, r2
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	4093      	lsls	r3, r2
 800491a:	430b      	orrs	r3, r1
 800491c:	6223      	str	r3, [r4, #32]
}
 800491e:	e7c4      	b.n	80048aa <gpio_stm32_configure+0x8c>
    return 32U;
 8004920:	2220      	movs	r2, #32
 8004922:	e7ed      	b.n	8004900 <gpio_stm32_configure+0xe2>
 8004924:	2220      	movs	r2, #32
 8004926:	e7f6      	b.n	8004916 <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004928:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800492a:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8004930:	b189      	cbz	r1, 8004956 <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 8004932:	fab1 f181 	clz	r1, r1
 8004936:	0089      	lsls	r1, r1, #2
 8004938:	260f      	movs	r6, #15
 800493a:	fa06 f101 	lsl.w	r1, r6, r1
 800493e:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004946:	b142      	cbz	r2, 800495a <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 8004948:	fab2 f282 	clz	r2, r2
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4093      	lsls	r3, r2
 8004950:	430b      	orrs	r3, r1
 8004952:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004954:	e7a9      	b.n	80048aa <gpio_stm32_configure+0x8c>
    return 32U;
 8004956:	2120      	movs	r1, #32
 8004958:	e7ed      	b.n	8004936 <gpio_stm32_configure+0x118>
 800495a:	2220      	movs	r2, #32
 800495c:	e7f6      	b.n	800494c <gpio_stm32_configure+0x12e>
 800495e:	2320      	movs	r3, #32
 8004960:	e7ac      	b.n	80048bc <gpio_stm32_configure+0x9e>
 8004962:	2020      	movs	r0, #32
 8004964:	e7b6      	b.n	80048d4 <gpio_stm32_configure+0xb6>

08004966 <gpio_stm32_config>:
{
 8004966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004968:	b083      	sub	sp, #12
 800496a:	4607      	mov	r7, r0
 800496c:	460d      	mov	r5, r1
 800496e:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 8004970:	a901      	add	r1, sp, #4
 8004972:	4610      	mov	r0, r2
 8004974:	f7ff febf 	bl	80046f6 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8004978:	4606      	mov	r6, r0
 800497a:	b970      	cbnz	r0, 800499a <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800497c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004980:	d005      	beq.n	800498e <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004982:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004986:	d10b      	bne.n	80049a0 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8004988:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800498c:	d10e      	bne.n	80049ac <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800498e:	2300      	movs	r3, #0
 8004990:	9a01      	ldr	r2, [sp, #4]
 8004992:	4629      	mov	r1, r5
 8004994:	4638      	mov	r0, r7
 8004996:	f7ff ff42 	bl	800481e <gpio_stm32_configure>
}
 800499a:	4630      	mov	r0, r6
 800499c:	b003      	add	sp, #12
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80049a0:	2101      	movs	r1, #1
 80049a2:	40a9      	lsls	r1, r5
 80049a4:	4638      	mov	r0, r7
 80049a6:	f7ff fef0 	bl	800478a <gpio_stm32_port_set_bits_raw>
 80049aa:	e7f0      	b.n	800498e <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80049ac:	2101      	movs	r1, #1
 80049ae:	40a9      	lsls	r1, r5
 80049b0:	4638      	mov	r0, r7
 80049b2:	f7ff feef 	bl	8004794 <gpio_stm32_port_clear_bits_raw>
 80049b6:	e7ea      	b.n	800498e <gpio_stm32_config+0x28>

080049b8 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80049b8:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 80049ba:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 80049bc:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 80049be:	2101      	movs	r1, #1
 80049c0:	f7fd fb28 	bl	8002014 <gpio_stm32_clock_request>
#endif
}
 80049c4:	bd08      	pop	{r3, pc}

080049c6 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
 80049c6:	b570      	push	{r4, r5, r6, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	460d      	mov	r5, r1
 80049cc:	4616      	mov	r6, r2
 80049ce:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
 80049d0:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	6023      	str	r3, [r4, #0]
	info->index = 0U;
 80049d6:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
 80049d8:	6953      	ldr	r3, [r2, #20]
 80049da:	466a      	mov	r2, sp
 80049dc:	a901      	add	r1, sp, #4
 80049de:	4798      	blx	r3

	while (layout_size--) {
 80049e0:	e014      	b.n	8004a0c <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	1aeb      	subs	r3, r5, r3
 80049e6:	fbb3 f0f1 	udiv	r0, r3, r1
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	4283      	cmp	r3, r0
 80049ee:	bf28      	it	cs
 80049f0:	4603      	movcs	r3, r0
		info->start_offset += (index_jmp * info->size);
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	fb03 2201 	mla	r2, r3, r1, r2
 80049f8:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
 80049fa:	68a2      	ldr	r2, [r4, #8]
 80049fc:	441a      	add	r2, r3
 80049fe:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
 8004a00:	9a01      	ldr	r2, [sp, #4]
 8004a02:	6811      	ldr	r1, [r2, #0]
 8004a04:	4299      	cmp	r1, r3
 8004a06:	d811      	bhi.n	8004a2c <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
 8004a08:	3208      	adds	r2, #8
 8004a0a:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
 8004a0c:	9b00      	ldr	r3, [sp, #0]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	9200      	str	r2, [sp, #0]
 8004a12:	b13b      	cbz	r3, 8004a24 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
 8004a14:	9a01      	ldr	r2, [sp, #4]
 8004a16:	6851      	ldr	r1, [r2, #4]
 8004a18:	6061      	str	r1, [r4, #4]
		if (offs == 0) {
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d1e1      	bne.n	80049e2 <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	1af0      	subs	r0, r6, r3
 8004a22:	e7e2      	b.n	80049ea <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
 8004a24:	f06f 0015 	mvn.w	r0, #21
}
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e7fb      	b.n	8004a28 <flash_get_page_info+0x62>

08004a30 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 8004a30:	b508      	push	{r3, lr}
 8004a32:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
 8004a34:	2200      	movs	r2, #0
 8004a36:	f7ff ffc6 	bl	80049c6 <flash_get_page_info>
}
 8004a3a:	bd08      	pop	{r3, pc}

08004a3c <flash_stm32_check_status>:
	if (FLASH_STM32_REGS(dev)->SR & error) {
 8004a3c:	6903      	ldr	r3, [r0, #16]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a46:	d101      	bne.n	8004a4c <flash_stm32_check_status+0x10>
	return 0;
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4770      	bx	lr
		return -EIO;
 8004a4c:	f06f 0004 	mvn.w	r0, #4
}
 8004a50:	4770      	bx	lr

08004a52 <flash_stm32_read>:
{
 8004a52:	b570      	push	{r4, r5, r6, lr}
 8004a54:	460e      	mov	r6, r1
 8004a56:	4615      	mov	r5, r2
 8004a58:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	f000 f8ec 	bl	8004c3a <flash_stm32_valid_range>
 8004a62:	b150      	cbz	r0, 8004a7a <flash_stm32_read+0x28>
	if (!len) {
 8004a64:	b90c      	cbnz	r4, 8004a6a <flash_stm32_read+0x18>
		return 0;
 8004a66:	2000      	movs	r0, #0
}
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (uint8_t *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	f106 6100 	add.w	r1, r6, #134217728	; 0x8000000
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff fb80 	bl	8004176 <memcpy>
	return 0;
 8004a76:	2000      	movs	r0, #0
 8004a78:	e7f6      	b.n	8004a68 <flash_stm32_read+0x16>
		return -EINVAL;
 8004a7a:	f06f 0015 	mvn.w	r0, #21
 8004a7e:	e7f3      	b.n	8004a68 <flash_stm32_read+0x16>

08004a80 <flash_stm32_check_configuration>:
}
 8004a80:	2000      	movs	r0, #0
 8004a82:	4770      	bx	lr

08004a84 <flash_stm32_wait_flash_idle>:
{
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4606      	mov	r6, r0
	return z_impl_k_uptime_ticks();
 8004a88:	f000 ffaf 	bl	80059ea <z_impl_k_uptime_ticks>
 8004a8c:	220a      	movs	r2, #10
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f7fb fb48 	bl	8000124 <__aeabi_uldivmod>
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 8004a94:	f110 0408 	adds.w	r4, r0, #8
 8004a98:	f141 0500 	adc.w	r5, r1, #0
	rc = flash_stm32_check_status(dev);
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff ffcd 	bl	8004a3c <flash_stm32_check_status>
	if (rc < 0) {
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	db14      	blt.n	8004ad0 <flash_stm32_wait_flash_idle+0x4c>
	while ((FLASH_STM32_REGS(dev)->SR & FLASH_SR_BSY)) {
 8004aa6:	6933      	ldr	r3, [r6, #16]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f013 0f01 	tst.w	r3, #1
 8004ab0:	d00c      	beq.n	8004acc <flash_stm32_wait_flash_idle+0x48>
 8004ab2:	f000 ff9a 	bl	80059ea <z_impl_k_uptime_ticks>
 8004ab6:	220a      	movs	r2, #10
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f7fb fb33 	bl	8000124 <__aeabi_uldivmod>
		if (k_uptime_get() > timeout_time) {
 8004abe:	4284      	cmp	r4, r0
 8004ac0:	eb75 0301 	sbcs.w	r3, r5, r1
 8004ac4:	daef      	bge.n	8004aa6 <flash_stm32_wait_flash_idle+0x22>
			return -EIO;
 8004ac6:	f06f 0004 	mvn.w	r0, #4
 8004aca:	e000      	b.n	8004ace <flash_stm32_wait_flash_idle+0x4a>
	return 0;
 8004acc:	2000      	movs	r0, #0
}
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8004ad0:	f06f 0004 	mvn.w	r0, #4
 8004ad4:	e7fb      	b.n	8004ace <flash_stm32_wait_flash_idle+0x4a>

08004ad6 <flash_stm32_erase>:
{
 8004ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460e      	mov	r6, r1
 8004adc:	4615      	mov	r5, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f000 f8ab 	bl	8004c3a <flash_stm32_valid_range>
 8004ae4:	b320      	cbz	r0, 8004b30 <flash_stm32_erase+0x5a>
	if (!len) {
 8004ae6:	b915      	cbnz	r5, 8004aee <flash_stm32_erase+0x18>
		return 0;
 8004ae8:	2500      	movs	r5, #0
}
 8004aea:	4628      	mov	r0, r5
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 8004aee:	6920      	ldr	r0, [r4, #16]
 8004af0:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 8004af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004afa:	f7fe f9b3 	bl	8002e64 <z_impl_k_sem_take>
	rc = flash_stm32_write_protection(dev, false);
 8004afe:	2100      	movs	r1, #0
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7fd faad 	bl	8002060 <flash_stm32_write_protection>
	if (rc == 0) {
 8004b06:	4607      	mov	r7, r0
 8004b08:	b158      	cbz	r0, 8004b22 <flash_stm32_erase+0x4c>
	int rc2 = flash_stm32_write_protection(dev, true);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7fd faa7 	bl	8002060 <flash_stm32_write_protection>
 8004b12:	4605      	mov	r5, r0
	if (!rc) {
 8004b14:	b107      	cbz	r7, 8004b18 <flash_stm32_erase+0x42>
 8004b16:	463d      	mov	r5, r7
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8004b18:	6920      	ldr	r0, [r4, #16]
 8004b1a:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 8004b1c:	f7fe f980 	bl	8002e20 <z_impl_k_sem_give>
	return rc;
 8004b20:	e7e3      	b.n	8004aea <flash_stm32_erase+0x14>
		rc = flash_stm32_block_erase_loop(dev, offset, len);
 8004b22:	462a      	mov	r2, r5
 8004b24:	4631      	mov	r1, r6
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f8b1 	bl	8004c8e <flash_stm32_block_erase_loop>
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	e7ec      	b.n	8004b0a <flash_stm32_erase+0x34>
		return -EINVAL;
 8004b30:	f06f 0515 	mvn.w	r5, #21
 8004b34:	e7d9      	b.n	8004aea <flash_stm32_erase+0x14>

08004b36 <flash_stm32_write>:
{
 8004b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	4616      	mov	r6, r2
 8004b40:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8004b42:	2301      	movs	r3, #1
 8004b44:	4622      	mov	r2, r4
 8004b46:	f000 f878 	bl	8004c3a <flash_stm32_valid_range>
 8004b4a:	b340      	cbz	r0, 8004b9e <flash_stm32_write+0x68>
	if (!len) {
 8004b4c:	b91c      	cbnz	r4, 8004b56 <flash_stm32_write+0x20>
		return 0;
 8004b4e:	2400      	movs	r4, #0
}
 8004b50:	4620      	mov	r0, r4
 8004b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 8004b56:	6928      	ldr	r0, [r5, #16]
 8004b58:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b62:	f7fe f97f 	bl	8002e64 <z_impl_k_sem_take>
	rc = flash_stm32_write_protection(dev, false);
 8004b66:	2100      	movs	r1, #0
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f7fd fa79 	bl	8002060 <flash_stm32_write_protection>
	if (rc == 0) {
 8004b6e:	4680      	mov	r8, r0
 8004b70:	b168      	cbz	r0, 8004b8e <flash_stm32_write+0x58>
	int rc2 = flash_stm32_write_protection(dev, true);
 8004b72:	2101      	movs	r1, #1
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7fd fa73 	bl	8002060 <flash_stm32_write_protection>
 8004b7a:	4604      	mov	r4, r0
	if (!rc) {
 8004b7c:	f1b8 0f00 	cmp.w	r8, #0
 8004b80:	d000      	beq.n	8004b84 <flash_stm32_write+0x4e>
 8004b82:	4644      	mov	r4, r8
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8004b84:	6928      	ldr	r0, [r5, #16]
 8004b86:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 8004b88:	f7fe f94a 	bl	8002e20 <z_impl_k_sem_give>
	return rc;
 8004b8c:	e7e0      	b.n	8004b50 <flash_stm32_write+0x1a>
		rc = flash_stm32_write_range(dev, offset, data, len);
 8004b8e:	4623      	mov	r3, r4
 8004b90:	4632      	mov	r2, r6
 8004b92:	4639      	mov	r1, r7
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f8ab 	bl	8004cf0 <flash_stm32_write_range>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	e7e9      	b.n	8004b72 <flash_stm32_write+0x3c>
		return -EINVAL;
 8004b9e:	f06f 0415 	mvn.w	r4, #21
 8004ba2:	e7d5      	b.n	8004b50 <flash_stm32_write+0x1a>

08004ba4 <get_page>:
}
 8004ba4:	0a00      	lsrs	r0, r0, #8
 8004ba6:	4770      	bx	lr

08004ba8 <is_flash_locked>:
	return !!(regs->PECR & FLASH_PECR_PRGLOCK);
 8004ba8:	6840      	ldr	r0, [r0, #4]
}
 8004baa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004bae:	4770      	bx	lr

08004bb0 <write_disable>:
	regs->PECR &= ~FLASH_PECR_PROG;
 8004bb0:	6843      	ldr	r3, [r0, #4]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	6043      	str	r3, [r0, #4]
}
 8004bb8:	4770      	bx	lr

08004bba <erase_page_begin>:
		CONFIG_FLASH_BASE_ADDRESS + page * FLASH_PAGE_SIZE);
 8004bba:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 8004bbe:	0209      	lsls	r1, r1, #8
	regs->PECR |= FLASH_PECR_ERASE;
 8004bc0:	6843      	ldr	r3, [r0, #4]
 8004bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bc6:	6043      	str	r3, [r0, #4]
	regs->PECR |= FLASH_PECR_PROG;
 8004bc8:	6843      	ldr	r3, [r0, #4]
 8004bca:	f043 0308 	orr.w	r3, r3, #8
 8004bce:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd0:	f3bf 8f4f 	dsb	sy
	*page_base = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	600b      	str	r3, [r1, #0]
}
 8004bd8:	4770      	bx	lr

08004bda <erase_page_end>:
	regs->PECR &= ~FLASH_PECR_PROG;
 8004bda:	6843      	ldr	r3, [r0, #4]
 8004bdc:	f023 0308 	bic.w	r3, r3, #8
 8004be0:	6043      	str	r3, [r0, #4]
	regs->PECR &= ~FLASH_PECR_ERASE;
 8004be2:	6843      	ldr	r3, [r0, #4]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	6043      	str	r3, [r0, #4]
}
 8004bea:	4770      	bx	lr

08004bec <write_value>:
{
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	4617      	mov	r7, r2
		offset + CONFIG_FLASH_BASE_ADDRESS);
 8004bf4:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8004bf8:	6903      	ldr	r3, [r0, #16]
 8004bfa:	f8d3 8000 	ldr.w	r8, [r3]
	if (is_flash_locked(regs)) {
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f7ff ffd2 	bl	8004ba8 <is_flash_locked>
 8004c04:	b998      	cbnz	r0, 8004c2e <write_value+0x42>
	rc = flash_stm32_wait_flash_idle(dev);
 8004c06:	4628      	mov	r0, r5
 8004c08:	f7ff ff3c 	bl	8004a84 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8004c0c:	1e04      	subs	r4, r0, #0
 8004c0e:	db0b      	blt.n	8004c28 <write_value+0x3c>
	if (*flash != FLASH_ERASED_VALUE) {
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	b97b      	cbnz	r3, 8004c34 <write_value+0x48>
 8004c14:	f3bf 8f4f 	dsb	sy
	*flash = val;
 8004c18:	6037      	str	r7, [r6, #0]
	rc = flash_stm32_wait_flash_idle(dev);
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7ff ff32 	bl	8004a84 <flash_stm32_wait_flash_idle>
 8004c20:	4604      	mov	r4, r0
	write_disable(regs);
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7ff ffc4 	bl	8004bb0 <write_disable>
}
 8004c28:	4620      	mov	r0, r4
 8004c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8004c2e:	f06f 0404 	mvn.w	r4, #4
 8004c32:	e7f9      	b.n	8004c28 <write_value+0x3c>
		return -EIO;
 8004c34:	f06f 0404 	mvn.w	r4, #4
 8004c38:	e7f6      	b.n	8004c28 <write_value+0x3c>

08004c3a <flash_stm32_valid_range>:
{
 8004c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	4615      	mov	r5, r2
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 8004c44:	b12b      	cbz	r3, 8004c52 <flash_stm32_valid_range+0x18>
 8004c46:	f011 0f01 	tst.w	r1, #1
 8004c4a:	d119      	bne.n	8004c80 <flash_stm32_valid_range+0x46>
 8004c4c:	f012 0f01 	tst.w	r2, #1
 8004c50:	d119      	bne.n	8004c86 <flash_stm32_valid_range+0x4c>
 8004c52:	aa01      	add	r2, sp, #4
 8004c54:	4621      	mov	r1, r4
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff feea 	bl	8004a30 <z_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    uint32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	b128      	cbz	r0, 8004c6c <flash_stm32_valid_range+0x32>
 8004c60:	2700      	movs	r7, #0
 8004c62:	f017 0f01 	tst.w	r7, #1
 8004c66:	d010      	beq.n	8004c8a <flash_stm32_valid_range+0x50>
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e00a      	b.n	8004c82 <flash_stm32_valid_range+0x48>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 8004c6c:	1961      	adds	r1, r4, r5
 8004c6e:	3901      	subs	r1, #1
 8004c70:	aa01      	add	r2, sp, #4
 8004c72:	4630      	mov	r0, r6
 8004c74:	f7ff fedc 	bl	8004a30 <z_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d1f2      	bne.n	8004c62 <flash_stm32_valid_range+0x28>
 8004c7c:	2701      	movs	r7, #1
 8004c7e:	e7f0      	b.n	8004c62 <flash_stm32_valid_range+0x28>
 8004c80:	2000      	movs	r0, #0
}
 8004c82:	b005      	add	sp, #20
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 8004c86:	2000      	movs	r0, #0
 8004c88:	e7fb      	b.n	8004c82 <flash_stm32_valid_range+0x48>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e7f9      	b.n	8004c82 <flash_stm32_valid_range+0x48>

08004c8e <flash_stm32_block_erase_loop>:
{
 8004c8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c92:	4607      	mov	r7, r0
 8004c94:	4688      	mov	r8, r1
 8004c96:	4691      	mov	r9, r2
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8004c98:	6903      	ldr	r3, [r0, #16]
 8004c9a:	681e      	ldr	r6, [r3, #0]
	if (is_flash_locked(regs)) {
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7ff ff83 	bl	8004ba8 <is_flash_locked>
 8004ca2:	bb00      	cbnz	r0, 8004ce6 <flash_stm32_block_erase_loop+0x58>
	rc = flash_stm32_wait_flash_idle(dev);
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	f7ff feed 	bl	8004a84 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8004caa:	1e04      	subs	r4, r0, #0
 8004cac:	db1d      	blt.n	8004cea <flash_stm32_block_erase_loop+0x5c>
	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7ff ff78 	bl	8004ba4 <get_page>
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	eb08 0009 	add.w	r0, r8, r9
 8004cba:	3801      	subs	r0, #1
 8004cbc:	f7ff ff72 	bl	8004ba4 <get_page>
 8004cc0:	42a8      	cmp	r0, r5
 8004cc2:	d312      	bcc.n	8004cea <flash_stm32_block_erase_loop+0x5c>
		erase_page_begin(regs, i);
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f7ff ff77 	bl	8004bba <erase_page_begin>
 8004ccc:	f3bf 8f4f 	dsb	sy
		rc = flash_stm32_wait_flash_idle(dev);
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f7ff fed7 	bl	8004a84 <flash_stm32_wait_flash_idle>
 8004cd6:	4604      	mov	r4, r0
		erase_page_end(regs);
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f7ff ff7e 	bl	8004bda <erase_page_end>
		if (rc < 0) {
 8004cde:	2c00      	cmp	r4, #0
 8004ce0:	db03      	blt.n	8004cea <flash_stm32_block_erase_loop+0x5c>
	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7e7      	b.n	8004cb6 <flash_stm32_block_erase_loop+0x28>
		return -EIO;
 8004ce6:	f06f 0404 	mvn.w	r4, #4
}
 8004cea:	4620      	mov	r0, r4
 8004cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004cf0 <flash_stm32_write_range>:
{
 8004cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	4681      	mov	r9, r0
 8004cf8:	4688      	mov	r8, r1
 8004cfa:	4617      	mov	r7, r2
 8004cfc:	461e      	mov	r6, r3
	int i, rc = 0;
 8004cfe:	2000      	movs	r0, #0
	for (i = 0; i < len / sizeof(flash_prg_t); i++) {
 8004d00:	4604      	mov	r4, r0
 8004d02:	e000      	b.n	8004d06 <flash_stm32_write_range+0x16>
 8004d04:	3401      	adds	r4, #1
 8004d06:	ebb4 0f96 	cmp.w	r4, r6, lsr #2
 8004d0a:	d20f      	bcs.n	8004d2c <flash_stm32_write_range+0x3c>
		       (const uint8_t *)data + i * sizeof(flash_prg_t),
 8004d0c:	00a5      	lsls	r5, r4, #2
		memcpy(&value,
 8004d0e:	2204      	movs	r2, #4
 8004d10:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 8004d14:	eb0d 0002 	add.w	r0, sp, r2
 8004d18:	f7ff fa2d 	bl	8004176 <memcpy>
		rc = write_value(dev, offset + i * sizeof(flash_prg_t), value);
 8004d1c:	9a01      	ldr	r2, [sp, #4]
 8004d1e:	eb05 0108 	add.w	r1, r5, r8
 8004d22:	4648      	mov	r0, r9
 8004d24:	f7ff ff62 	bl	8004bec <write_value>
		if (rc < 0) {
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	daeb      	bge.n	8004d04 <flash_stm32_write_range+0x14>
}
 8004d2c:	b003      	add	sp, #12
 8004d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d32 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004d32:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d38:	6843      	ldr	r3, [r0, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d02a      	beq.n	8004d9e <uart_stm32_config_get+0x6c>
 8004d48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d4c:	d129      	bne.n	8004da2 <uart_stm32_config_get+0x70>
 8004d4e:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8004d50:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d52:	6843      	ldr	r3, [r0, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d60:	d023      	beq.n	8004daa <uart_stm32_config_get+0x78>
 8004d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d66:	d022      	beq.n	8004dae <uart_stm32_config_get+0x7c>
 8004d68:	b1eb      	cbz	r3, 8004da6 <uart_stm32_config_get+0x74>
		return UART_CFG_STOP_BITS_2;
 8004d6a:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8004d6c:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d6e:	6843      	ldr	r3, [r0, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004d72:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 8004d7a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8004d7e:	d118      	bne.n	8004db2 <uart_stm32_config_get+0x80>
		if (p == LL_USART_PARITY_NONE) {
 8004d80:	b9e3      	cbnz	r3, 8004dbc <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_8;
 8004d82:	2303      	movs	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8004d84:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d86:	6843      	ldr	r3, [r0, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d014      	beq.n	8004dc0 <uart_stm32_config_get+0x8e>
	return UART_CFG_FLOW_CTRL_NONE;
 8004d96:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8004d98:	71cb      	strb	r3, [r1, #7]
}
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e7d6      	b.n	8004d50 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e7d4      	b.n	8004d50 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e7e0      	b.n	8004d6c <uart_stm32_config_get+0x3a>
	switch (sb) {
 8004daa:	2300      	movs	r3, #0
 8004dac:	e7de      	b.n	8004d6c <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e7dc      	b.n	8004d6c <uart_stm32_config_get+0x3a>
		if (p == LL_USART_PARITY_NONE) {
 8004db2:	b90b      	cbnz	r3, 8004db8 <uart_stm32_config_get+0x86>
			return UART_CFG_DATA_BITS_9;
 8004db4:	2304      	movs	r3, #4
 8004db6:	e7e5      	b.n	8004d84 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_8;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e7e3      	b.n	8004d84 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_7;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e7e1      	b.n	8004d84 <uart_stm32_config_get+0x52>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e7e9      	b.n	8004d98 <uart_stm32_config_get+0x66>

08004dc4 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004dc4:	6843      	ldr	r3, [r0, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004dc8:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8004dca:	f012 0f08 	tst.w	r2, #8
 8004dce:	d012      	beq.n	8004df6 <uart_stm32_poll_in+0x32>
{
 8004dd0:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004dd6:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004ddc:	9a01      	ldr	r2, [sp, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004dde:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8004de0:	f012 0f20 	tst.w	r2, #32
 8004de4:	d004      	beq.n	8004df0 <uart_stm32_poll_in+0x2c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004de6:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8004de8:	700b      	strb	r3, [r1, #0]
	return 0;
 8004dea:	2000      	movs	r0, #0
}
 8004dec:	b002      	add	sp, #8
 8004dee:	4770      	bx	lr
		return -1;
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df4:	e7fa      	b.n	8004dec <uart_stm32_poll_in+0x28>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004df6:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8004df8:	f012 0f20 	tst.w	r2, #32
 8004dfc:	d003      	beq.n	8004e06 <uart_stm32_poll_in+0x42>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004dfe:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8004e00:	700b      	strb	r3, [r1, #0]
	return 0;
 8004e02:	2000      	movs	r0, #0
 8004e04:	4770      	bx	lr
		return -1;
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004e0a:	4770      	bx	lr

08004e0c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e0c:	6843      	ldr	r3, [r0, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004e10:	6813      	ldr	r3, [r2, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8004e12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e16:	d0fb      	beq.n	8004e10 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8004e18:	6051      	str	r1, [r2, #4]
}
 8004e1a:	4770      	bx	lr

08004e1c <uart_stm32_err_check>:
{
 8004e1c:	b084      	sub	sp, #16
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e1e:	6843      	ldr	r3, [r0, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004e22:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8004e24:	f010 0008 	ands.w	r0, r0, #8
 8004e28:	d000      	beq.n	8004e2c <uart_stm32_err_check+0x10>
		err |= UART_ERROR_OVERRUN;
 8004e2a:	2001      	movs	r0, #1
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8004e2c:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8004e2e:	f012 0f01 	tst.w	r2, #1
 8004e32:	d001      	beq.n	8004e38 <uart_stm32_err_check+0x1c>
		err |= UART_ERROR_PARITY;
 8004e34:	f040 0002 	orr.w	r0, r0, #2
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8004e38:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8004e3a:	f012 0f02 	tst.w	r2, #2
 8004e3e:	d001      	beq.n	8004e44 <uart_stm32_err_check+0x28>
		err |= UART_ERROR_FRAMING;
 8004e40:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8004e44:	f010 0f01 	tst.w	r0, #1
 8004e48:	d005      	beq.n	8004e56 <uart_stm32_err_check+0x3a>
  tmpreg = USARTx->SR;
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 8004e4e:	9a00      	ldr	r2, [sp, #0]
  tmpreg = USARTx->DR;
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 8004e54:	9a00      	ldr	r2, [sp, #0]
	if (err & UART_ERROR_PARITY) {
 8004e56:	f010 0f02 	tst.w	r0, #2
 8004e5a:	d005      	beq.n	8004e68 <uart_stm32_err_check+0x4c>
  tmpreg = USARTx->SR;
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004e60:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004e66:	9a01      	ldr	r2, [sp, #4]
	if (err & UART_ERROR_FRAMING) {
 8004e68:	f010 0f04 	tst.w	r0, #4
 8004e6c:	d005      	beq.n	8004e7a <uart_stm32_err_check+0x5e>
  tmpreg = USARTx->SR;
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8004e72:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8004e78:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8004e7e:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8004e84:	9b03      	ldr	r3, [sp, #12]
}
 8004e86:	b004      	add	sp, #16
 8004e88:	4770      	bx	lr

08004e8a <uart_stm32_async_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004e8a:	6903      	ldr	r3, [r0, #16]
	data->async_cb = callback;
 8004e8c:	60d9      	str	r1, [r3, #12]
	data->async_user_data = user_data;
 8004e8e:	611a      	str	r2, [r3, #16]
}
 8004e90:	2000      	movs	r0, #0
 8004e92:	4770      	bx	lr

08004e94 <uart_stm32_async_rx_buf_rsp>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004e94:	6903      	ldr	r3, [r0, #16]
	data->rx_next_buffer = buf;
 8004e96:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	data->rx_next_buffer_len = len;
 8004e9a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4770      	bx	lr

08004ea2 <uart_stm32_dma_tx_cb>:
{
 8004ea2:	b530      	push	{r4, r5, lr}
 8004ea4:	b083      	sub	sp, #12
	struct uart_stm32_data *data = DEV_DATA(uart_dev);
 8004ea6:	690c      	ldr	r4, [r1, #16]
	__asm__ volatile(
 8004ea8:	f04f 0310 	mov.w	r3, #16
 8004eac:	f3ef 8511 	mrs	r5, BASEPRI
 8004eb0:	f383 8812 	msr	BASEPRI_MAX, r3
 8004eb4:	f3bf 8f6f 	isb	sy
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004eb8:	684b      	ldr	r3, [r1, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004ebc:	6953      	ldr	r3, [r2, #20]
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	6153      	str	r3, [r2, #20]
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 8004ec4:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8004ec8:	f000 fbe7 	bl	800569a <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8004ecc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8004ed0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 * @retval Negative errno code if failure.
 */
static inline int dma_get_status(const struct device *dev, uint32_t channel,
				 struct dma_status *stat)
{
	const struct dma_driver_api *api =
 8004ed4:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	if (api->get_status) {
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	b143      	cbz	r3, 8004eec <uart_stm32_dma_tx_cb+0x4a>
		return api->get_status(dev, channel, stat);
 8004eda:	466a      	mov	r2, sp
 8004edc:	4798      	blx	r3
 8004ede:	b928      	cbnz	r0, 8004eec <uart_stm32_dma_tx_cb+0x4a>
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8004ee0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
					stat.pending_length;
 8004ee4:	9a01      	ldr	r2, [sp, #4]
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	data->dma_tx.buffer_length = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	__asm__ volatile(
 8004ef2:	f385 8811 	msr	BASEPRI, r5
 8004ef6:	f3bf 8f6f 	isb	sy
}
 8004efa:	b003      	add	sp, #12
 8004efc:	bd30      	pop	{r4, r5, pc}

08004efe <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8004efe:	b508      	push	{r3, lr}
 8004f00:	2200      	movs	r2, #0
 8004f02:	4611      	mov	r1, r2
 8004f04:	2026      	movs	r0, #38	; 0x26
 8004f06:	f7fc f881 	bl	800100c <z_arm_irq_priority_set>
 8004f0a:	2026      	movs	r0, #38	; 0x26
 8004f0c:	f7fc f870 	bl	8000ff0 <arch_irq_enable>
 8004f10:	bd08      	pop	{r3, pc}

08004f12 <uart_stm32_irq_config_func_1>:
 8004f12:	b508      	push	{r3, lr}
 8004f14:	2200      	movs	r2, #0
 8004f16:	4611      	mov	r1, r2
 8004f18:	2027      	movs	r0, #39	; 0x27
 8004f1a:	f7fc f877 	bl	800100c <z_arm_irq_priority_set>
 8004f1e:	2027      	movs	r0, #39	; 0x27
 8004f20:	f7fc f866 	bl	8000ff0 <arch_irq_enable>
 8004f24:	bd08      	pop	{r3, pc}

08004f26 <uart_stm32_async_tx>:
{
 8004f26:	b570      	push	{r4, r5, r6, lr}
 8004f28:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004f2a:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f2c:	6840      	ldr	r0, [r0, #4]
 8004f2e:	6800      	ldr	r0, [r0, #0]
	if (data->dma_tx.dma_dev == NULL) {
 8004f30:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	d049      	beq.n	8004fcc <uart_stm32_async_tx+0xa6>
	if (data->dma_tx.buffer_length != 0) {
 8004f38:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8004f3c:	2e00      	cmp	r6, #0
 8004f3e:	d148      	bne.n	8004fd2 <uart_stm32_async_tx+0xac>
	data->dma_tx.buffer = (uint8_t *)tx_data;
 8004f40:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	data->dma_tx.buffer_length = buf_size;
 8004f44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	data->dma_tx.timeout = timeout;
 8004f48:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004f4c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8004f50:	6003      	str	r3, [r0, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004f52:	68c3      	ldr	r3, [r0, #12]
 8004f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f58:	60c3      	str	r3, [r0, #12]
	data->dma_tx.blk_cfg.source_address = (uint32_t)data->dma_tx.buffer;
 8004f5a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004f5e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	data->dma_tx.blk_cfg.block_size = data->dma_tx.buffer_length;
 8004f62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f66:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.dma_channel,
 8004f6a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
	const struct dma_driver_api *api =
 8004f6e:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 8004f76:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8004f7a:	4798      	blx	r3
	if (ret != 0) {
 8004f7c:	bb60      	cbnz	r0, 8004fd8 <uart_stm32_async_tx+0xb2>
	if (dma_start(data->dma_tx.dma_dev, data->dma_tx.dma_channel)) {
 8004f7e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8004f82:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 8004f86:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4798      	blx	r3
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	bb30      	cbnz	r0, 8004fde <uart_stm32_async_tx+0xb8>
	async_timer_start(&data->dma_tx.timeout_work, data->dma_tx.timeout);
 8004f90:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8004f94:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
	if ((timeout != SYS_FOREVER_MS) && (timeout != 0)) {
 8004f98:	1c4b      	adds	r3, r1, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d807      	bhi.n	8004fae <uart_stm32_async_tx+0x88>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f9e:	686b      	ldr	r3, [r5, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004fa2:	6953      	ldr	r3, [r2, #20]
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	6153      	str	r3, [r2, #20]
}
 8004faa:	4630      	mov	r0, r6
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
		k_work_reschedule(work, K_MSEC(timeout));
 8004fae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004fb2:	17cb      	asrs	r3, r1, #31
			return t * ((uint64_t)to_hz / from_hz);
 8004fb4:	009c      	lsls	r4, r3, #2
 8004fb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fba:	008a      	lsls	r2, r1, #2
 8004fbc:	1852      	adds	r2, r2, r1
 8004fbe:	eb43 0304 	adc.w	r3, r3, r4
 8004fc2:	1892      	adds	r2, r2, r2
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	f7fe f8ef 	bl	80031a8 <k_work_reschedule>
 8004fca:	e7e8      	b.n	8004f9e <uart_stm32_async_tx+0x78>
		return -ENODEV;
 8004fcc:	f06f 0612 	mvn.w	r6, #18
 8004fd0:	e7eb      	b.n	8004faa <uart_stm32_async_tx+0x84>
		return -EBUSY;
 8004fd2:	f06f 060f 	mvn.w	r6, #15
 8004fd6:	e7e8      	b.n	8004faa <uart_stm32_async_tx+0x84>
		return -EINVAL;
 8004fd8:	f06f 0615 	mvn.w	r6, #21
 8004fdc:	e7e5      	b.n	8004faa <uart_stm32_async_tx+0x84>
		return -EFAULT;
 8004fde:	f06f 060d 	mvn.w	r6, #13
 8004fe2:	e7e2      	b.n	8004faa <uart_stm32_async_tx+0x84>

08004fe4 <uart_stm32_async_tx_abort>:
{
 8004fe4:	b530      	push	{r4, r5, lr}
 8004fe6:	b089      	sub	sp, #36	; 0x24
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004fe8:	6904      	ldr	r4, [r0, #16]
	size_t tx_buffer_length = data->dma_tx.buffer_length;
 8004fea:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
	if (tx_buffer_length == 0) {
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	d034      	beq.n	800505c <uart_stm32_async_tx_abort+0x78>
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 8004ff2:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8004ff6:	f000 fb50 	bl	800569a <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8004ffa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8004ffe:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 8005002:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	b133      	cbz	r3, 8005016 <uart_stm32_async_tx_abort+0x32>
		return api->get_status(dev, channel, stat);
 8005008:	aa06      	add	r2, sp, #24
 800500a:	4798      	blx	r3
 800500c:	b918      	cbnz	r0, 8005016 <uart_stm32_async_tx_abort+0x32>
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 800500e:	9b07      	ldr	r3, [sp, #28]
 8005010:	1aed      	subs	r5, r5, r3
 8005012:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 8005016:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800501a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800501e:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4798      	blx	r3
	struct uart_event event = {
 8005024:	2300      	movs	r3, #0
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	9302      	str	r3, [sp, #8]
 800502a:	9303      	str	r3, [sp, #12]
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	2201      	movs	r2, #1
 8005032:	f88d 2004 	strb.w	r2, [sp, #4]
		.data.tx.buf = data->dma_tx.buffer,
 8005036:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	struct uart_event event = {
 800503a:	9202      	str	r2, [sp, #8]
		.data.tx.len = data->dma_tx.counter
 800503c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	struct uart_event event = {
 8005040:	9203      	str	r2, [sp, #12]
	data->dma_tx.buffer_length = 0;
 8005042:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	data->dma_tx.counter = 0;
 8005046:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if (data->async_cb) {
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	b11b      	cbz	r3, 8005056 <uart_stm32_async_tx_abort+0x72>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800504e:	6922      	ldr	r2, [r4, #16]
 8005050:	a901      	add	r1, sp, #4
 8005052:	68a0      	ldr	r0, [r4, #8]
 8005054:	4798      	blx	r3
	return 0;
 8005056:	2000      	movs	r0, #0
}
 8005058:	b009      	add	sp, #36	; 0x24
 800505a:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
 800505c:	f06f 000d 	mvn.w	r0, #13
 8005060:	e7fa      	b.n	8005058 <uart_stm32_async_tx_abort+0x74>

08005062 <uart_stm32_async_tx_timeout>:
{
 8005062:	b508      	push	{r3, lr}
	const struct device *dev = data->uart_dev;
 8005064:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
	uart_stm32_async_tx_abort(dev);
 8005068:	6880      	ldr	r0, [r0, #8]
 800506a:	f7ff ffbb 	bl	8004fe4 <uart_stm32_async_tx_abort>
}
 800506e:	bd08      	pop	{r3, pc}

08005070 <uart_stm32_dma_replace_buffer>:
{
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005076:	6904      	ldr	r4, [r0, #16]
	data->dma_rx.offset = 0;
 8005078:	2200      	movs	r2, #0
 800507a:	66e2      	str	r2, [r4, #108]	; 0x6c
	data->dma_rx.counter = 0;
 800507c:	6722      	str	r2, [r4, #112]	; 0x70
	data->dma_rx.buffer = data->rx_next_buffer;
 800507e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005082:	6663      	str	r3, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 8005084:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
 8005088:	66a6      	str	r6, [r4, #104]	; 0x68
	data->dma_rx.blk_cfg.block_size = data->dma_rx.buffer_length;
 800508a:	65a6      	str	r6, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 800508c:	64a3      	str	r3, [r4, #72]	; 0x48
	data->rx_next_buffer = NULL;
 800508e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 8005092:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 8005096:	69a0      	ldr	r0, [r4, #24]
 8005098:	69e1      	ldr	r1, [r4, #28]
 800509a:	6c62      	ldr	r2, [r4, #68]	; 0x44
	const struct dma_driver_api *api =
 800509c:	6887      	ldr	r7, [r0, #8]
	if (api->reload) {
 800509e:	687f      	ldr	r7, [r7, #4]
 80050a0:	b10f      	cbz	r7, 80050a6 <uart_stm32_dma_replace_buffer+0x36>
		return api->reload(dev, channel, src, dst, size);
 80050a2:	9600      	str	r6, [sp, #0]
 80050a4:	47b8      	blx	r7
	dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 80050a6:	69a0      	ldr	r0, [r4, #24]
 80050a8:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 80050aa:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80050b0:	686b      	ldr	r3, [r5, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
  tmpreg = USARTx->SR;
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 80050b8:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 80050be:	9b02      	ldr	r3, [sp, #8]
	struct uart_event evt = {
 80050c0:	2300      	movs	r3, #0
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	9305      	str	r3, [sp, #20]
 80050c8:	9306      	str	r3, [sp, #24]
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	2303      	movs	r3, #3
 80050ce:	f88d 300c 	strb.w	r3, [sp, #12]
	if (data->async_cb) {
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	b11b      	cbz	r3, 80050de <uart_stm32_dma_replace_buffer+0x6e>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	a903      	add	r1, sp, #12
 80050da:	68a0      	ldr	r0, [r4, #8]
 80050dc:	4798      	blx	r3
}
 80050de:	b009      	add	sp, #36	; 0x24
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050e2 <uart_stm32_async_rx_enable>:
{
 80050e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e4:	b087      	sub	sp, #28
 80050e6:	4606      	mov	r6, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 80050e8:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80050ea:	6840      	ldr	r0, [r0, #4]
 80050ec:	6805      	ldr	r5, [r0, #0]
	if (data->dma_rx.dma_dev == NULL) {
 80050ee:	69a0      	ldr	r0, [r4, #24]
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d04a      	beq.n	800518a <uart_stm32_async_rx_enable+0xa8>
	if (data->dma_rx.enabled) {
 80050f4:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d149      	bne.n	8005190 <uart_stm32_async_rx_enable+0xae>
	data->dma_rx.offset = 0;
 80050fc:	66e0      	str	r0, [r4, #108]	; 0x6c
	data->dma_rx.buffer = rx_buf;
 80050fe:	6661      	str	r1, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = buf_size;
 8005100:	66a2      	str	r2, [r4, #104]	; 0x68
	data->dma_rx.counter = 0;
 8005102:	6720      	str	r0, [r4, #112]	; 0x70
	data->dma_rx.timeout = timeout;
 8005104:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005106:	68eb      	ldr	r3, [r5, #12]
 8005108:	f023 0320 	bic.w	r3, r3, #32
 800510c:	60eb      	str	r3, [r5, #12]
	data->dma_rx.blk_cfg.block_size = buf_size;
 800510e:	65a2      	str	r2, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 8005110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005112:	64a3      	str	r3, [r4, #72]	; 0x48
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 8005114:	69a0      	ldr	r0, [r4, #24]
	const struct dma_driver_api *api =
 8005116:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f104 0220 	add.w	r2, r4, #32
 800511e:	69e1      	ldr	r1, [r4, #28]
 8005120:	4798      	blx	r3
	if (ret != 0) {
 8005122:	4607      	mov	r7, r0
 8005124:	2800      	cmp	r0, #0
 8005126:	d136      	bne.n	8005196 <uart_stm32_async_rx_enable+0xb4>
	if (dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel)) {
 8005128:	69a0      	ldr	r0, [r4, #24]
 800512a:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800512c:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4798      	blx	r3
 8005132:	2800      	cmp	r0, #0
 8005134:	d132      	bne.n	800519c <uart_stm32_async_rx_enable+0xba>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005136:	6873      	ldr	r3, [r6, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800513a:	6931      	ldr	r1, [r6, #16]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800513c:	6953      	ldr	r3, [r2, #20]
 800513e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005142:	6153      	str	r3, [r2, #20]
	data->dma_rx.enabled = true;
 8005144:	2301      	movs	r3, #1
 8005146:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
  tmpreg = USARTx->SR;
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 800514e:	9b00      	ldr	r3, [sp, #0]
  tmpreg = USARTx->DR;
 8005150:	686b      	ldr	r3, [r5, #4]
 8005152:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8005154:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005156:	68eb      	ldr	r3, [r5, #12]
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	60eb      	str	r3, [r5, #12]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800515e:	696b      	ldr	r3, [r5, #20]
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	616b      	str	r3, [r5, #20]
	struct uart_event evt = {
 8005166:	2300      	movs	r3, #0
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	9303      	str	r3, [sp, #12]
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	9305      	str	r3, [sp, #20]
 8005172:	2303      	movs	r3, #3
 8005174:	f88d 3004 	strb.w	r3, [sp, #4]
	if (data->async_cb) {
 8005178:	68e3      	ldr	r3, [r4, #12]
 800517a:	b11b      	cbz	r3, 8005184 <uart_stm32_async_rx_enable+0xa2>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	a901      	add	r1, sp, #4
 8005180:	68a0      	ldr	r0, [r4, #8]
 8005182:	4798      	blx	r3
}
 8005184:	4638      	mov	r0, r7
 8005186:	b007      	add	sp, #28
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 800518a:	f06f 0712 	mvn.w	r7, #18
 800518e:	e7f9      	b.n	8005184 <uart_stm32_async_rx_enable+0xa2>
		return -EBUSY;
 8005190:	f06f 070f 	mvn.w	r7, #15
 8005194:	e7f6      	b.n	8005184 <uart_stm32_async_rx_enable+0xa2>
		return -EINVAL;
 8005196:	f06f 0715 	mvn.w	r7, #21
 800519a:	e7f3      	b.n	8005184 <uart_stm32_async_rx_enable+0xa2>
		return -EFAULT;
 800519c:	f06f 070d 	mvn.w	r7, #13
 80051a0:	e7f0      	b.n	8005184 <uart_stm32_async_rx_enable+0xa2>

080051a2 <uart_stm32_dma_rx_cb>:
{
 80051a2:	b570      	push	{r4, r5, r6, lr}
 80051a4:	b086      	sub	sp, #24
	struct uart_stm32_data *data = DEV_DATA(uart_dev);
 80051a6:	690c      	ldr	r4, [r1, #16]
	if (status != 0) {
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d135      	bne.n	8005218 <uart_stm32_dma_rx_cb+0x76>
 80051ac:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 80051ae:	f104 0678 	add.w	r6, r4, #120	; 0x78
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 fa71 	bl	800569a <k_work_cancel_delayable>
	data->dma_rx.counter = data->dma_rx.buffer_length;
 80051b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051ba:	6723      	str	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 80051bc:	2300      	movs	r3, #0
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	9303      	str	r3, [sp, #12]
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	2302      	movs	r3, #2
 80051ca:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->dma_rx.buffer,
 80051ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 80051d0:	9302      	str	r3, [sp, #8]
		.data.rx.offset = data->dma_rx.offset
 80051d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
	struct uart_event event = {
 80051d4:	9203      	str	r2, [sp, #12]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 80051d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80051d8:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 80051da:	9304      	str	r3, [sp, #16]
	data->dma_rx.offset = data->dma_rx.counter;
 80051dc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80051de:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d12d      	bne.n	8005240 <uart_stm32_dma_rx_cb+0x9e>
	if (data->rx_next_buffer != NULL) {
 80051e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d031      	beq.n	8005250 <uart_stm32_dma_rx_cb+0xae>
	struct uart_event evt = {
 80051ec:	2300      	movs	r3, #0
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	2304      	movs	r3, #4
 80051fa:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_buf.buf = data->dma_rx.buffer,
 80051fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 8005200:	9302      	str	r3, [sp, #8]
	if (data->async_cb) {
 8005202:	68e3      	ldr	r3, [r4, #12]
 8005204:	b11b      	cbz	r3, 800520e <uart_stm32_dma_rx_cb+0x6c>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005206:	6922      	ldr	r2, [r4, #16]
 8005208:	a901      	add	r1, sp, #4
 800520a:	68a0      	ldr	r0, [r4, #8]
 800520c:	4798      	blx	r3
		uart_stm32_dma_replace_buffer(uart_dev);
 800520e:	4628      	mov	r0, r5
 8005210:	f7ff ff2e 	bl	8005070 <uart_stm32_dma_replace_buffer>
}
 8005214:	b006      	add	sp, #24
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	461a      	mov	r2, r3
	struct uart_event event = {
 800521a:	2306      	movs	r3, #6
 800521c:	f88d 3004 	strb.w	r3, [sp, #4]
 8005220:	f88d 2008 	strb.w	r2, [sp, #8]
		.data.rx_stop.data.buf = data->dma_rx.buffer
 8005224:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	2300      	movs	r3, #0
 800522a:	9304      	str	r3, [sp, #16]
		.data.rx_stop.data.len = data->dma_rx.counter,
 800522c:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800522e:	9305      	str	r3, [sp, #20]
	if (data->async_cb) {
 8005230:	68e3      	ldr	r3, [r4, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ee      	beq.n	8005214 <uart_stm32_dma_rx_cb+0x72>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005236:	6922      	ldr	r2, [r4, #16]
 8005238:	a901      	add	r1, sp, #4
 800523a:	68a0      	ldr	r0, [r4, #8]
 800523c:	4798      	blx	r3
}
 800523e:	e7e9      	b.n	8005214 <uart_stm32_dma_rx_cb+0x72>
	if (data->async_cb) {
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ce      	beq.n	80051e4 <uart_stm32_dma_rx_cb+0x42>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005246:	6922      	ldr	r2, [r4, #16]
 8005248:	a901      	add	r1, sp, #4
 800524a:	68a0      	ldr	r0, [r4, #8]
 800524c:	4798      	blx	r3
}
 800524e:	e7c9      	b.n	80051e4 <uart_stm32_dma_rx_cb+0x42>
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 8005250:	2201      	movs	r2, #1
 8005252:	2300      	movs	r3, #0
 8005254:	4630      	mov	r0, r6
 8005256:	f7fd ffa7 	bl	80031a8 <k_work_reschedule>
 800525a:	e7db      	b.n	8005214 <uart_stm32_dma_rx_cb+0x72>

0800525c <uart_stm32_dma_rx_flush>:
{
 800525c:	b510      	push	{r4, lr}
 800525e:	b088      	sub	sp, #32
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005260:	6904      	ldr	r4, [r0, #16]
	if (dma_get_status(data->dma_rx.dma_dev,
 8005262:	69a0      	ldr	r0, [r4, #24]
 8005264:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 8005266:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	b143      	cbz	r3, 800527e <uart_stm32_dma_rx_flush+0x22>
		return api->get_status(dev, channel, stat);
 800526c:	aa06      	add	r2, sp, #24
 800526e:	4798      	blx	r3
 8005270:	b928      	cbnz	r0, 800527e <uart_stm32_dma_rx_flush+0x22>
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 8005272:	6ea3      	ldr	r3, [r4, #104]	; 0x68
					stat.pending_length;
 8005274:	9a07      	ldr	r2, [sp, #28]
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 8005276:	1a9b      	subs	r3, r3, r2
		if (rx_rcv_len > data->dma_rx.offset) {
 8005278:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800527a:	429a      	cmp	r2, r3
 800527c:	d301      	bcc.n	8005282 <uart_stm32_dma_rx_flush+0x26>
}
 800527e:	b008      	add	sp, #32
 8005280:	bd10      	pop	{r4, pc}
			data->dma_rx.counter = rx_rcv_len;
 8005282:	6723      	str	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 8005284:	2300      	movs	r3, #0
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	2302      	movs	r3, #2
 8005292:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->dma_rx.buffer,
 8005296:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	9203      	str	r2, [sp, #12]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 800529c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800529e:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 80052a0:	9304      	str	r3, [sp, #16]
	data->dma_rx.offset = data->dma_rx.counter;
 80052a2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80052a4:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0e9      	beq.n	800527e <uart_stm32_dma_rx_flush+0x22>
	if (data->async_cb) {
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0e6      	beq.n	800527e <uart_stm32_dma_rx_flush+0x22>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	a901      	add	r1, sp, #4
 80052b4:	68a0      	ldr	r0, [r4, #8]
 80052b6:	4798      	blx	r3
}
 80052b8:	e7e1      	b.n	800527e <uart_stm32_dma_rx_flush+0x22>

080052ba <uart_stm32_async_rx_disable>:
{
 80052ba:	b530      	push	{r4, r5, lr}
 80052bc:	b08b      	sub	sp, #44	; 0x2c
	struct uart_stm32_data *data = DEV_DATA(dev);
 80052be:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80052c0:	6843      	ldr	r3, [r0, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
	struct uart_event disabled_event = {
 80052c4:	2300      	movs	r3, #0
 80052c6:	9305      	str	r3, [sp, #20]
 80052c8:	9306      	str	r3, [sp, #24]
 80052ca:	9307      	str	r3, [sp, #28]
 80052cc:	9308      	str	r3, [sp, #32]
 80052ce:	9309      	str	r3, [sp, #36]	; 0x24
 80052d0:	2305      	movs	r3, #5
 80052d2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (!data->dma_rx.enabled) {
 80052d6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d031      	beq.n	8005342 <uart_stm32_async_rx_disable+0x88>
 80052de:	4605      	mov	r5, r0
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80052e0:	68d3      	ldr	r3, [r2, #12]
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	60d3      	str	r3, [r2, #12]
	uart_stm32_dma_rx_flush(dev);
 80052e8:	f7ff ffb8 	bl	800525c <uart_stm32_dma_rx_flush>
	struct uart_event evt = {
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	2304      	movs	r3, #4
 80052fa:	f88d 3000 	strb.w	r3, [sp]
		.data.rx_buf.buf = data->dma_rx.buffer,
 80052fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 8005300:	9301      	str	r3, [sp, #4]
	if (data->async_cb) {
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	b11b      	cbz	r3, 800530e <uart_stm32_async_rx_disable+0x54>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005306:	6922      	ldr	r2, [r4, #16]
 8005308:	4669      	mov	r1, sp
 800530a:	68a0      	ldr	r0, [r4, #8]
 800530c:	4798      	blx	r3
	struct uart_stm32_data *data = DEV_DATA(dev);
 800530e:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 8005310:	2500      	movs	r5, #0
 8005312:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 8005316:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800531a:	f000 f9be 	bl	800569a <k_work_cancel_delayable>
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 800531e:	69a0      	ldr	r0, [r4, #24]
 8005320:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 8005322:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4798      	blx	r3
	data->rx_next_buffer = NULL;
 8005328:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800532c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	if (data->async_cb) {
 8005330:	68e3      	ldr	r3, [r4, #12]
 8005332:	b11b      	cbz	r3, 800533c <uart_stm32_async_rx_disable+0x82>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	a905      	add	r1, sp, #20
 8005338:	68a0      	ldr	r0, [r4, #8]
 800533a:	4798      	blx	r3
	return 0;
 800533c:	2000      	movs	r0, #0
}
 800533e:	b00b      	add	sp, #44	; 0x2c
 8005340:	bd30      	pop	{r4, r5, pc}
	if (data->async_cb) {
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	b11b      	cbz	r3, 800534e <uart_stm32_async_rx_disable+0x94>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005346:	6922      	ldr	r2, [r4, #16]
 8005348:	a905      	add	r1, sp, #20
 800534a:	68a0      	ldr	r0, [r4, #8]
 800534c:	4798      	blx	r3
		return -EFAULT;
 800534e:	f06f 000d 	mvn.w	r0, #13
}
 8005352:	e7f4      	b.n	800533e <uart_stm32_async_rx_disable+0x84>

08005354 <uart_stm32_async_rx_timeout>:
{
 8005354:	b508      	push	{r3, lr}
 8005356:	4603      	mov	r3, r0
	const struct device *dev = data->uart_dev;
 8005358:	f850 0c70 	ldr.w	r0, [r0, #-112]
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 800535c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8005360:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d002      	beq.n	800536e <uart_stm32_async_rx_timeout+0x1a>
		uart_stm32_dma_rx_flush(dev);
 8005368:	f7ff ff78 	bl	800525c <uart_stm32_dma_rx_flush>
}
 800536c:	bd08      	pop	{r3, pc}
		uart_stm32_async_rx_disable(dev);
 800536e:	f7ff ffa4 	bl	80052ba <uart_stm32_async_rx_disable>
 8005372:	e7fb      	b.n	800536c <uart_stm32_async_rx_timeout+0x18>

08005374 <uart_stm32_isr>:
{
 8005374:	b530      	push	{r4, r5, lr}
 8005376:	b087      	sub	sp, #28
 8005378:	4604      	mov	r4, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 800537a:	6905      	ldr	r5, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800537c:	6843      	ldr	r3, [r0, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8005380:	68da      	ldr	r2, [r3, #12]
	if (LL_USART_IsEnabledIT_IDLE(UartInstance) &&
 8005382:	f012 0f10 	tst.w	r2, #16
 8005386:	d003      	beq.n	8005390 <uart_stm32_isr+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f012 0f10 	tst.w	r2, #16
 800538e:	d10c      	bne.n	80053aa <uart_stm32_isr+0x36>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8005390:	68da      	ldr	r2, [r3, #12]
	} else if (LL_USART_IsEnabledIT_TC(UartInstance) &&
 8005392:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005396:	d003      	beq.n	80053a0 <uart_stm32_isr+0x2c>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800539e:	d127      	bne.n	80053f0 <uart_stm32_isr+0x7c>
	uart_stm32_err_check(dev);
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7ff fd3b 	bl	8004e1c <uart_stm32_err_check>
}
 80053a6:	b007      	add	sp, #28
 80053a8:	bd30      	pop	{r4, r5, pc}
  tmpreg = USARTx->SR;
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80053ae:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80053b4:	9b01      	ldr	r3, [sp, #4]
		async_timer_start(&data->dma_rx.timeout_work,
 80053b6:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80053ba:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	if ((timeout != SYS_FOREVER_MS) && (timeout != 0)) {
 80053bc:	1c53      	adds	r3, r2, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d806      	bhi.n	80053d0 <uart_stm32_isr+0x5c>
		if (data->dma_rx.timeout == 0) {
 80053c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1eb      	bne.n	80053a0 <uart_stm32_isr+0x2c>
			uart_stm32_dma_rx_flush(dev);
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff ff47 	bl	800525c <uart_stm32_dma_rx_flush>
 80053ce:	e7e7      	b.n	80053a0 <uart_stm32_isr+0x2c>
		k_work_reschedule(work, K_MSEC(timeout));
 80053d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053d4:	17d9      	asrs	r1, r3, #31
 80053d6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80053da:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	18d2      	adds	r2, r2, r3
 80053e2:	eb41 030c 	adc.w	r3, r1, ip
 80053e6:	1892      	adds	r2, r2, r2
 80053e8:	415b      	adcs	r3, r3
 80053ea:	f7fd fedd 	bl	80031a8 <k_work_reschedule>
 80053ee:	e7e8      	b.n	80053c2 <uart_stm32_isr+0x4e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	60da      	str	r2, [r3, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80053f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
	struct uart_event event = {
 80053fe:	2300      	movs	r3, #0
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->dma_tx.buffer,
 800540a:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
	struct uart_event event = {
 800540e:	9202      	str	r2, [sp, #8]
		.data.tx.len = data->dma_tx.counter
 8005410:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
	struct uart_event event = {
 8005414:	9203      	str	r2, [sp, #12]
	data->dma_tx.buffer_length = 0;
 8005416:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	data->dma_tx.counter = 0;
 800541a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	if (data->async_cb) {
 800541e:	68eb      	ldr	r3, [r5, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0bd      	beq.n	80053a0 <uart_stm32_isr+0x2c>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8005424:	692a      	ldr	r2, [r5, #16]
 8005426:	a901      	add	r1, sp, #4
 8005428:	68a8      	ldr	r0, [r5, #8]
 800542a:	4798      	blx	r3
}
 800542c:	e7b8      	b.n	80053a0 <uart_stm32_isr+0x2c>

0800542e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800542e:	b148      	cbz	r0, 8005444 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8005430:	68c3      	ldr	r3, [r0, #12]
 8005432:	8818      	ldrh	r0, [r3, #0]
 8005434:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005438:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800543c:	bf14      	ite	ne
 800543e:	2000      	movne	r0, #0
 8005440:	2001      	moveq	r0, #1
 8005442:	4770      	bx	lr
		return false;
 8005444:	2000      	movs	r0, #0
}
 8005446:	4770      	bx	lr

08005448 <arch_system_halt>:
	__asm__ volatile(
 8005448:	f04f 0210 	mov.w	r2, #16
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	f382 8812 	msr	BASEPRI_MAX, r2
 8005454:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8005458:	e7fe      	b.n	8005458 <arch_system_halt+0x10>

0800545a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800545a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800545c:	f7ff fff4 	bl	8005448 <arch_system_halt>

08005460 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	4605      	mov	r5, r0
 8005464:	460e      	mov	r6, r1
 8005466:	f04f 0310 	mov.w	r3, #16
 800546a:	f3ef 8711 	mrs	r7, BASEPRI
 800546e:	f383 8812 	msr	BASEPRI_MAX, r3
 8005472:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8005476:	f7fe f9e1 	bl	800383c <z_impl_z_current_get>
 800547a:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	f7ff ffeb 	bl	800545a <k_sys_fatal_error_handler>
	__asm__ volatile(
 8005484:	f387 8811 	msr	BASEPRI, r7
 8005488:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800548c:	4620      	mov	r0, r4
 800548e:	f7fc f805 	bl	800149c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8005492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005494 <setup_thread_stack>:
{
 8005494:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8005496:	3207      	adds	r2, #7
 8005498:	f022 0207 	bic.w	r2, r2, #7
 800549c:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80054a0:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 80054a4:	6644      	str	r4, [r0, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
 80054a6:	6682      	str	r2, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 80054a8:	2200      	movs	r2, #0
 80054aa:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 80054ac:	18c8      	adds	r0, r1, r3
 80054ae:	bc10      	pop	{r4}
 80054b0:	4770      	bx	lr

080054b2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b2:	f3ef 8005 	mrs	r0, IPSR
}
 80054b6:	3800      	subs	r0, #0
 80054b8:	bf18      	it	ne
 80054ba:	2001      	movne	r0, #1
 80054bc:	4770      	bx	lr

080054be <z_impl_k_thread_name_set>:
}
 80054be:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80054c2:	4770      	bx	lr

080054c4 <z_impl_k_thread_start>:
{
 80054c4:	b508      	push	{r3, lr}
	z_sched_start(thread);
 80054c6:	f7fe f801 	bl	80034cc <z_sched_start>
}
 80054ca:	bd08      	pop	{r3, pc}

080054cc <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 80054cc:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 80054ce:	2400      	movs	r4, #0
 80054d0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 80054d2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80054d4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 80054d6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 80054d8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 80054da:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 80054dc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 80054de:	bc10      	pop	{r4}
 80054e0:	4770      	bx	lr

080054e2 <z_impl_k_thread_create>:
{
 80054e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e4:	b087      	sub	sp, #28
 80054e6:	4604      	mov	r4, r0
 80054e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80054ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80054ec:	2700      	movs	r7, #0
 80054ee:	9705      	str	r7, [sp, #20]
 80054f0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80054f2:	9704      	str	r7, [sp, #16]
 80054f4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80054f6:	9703      	str	r7, [sp, #12]
 80054f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80054fa:	9702      	str	r7, [sp, #8]
 80054fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80054fe:	9701      	str	r7, [sp, #4]
 8005500:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005502:	9700      	str	r7, [sp, #0]
 8005504:	f7fd fc1a 	bl	8002d3c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8005508:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800550c:	bf08      	it	eq
 800550e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8005512:	d102      	bne.n	800551a <z_impl_k_thread_create+0x38>
}
 8005514:	4620      	mov	r0, r4
 8005516:	b007      	add	sp, #28
 8005518:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800551a:	4632      	mov	r2, r6
 800551c:	462b      	mov	r3, r5
 800551e:	4620      	mov	r0, r4
 8005520:	f7fd fbfe 	bl	8002d20 <schedule_new_thread>
 8005524:	e7f6      	b.n	8005514 <z_impl_k_thread_create+0x32>

08005526 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8005526:	b508      	push	{r3, lr}
	__asm__ volatile(
 8005528:	f04f 0210 	mov.w	r2, #16
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	f382 8812 	msr	BASEPRI_MAX, r2
 8005534:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8005538:	f7fb fd4c 	bl	8000fd4 <arch_cpu_idle>
 800553c:	e7f4      	b.n	8005528 <idle+0x2>

0800553e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800553e:	b13a      	cbz	r2, 8005550 <z_impl_k_sem_init+0x12>
 8005540:	428a      	cmp	r2, r1
 8005542:	d308      	bcc.n	8005556 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
 8005544:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8005546:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8005548:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800554a:	6040      	str	r0, [r0, #4]
	return 0;
 800554c:	2000      	movs	r0, #0
 800554e:	4770      	bx	lr
		return -EINVAL;
 8005550:	f06f 0015 	mvn.w	r0, #21
 8005554:	4770      	bx	lr
 8005556:	f06f 0015 	mvn.w	r0, #21
}
 800555a:	4770      	bx	lr

0800555c <cancel_async_locked>:
{
 800555c:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
 800555e:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8005560:	f012 0f02 	tst.w	r2, #2
 8005564:	d009      	beq.n	800557a <cancel_async_locked+0x1e>
	return *flagp;
 8005566:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 8005568:	f012 000f 	ands.w	r0, r2, #15
 800556c:	d004      	beq.n	8005578 <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
 800556e:	f042 0202 	orr.w	r2, r2, #2
 8005572:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 8005574:	f002 000f 	and.w	r0, r2, #15
}
 8005578:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
 800557a:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
 800557c:	f022 0104 	bic.w	r1, r2, #4
 8005580:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 8005582:	f012 0f04 	tst.w	r2, #4
 8005586:	d0ee      	beq.n	8005566 <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
 8005588:	f100 0c80 	add.w	ip, r0, #128	; 0x80
	return list->head;
 800558c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005590:	2100      	movs	r1, #0
 8005592:	2a00      	cmp	r2, #0
 8005594:	d0e7      	beq.n	8005566 <cancel_async_locked+0xa>
 8005596:	4293      	cmp	r3, r2
 8005598:	d002      	beq.n	80055a0 <cancel_async_locked+0x44>
 800559a:	4611      	mov	r1, r2
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	e7f8      	b.n	8005592 <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
 80055a0:	b141      	cbz	r1, 80055b4 <cancel_async_locked+0x58>
	return node->next;
 80055a2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80055a4:	600a      	str	r2, [r1, #0]
	return list->tail;
 80055a6:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00c      	beq.n	80055c8 <cancel_async_locked+0x6c>
	parent->next = child;
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 80055b2:	e7d8      	b.n	8005566 <cancel_async_locked+0xa>
	return node->next;
 80055b4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
 80055b6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return list->tail;
 80055ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80055be:	428b      	cmp	r3, r1
 80055c0:	d1f5      	bne.n	80055ae <cancel_async_locked+0x52>
	list->tail = node;
 80055c2:	f8cc 2004 	str.w	r2, [ip, #4]
}
 80055c6:	e7f2      	b.n	80055ae <cancel_async_locked+0x52>
	list->tail = node;
 80055c8:	f8cc 1004 	str.w	r1, [ip, #4]
}
 80055cc:	e7ef      	b.n	80055ae <cancel_async_locked+0x52>

080055ce <work_timeout>:
{
 80055ce:	b510      	push	{r4, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	4603      	mov	r3, r0
 80055d4:	f04f 0210 	mov.w	r2, #16
 80055d8:	f3ef 8411 	mrs	r4, BASEPRI
 80055dc:	f382 8812 	msr	BASEPRI_MAX, r2
 80055e0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 80055e4:	2200      	movs	r2, #0
 80055e6:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 80055e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 80055ec:	f022 0108 	bic.w	r1, r2, #8
 80055f0:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 80055f4:	f012 0f08 	tst.w	r2, #8
 80055f8:	d105      	bne.n	8005606 <work_timeout+0x38>
	__asm__ volatile(
 80055fa:	f384 8811 	msr	BASEPRI, r4
 80055fe:	f3bf 8f6f 	isb	sy
}
 8005602:	b002      	add	sp, #8
 8005604:	bd10      	pop	{r4, pc}
 8005606:	3810      	subs	r0, #16
		queue = dw->queue;
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 800560c:	a901      	add	r1, sp, #4
 800560e:	f7fd fc51 	bl	8002eb4 <submit_to_queue_locked>
 8005612:	e7f2      	b.n	80055fa <work_timeout+0x2c>

08005614 <cancel_delayable_async_locked>:
{
 8005614:	b510      	push	{r4, lr}
 8005616:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 8005618:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 800561a:	f023 0208 	bic.w	r2, r3, #8
 800561e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8005620:	f013 0f08 	tst.w	r3, #8
 8005624:	d103      	bne.n	800562e <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
 8005626:	4620      	mov	r0, r4
 8005628:	f7ff ff98 	bl	800555c <cancel_async_locked>
}
 800562c:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
 800562e:	3010      	adds	r0, #16
 8005630:	f000 f98e 	bl	8005950 <z_abort_timeout>
		ret = true;
 8005634:	e7f7      	b.n	8005626 <cancel_delayable_async_locked+0x12>

08005636 <k_work_init_delayable>:
{
 8005636:	b538      	push	{r3, r4, r5, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 800563c:	2230      	movs	r2, #48	; 0x30
 800563e:	2100      	movs	r1, #0
 8005640:	f7fe fdc8 	bl	80041d4 <memset>
 8005644:	6065      	str	r5, [r4, #4]
 8005646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800564a:	60e3      	str	r3, [r4, #12]
}
 800564c:	bd38      	pop	{r3, r4, r5, pc}

0800564e <k_work_reschedule_for_queue>:
{
 800564e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005650:	b083      	sub	sp, #12
 8005652:	9001      	str	r0, [sp, #4]
 8005654:	460c      	mov	r4, r1
 8005656:	4616      	mov	r6, r2
 8005658:	461d      	mov	r5, r3
	__asm__ volatile(
 800565a:	f04f 0310 	mov.w	r3, #16
 800565e:	f3ef 8711 	mrs	r7, BASEPRI
 8005662:	f383 8812 	msr	BASEPRI_MAX, r3
 8005666:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 800566a:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 800566c:	f023 0208 	bic.w	r2, r3, #8
 8005670:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8005672:	f013 0f08 	tst.w	r3, #8
 8005676:	d10b      	bne.n	8005690 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 8005678:	4632      	mov	r2, r6
 800567a:	462b      	mov	r3, r5
 800567c:	4621      	mov	r1, r4
 800567e:	a801      	add	r0, sp, #4
 8005680:	f7fd fc84 	bl	8002f8c <schedule_for_queue_locked>
	__asm__ volatile(
 8005684:	f387 8811 	msr	BASEPRI, r7
 8005688:	f3bf 8f6f 	isb	sy
}
 800568c:	b003      	add	sp, #12
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 8005690:	f101 0010 	add.w	r0, r1, #16
 8005694:	f000 f95c 	bl	8005950 <z_abort_timeout>
		ret = true;
 8005698:	e7ee      	b.n	8005678 <k_work_reschedule_for_queue+0x2a>

0800569a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 800569a:	b510      	push	{r4, lr}
	__asm__ volatile(
 800569c:	f04f 0310 	mov.w	r3, #16
 80056a0:	f3ef 8411 	mrs	r4, BASEPRI
 80056a4:	f383 8812 	msr	BASEPRI_MAX, r3
 80056a8:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
 80056ac:	f7ff ffb2 	bl	8005614 <cancel_delayable_async_locked>
	__asm__ volatile(
 80056b0:	f384 8811 	msr	BASEPRI, r4
 80056b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 80056b8:	bd10      	pop	{r4, pc}

080056ba <thread_active_elsewhere>:
}
 80056ba:	2000      	movs	r0, #0
 80056bc:	4770      	bx	lr

080056be <pended_on_thread>:
}
 80056be:	6880      	ldr	r0, [r0, #8]
 80056c0:	4770      	bx	lr

080056c2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 80056c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80056c6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 80056ca:	4283      	cmp	r3, r0
 80056cc:	d001      	beq.n	80056d2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 80056ce:	1ac0      	subs	r0, r0, r3
 80056d0:	4770      	bx	lr
	return 0;
 80056d2:	2000      	movs	r0, #0
}
 80056d4:	4770      	bx	lr

080056d6 <z_reschedule_irqlock>:
{
 80056d6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80056d8:	4603      	mov	r3, r0
 80056da:	b920      	cbnz	r0, 80056e6 <z_reschedule_irqlock+0x10>
 80056dc:	f3ef 8205 	mrs	r2, IPSR
 80056e0:	b942      	cbnz	r2, 80056f4 <z_reschedule_irqlock+0x1e>
 80056e2:	2201      	movs	r2, #1
 80056e4:	e000      	b.n	80056e8 <z_reschedule_irqlock+0x12>
 80056e6:	2200      	movs	r2, #0
	if (resched(key)) {
 80056e8:	b932      	cbnz	r2, 80056f8 <z_reschedule_irqlock+0x22>
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
}
 80056f2:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80056f4:	2200      	movs	r2, #0
 80056f6:	e7f7      	b.n	80056e8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fb fcb9 	bl	8001070 <arch_swap>
	return ret;
 80056fe:	e7f8      	b.n	80056f2 <z_reschedule_irqlock+0x1c>

08005700 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8005700:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 8005702:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
 8005704:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8005706:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800570c:	604b      	str	r3, [r1, #4]
}
 800570e:	4770      	bx	lr

08005710 <z_priq_dumb_best>:
{
 8005710:	4603      	mov	r3, r0
	return list->head == list;
 8005712:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005714:	4283      	cmp	r3, r0
 8005716:	d000      	beq.n	800571a <z_priq_dumb_best+0xa>
}
 8005718:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800571a:	2000      	movs	r0, #0
	return thread;
 800571c:	e7fc      	b.n	8005718 <z_priq_dumb_best+0x8>

0800571e <z_ready_thread>:
{
 800571e:	b538      	push	{r3, r4, r5, lr}
 8005720:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8005722:	2300      	movs	r3, #0
	__asm__ volatile(
 8005724:	f04f 0210 	mov.w	r2, #16
 8005728:	f3ef 8511 	mrs	r5, BASEPRI
 800572c:	f382 8812 	msr	BASEPRI_MAX, r2
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	e004      	b.n	8005740 <z_ready_thread+0x22>
	__asm__ volatile(
 8005736:	f385 8811 	msr	BASEPRI, r5
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	2301      	movs	r3, #1
 8005740:	b943      	cbnz	r3, 8005754 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 8005742:	4620      	mov	r0, r4
 8005744:	f7ff ffb9 	bl	80056ba <thread_active_elsewhere>
 8005748:	2800      	cmp	r0, #0
 800574a:	d1f4      	bne.n	8005736 <z_ready_thread+0x18>
			ready_thread(thread);
 800574c:	4620      	mov	r0, r4
 800574e:	f7fd fe7d 	bl	800344c <ready_thread>
 8005752:	e7f0      	b.n	8005736 <z_ready_thread+0x18>
}
 8005754:	bd38      	pop	{r3, r4, r5, pc}

08005756 <z_thread_timeout>:
{
 8005756:	b570      	push	{r4, r5, r6, lr}
 8005758:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800575a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800575e:	2300      	movs	r3, #0
	__asm__ volatile(
 8005760:	f04f 0210 	mov.w	r2, #16
 8005764:	f3ef 8611 	mrs	r6, BASEPRI
 8005768:	f382 8812 	msr	BASEPRI_MAX, r2
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	e011      	b.n	8005796 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005772:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8005776:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800577a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8005786:	4628      	mov	r0, r5
 8005788:	f7fd fe60 	bl	800344c <ready_thread>
	__asm__ volatile(
 800578c:	f386 8811 	msr	BASEPRI, r6
 8005790:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8005794:	2301      	movs	r3, #1
 8005796:	b9ab      	cbnz	r3, 80057c4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 8005798:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800579c:	f013 0f28 	tst.w	r3, #40	; 0x28
 80057a0:	d1f4      	bne.n	800578c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 80057a2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0e3      	beq.n	8005772 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7ff ff87 	bl	80056be <pended_on_thread>
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7ff ffa5 	bl	8005700 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80057b6:	7b6b      	ldrb	r3, [r5, #13]
 80057b8:	f023 0302 	bic.w	r3, r3, #2
 80057bc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60ab      	str	r3, [r5, #8]
}
 80057c2:	e7d6      	b.n	8005772 <z_thread_timeout+0x1c>
}
 80057c4:	bd70      	pop	{r4, r5, r6, pc}

080057c6 <add_to_waitq_locked>:
{
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	4605      	mov	r5, r0
 80057ca:	460e      	mov	r6, r1
	unready_thread(thread);
 80057cc:	f7fd fe9c 	bl	8003508 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80057d0:	7b6b      	ldrb	r3, [r5, #13]
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 80057d8:	b1b6      	cbz	r6, 8005808 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 80057da:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 80057dc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d019      	beq.n	8005816 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80057e2:	b164      	cbz	r4, 80057fe <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80057e4:	4621      	mov	r1, r4
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7ff ff6b 	bl	80056c2 <z_sched_prio_cmp>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc0c      	bgt.n	800580a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80057f0:	b12c      	cbz	r4, 80057fe <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 80057f2:	6873      	ldr	r3, [r6, #4]
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d002      	beq.n	80057fe <add_to_waitq_locked+0x38>
 80057f8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80057fa:	2c00      	cmp	r4, #0
 80057fc:	d1f1      	bne.n	80057e2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 80057fe:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 8005800:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 8005802:	606b      	str	r3, [r5, #4]
	tail->next = node;
 8005804:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8005806:	6075      	str	r5, [r6, #4]
}
 8005808:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800580a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800580c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800580e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8005810:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8005812:	6065      	str	r5, [r4, #4]
}
 8005814:	e7f8      	b.n	8005808 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005816:	2400      	movs	r4, #0
 8005818:	e7e3      	b.n	80057e2 <add_to_waitq_locked+0x1c>

0800581a <pend>:
{
 800581a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	460e      	mov	r6, r1
 8005822:	4691      	mov	r9, r2
 8005824:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8005826:	2400      	movs	r4, #0
	__asm__ volatile(
 8005828:	f04f 0310 	mov.w	r3, #16
 800582c:	f3ef 8711 	mrs	r7, BASEPRI
 8005830:	f383 8812 	msr	BASEPRI_MAX, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	e008      	b.n	800584c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	f7ff ffc2 	bl	80057c6 <add_to_waitq_locked>
	__asm__ volatile(
 8005842:	f387 8811 	msr	BASEPRI, r7
 8005846:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800584a:	2401      	movs	r4, #1
 800584c:	2c00      	cmp	r4, #0
 800584e:	d0f4      	beq.n	800583a <pend+0x20>
	add_thread_timeout(thread, timeout);
 8005850:	464a      	mov	r2, r9
 8005852:	4643      	mov	r3, r8
 8005854:	4628      	mov	r0, r5
 8005856:	f7fd fcaf 	bl	80031b8 <add_thread_timeout>
}
 800585a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800585e <z_unpend_first_thread>:
{
 800585e:	b570      	push	{r4, r5, r6, lr}
 8005860:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8005862:	2300      	movs	r3, #0
	__asm__ volatile(
 8005864:	f04f 0210 	mov.w	r2, #16
 8005868:	f3ef 8611 	mrs	r6, BASEPRI
 800586c:	f382 8812 	msr	BASEPRI_MAX, r2
 8005870:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8005874:	461c      	mov	r4, r3
 8005876:	e004      	b.n	8005882 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 8005878:	f386 8811 	msr	BASEPRI, r6
 800587c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8005880:	2301      	movs	r3, #1
 8005882:	b9ab      	cbnz	r3, 80058b0 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 8005884:	4628      	mov	r0, r5
 8005886:	f7ff ff43 	bl	8005710 <z_priq_dumb_best>
		if (thread != NULL) {
 800588a:	4604      	mov	r4, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d0f3      	beq.n	8005878 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8005890:	f7ff ff15 	bl	80056be <pended_on_thread>
 8005894:	4621      	mov	r1, r4
 8005896:	f7ff ff33 	bl	8005700 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800589a:	7b63      	ldrb	r3, [r4, #13]
 800589c:	f023 0302 	bic.w	r3, r3, #2
 80058a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
 80058a6:	f104 0018 	add.w	r0, r4, #24
 80058aa:	f000 f851 	bl	8005950 <z_abort_timeout>
 80058ae:	e7e3      	b.n	8005878 <z_unpend_first_thread+0x1a>
}
 80058b0:	4620      	mov	r0, r4
 80058b2:	bd70      	pop	{r4, r5, r6, pc}

080058b4 <z_sched_wake>:
{
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	4605      	mov	r5, r0
 80058ba:	4688      	mov	r8, r1
 80058bc:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 80058be:	2300      	movs	r3, #0
	__asm__ volatile(
 80058c0:	f04f 0210 	mov.w	r2, #16
 80058c4:	f3ef 8611 	mrs	r6, BASEPRI
 80058c8:	f382 8812 	msr	BASEPRI_MAX, r2
 80058cc:	f3bf 8f6f 	isb	sy
	bool ret = false;
 80058d0:	4699      	mov	r9, r3
 80058d2:	e004      	b.n	80058de <z_sched_wake+0x2a>
	__asm__ volatile(
 80058d4:	f386 8811 	msr	BASEPRI, r6
 80058d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80058dc:	2301      	movs	r3, #1
 80058de:	b9eb      	cbnz	r3, 800591c <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7ff ff15 	bl	8005710 <z_priq_dumb_best>
		if (thread != NULL) {
 80058e6:	4604      	mov	r4, r0
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d0f3      	beq.n	80058d4 <z_sched_wake+0x20>
 80058ec:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 80058f0:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80058f2:	f7ff fee4 	bl	80056be <pended_on_thread>
 80058f6:	4621      	mov	r1, r4
 80058f8:	f7ff ff02 	bl	8005700 <z_priq_dumb_remove>
 80058fc:	7b63      	ldrb	r3, [r4, #13]
 80058fe:	f023 0302 	bic.w	r3, r3, #2
 8005902:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	60a3      	str	r3, [r4, #8]
 8005908:	f104 0018 	add.w	r0, r4, #24
 800590c:	f000 f820 	bl	8005950 <z_abort_timeout>
			ready_thread(thread);
 8005910:	4620      	mov	r0, r4
 8005912:	f7fd fd9b 	bl	800344c <ready_thread>
			ret = true;
 8005916:	f04f 0901 	mov.w	r9, #1
 800591a:	e7db      	b.n	80058d4 <z_sched_wake+0x20>
}
 800591c:	4648      	mov	r0, r9
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005922 <remove_timeout>:
{
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 8005926:	f7fd ffef 	bl	8003908 <next>
 800592a:	b148      	cbz	r0, 8005940 <remove_timeout+0x1e>
 800592c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800592e:	6920      	ldr	r0, [r4, #16]
 8005930:	6961      	ldr	r1, [r4, #20]
 8005932:	6913      	ldr	r3, [r2, #16]
 8005934:	181b      	adds	r3, r3, r0
 8005936:	6950      	ldr	r0, [r2, #20]
 8005938:	eb41 0100 	adc.w	r1, r1, r0
 800593c:	6113      	str	r3, [r2, #16]
 800593e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 8005940:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 8005942:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 8005944:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8005946:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800594c:	6063      	str	r3, [r4, #4]
}
 800594e:	bd10      	pop	{r4, pc}

08005950 <z_abort_timeout>:
{
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8005954:	2300      	movs	r3, #0
	__asm__ volatile(
 8005956:	f04f 0210 	mov.w	r2, #16
 800595a:	f3ef 8611 	mrs	r6, BASEPRI
 800595e:	f382 8812 	msr	BASEPRI_MAX, r2
 8005962:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 8005966:	f06f 0015 	mvn.w	r0, #21
 800596a:	e004      	b.n	8005976 <z_abort_timeout+0x26>
	__asm__ volatile(
 800596c:	f386 8811 	msr	BASEPRI, r6
 8005970:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8005974:	2301      	movs	r3, #1
 8005976:	461d      	mov	r5, r3
 8005978:	b93b      	cbnz	r3, 800598a <z_abort_timeout+0x3a>
	return node->next != NULL;
 800597a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f5      	beq.n	800596c <z_abort_timeout+0x1c>
			remove_timeout(to);
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff ffce 	bl	8005922 <remove_timeout>
			ret = 0;
 8005986:	4628      	mov	r0, r5
 8005988:	e7f0      	b.n	800596c <z_abort_timeout+0x1c>
}
 800598a:	bd70      	pop	{r4, r5, r6, pc}

0800598c <z_set_timeout_expiry>:
{
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	4605      	mov	r5, r0
 8005990:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 8005992:	2300      	movs	r3, #0
	__asm__ volatile(
 8005994:	f04f 0210 	mov.w	r2, #16
 8005998:	f3ef 8611 	mrs	r6, BASEPRI
 800599c:	f382 8812 	msr	BASEPRI_MAX, r2
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	e00a      	b.n	80059bc <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 80059a6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 80059a8:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80059ac:	2801      	cmp	r0, #1
 80059ae:	dd00      	ble.n	80059b2 <z_set_timeout_expiry+0x26>
 80059b0:	b97c      	cbnz	r4, 80059d2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 80059b2:	f386 8811 	msr	BASEPRI, r6
 80059b6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80059ba:	2301      	movs	r3, #1
 80059bc:	461c      	mov	r4, r3
 80059be:	b97b      	cbnz	r3, 80059e0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 80059c0:	f7fd ffba 	bl	8003938 <next_timeout>
			      || (ticks <= next_to);
 80059c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80059c8:	d0ed      	beq.n	80059a6 <z_set_timeout_expiry+0x1a>
 80059ca:	42a8      	cmp	r0, r5
 80059cc:	dbec      	blt.n	80059a8 <z_set_timeout_expiry+0x1c>
 80059ce:	2401      	movs	r4, #1
 80059d0:	e7ea      	b.n	80059a8 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80059d2:	4639      	mov	r1, r7
 80059d4:	42a8      	cmp	r0, r5
 80059d6:	bfa8      	it	ge
 80059d8:	4628      	movge	r0, r5
 80059da:	f7fc fe9f 	bl	800271c <sys_clock_set_timeout>
 80059de:	e7e8      	b.n	80059b2 <z_set_timeout_expiry+0x26>
}
 80059e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059e2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 80059e2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 80059e4:	f7fe f8be 	bl	8003b64 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 80059e8:	bd08      	pop	{r3, pc}

080059ea <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 80059ea:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 80059ec:	f7fe f8ba 	bl	8003b64 <sys_clock_tick_get>
}
 80059f0:	bd08      	pop	{r3, pc}
