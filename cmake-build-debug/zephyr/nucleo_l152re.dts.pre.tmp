/dts-v1/;
/ {
 #address-cells = <1>;
 #size-cells = <1>;
 chosen { };
 aliases { };
};
/ {
 soc {
  #address-cells = <1>;
  #size-cells = <1>;
  compatible = "simple-bus";
  interrupt-parent = <&nvic>;
  ranges;
  nvic: interrupt-controller@e000e100 {
   #address-cells = <1>;
   compatible = "arm,v7m-nvic";
   reg = <0xe000e100 0xc00>;
   interrupt-controller;
   #interrupt-cells = <2>;
  };
  systick: timer@e000e010 {
   compatible = "arm,armv7m-systick";
   reg = <0xe000e010 0x10>;
  };
 };
};
/ {
 chosen {
  zephyr,flash-controller = &flash;
 };
 cpus {
  #address-cells = <1>;
  #size-cells = <0>;
  cpu@0 {
   device_type = "cpu";
   compatible = "arm,cortex-m3";
   reg = <0>;
  };
 };
 sram0: memory@20000000 {
  compatible = "mmio-sram";
 };
 clocks {
  clk_hse: clk-hse {
   #clock-cells = <0>;
   compatible = "st,stm32-hse-clock";
   status = "disabled";
  };
  clk_hsi: clk-hsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((16) * 1000 * 1000)>;
   status = "disabled";
  };
  clk_msi: clk-msi {
   #clock-cells = <0>;
   compatible = "st,stm32l0-msi-clock";
   msi-range = <5>;
   status = "disabled";
  };
  clk_lse: clk-lse {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <32768>;
   status = "disabled";
  };
  clk_lsi: clk-lsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((37) * 1000)>;
   status = "disabled";
  };
  pll: pll {
   #clock-cells = <0>;
   compatible = "st,stm32l0-pll-clock";
   status = "disabled";
  };
 };
 soc {
  flash: flash-controller@40023c00 {
   compatible = "st,stm32-flash-controller", "st,stm32l1-flash-controller";
   label = "FLASH_CTRL";
   reg = <0x40023c00 0x400>;
   interrupts = <4 0>;
   clocks = <&rcc 0 0x00008000>;
   #address-cells = <1>;
   #size-cells = <1>;
   flash0: flash@8000000 {
    compatible = "st,stm32-nv-flash", "soc-nv-flash";
    label = "FLASH_STM32";
    write-block-size = <4>;
    max-erase-time = <4>;
   };
  };
  rcc: rcc@40023800 {
   compatible = "st,stm32-rcc";
   #clock-cells = <2>;
   reg = <0x40023800 0x400>;
  };
  rtc: rtc@40002800 {
   compatible = "st,stm32-rtc";
   reg = <0x40002800 0x400>;
   interrupts = <41 0>;
   clocks = <&rcc 2 0x10000000>;
   prescaler = <32768>;
   status = "disabled";
   label = "RTC_0";
  };
  usart2: serial@40004400 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004400 0x400>;
   clocks = <&rcc 2 0x00020000>;
   interrupts = <38 0>;
   status = "disabled";
   label = "UART_2";
  };
  usart3: serial@40004800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004800 0x400>;
   clocks = <&rcc 2 0x00040000>;
   interrupts = <39 0>;
   status = "disabled";
   label = "UART_3";
  };
  uart4: serial@40004c00 {
   compatible = "st,stm32-uart";
   reg = <0x40004c00 0x400>;
   clocks = <&rcc 2 0x00080000>;
   interrupts = <48 0>;
   status = "disabled";
   label = "UART_4";
  };
  uart5: serial@40005000 {
   compatible = "st,stm32-uart";
   reg = <0x40005000 0x400>;
   clocks = <&rcc 2 0x00100000>;
   interrupts = <49 0>;
   status = "disabled";
   label = "UART_5";
  };
  i2c1: i2c@40005400 {
   compatible = "st,stm32-i2c-v1";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005400 0x400>;
   clocks = <&rcc 2 0x00200000>;
   interrupts = <31 0>, <32 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_1";
  };
  i2c2: i2c@40005800 {
   compatible = "st,stm32-i2c-v1";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005800 0x400>;
   clocks = <&rcc 2 0x00400000>;
   interrupts = <33 0>, <34 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_2";
  };
  spi1: spi@40013000 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   clocks = <&rcc 3 0x00001000>;
   interrupts = <35 0>;
   status = "disabled";
   label = "SPI_1";
  };
  spi2: spi@40003800 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   clocks = <&rcc 2 0x00004000>;
   interrupts = <36 0>;
   status = "disabled";
   label = "SPI_2";
  };
  usart1: serial@40013800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40013800 0x400>;
   clocks = <&rcc 3 0x00004000>;
   interrupts = <37 0>;
   status = "disabled";
   label = "UART_1";
  };
  adc1: adc@40012400 {
   compatible = "st,stm32-adc";
   reg = <0x40012400 0x400>;
   clocks = <&rcc 3 0x00000200>;
   interrupts = <18 0>;
   status = "disabled";
   label = "ADC_1";
   #io-channel-cells = <1>;
  };
  dac1: dac@40007400 {
   compatible = "st,stm32-dac";
   reg = <0x40007400 0x400>;
   clocks = <&rcc 2 0x20000000>;
   status = "disabled";
   label = "DAC_1";
   #io-channel-cells = <1>;
  };
  exti: interrupt-controller@40010400 {
   compatible = "st,stm32-exti";
   interrupt-controller;
   #interrupt-cells = <1>;
   reg = <0x40010400 0x400>;
  };
  timers2: timers@40000000 {
   compatible = "st,stm32-timers";
   reg = <0x40000000 0x400>;
   clocks = <&rcc 2 0x00000001>;
   interrupts = <28 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_2";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_2";
    #pwm-cells = <3>;
   };
  };
  timers3: timers@40000400 {
   compatible = "st,stm32-timers";
   reg = <0x40000400 0x400>;
   clocks = <&rcc 2 0x00000002>;
   interrupts = <29 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_3";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_3";
    #pwm-cells = <3>;
   };
  };
  timers4: timers@40000800 {
   compatible = "st,stm32-timers";
   reg = <0x40000800 0x400>;
   clocks = <&rcc 2 0x00000004>;
   interrupts = <30 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_4";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_4";
    #pwm-cells = <3>;
   };
  };
  timers9: timers@40010800 {
   compatible = "st,stm32-timers";
   reg = <0x40010800 0x400>;
   clocks = <&rcc 3 0x00000004>;
   interrupts = <25 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_9";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_9";
    #pwm-cells = <3>;
   };
  };
  timers10: timers@40010c00 {
   compatible = "st,stm32-timers";
   reg = <0x40010c00 0x400>;
   clocks = <&rcc 3 0x00000008>;
   interrupts = <26 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_10";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_10";
    #pwm-cells = <3>;
   };
  };
  timers11: timers@40011400 {
   compatible = "st,stm32-timers";
   reg = <0x40011400 0x400>;
   clocks = <&rcc 3 0x00000010>;
   interrupts = <27 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_11";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_11";
    #pwm-cells = <3>;
   };
  };
  pinctrl: pin-controller@40020000 {
   compatible = "st,stm32-pinctrl";
   #address-cells = <1>;
   #size-cells = <1>;
   reg = <0x40020000 0x2000>;
   gpioa: gpio@40020000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020000 0x400>;
    clocks = <&rcc 0 0x00000001>;
    label = "GPIOA";
   };
   gpiob: gpio@40020400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020400 0x400>;
    clocks = <&rcc 0 0x00000002>;
    label = "GPIOB";
   };
   gpioc: gpio@40020800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020800 0x400>;
    clocks = <&rcc 0 0x00000004>;
    label = "GPIOC";
   };
   gpiod: gpio@40020c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020c00 0x400>;
    clocks = <&rcc 0 0x00000008>;
    label = "GPIOD";
   };
   gpioe: gpio@40021000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021000 0x400>;
    clocks = <&rcc 0 0x00000010>;
    label = "GPIOE";
   };
   gpioh: gpio@40021400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021400 0x400>;
    clocks = <&rcc 0 0x00000020>;
    label = "GPIOH";
   };
  };
  iwdg: watchdog@40003000 {
   compatible = "st,stm32-watchdog";
   reg = <0x40003000 0x400>;
   label = "IWDG";
   status = "disabled";
  };
  wwdg: watchdog@40002c00 {
   compatible = "st,stm32-window-watchdog";
   reg = <0x40002C00 0x400>;
   clocks = <&rcc 2 0x00000800>;
   interrupts = <0 7>;
   status = "disabled";
   label = "WWDG";
  };
  eeprom: eeprom@8080000{
   compatible = "st,stm32-eeprom";
   status = "disabled";
   label = "EEPROM_0";
  };
  dma1: dma@40026000 {
   compatible = "st,stm32-dma-v2bis";
   #dma-cells = <2>;
   reg = <0x40026000 0x400>;
   clocks = <&rcc 0 0x1000000>;
   interrupts = <11 0 12 0 13 0 14 0 15 0 16 0 17 0>;
   status = "disabled";
   label = "DMA_1";
  };
 };
};
&nvic {
 arm,num-irq-priority-bits = <4>;
};
/ {
 sram0: memory@20000000 {
  reg = <0x20000000 ((80) * 1024)>;
 };
 soc {
  flash-controller@40023c00 {
   flash0: flash@8000000 {
    reg = <0x08000000 ((512) * 1024)>;
   };
  };
  timers5: timers@40000C00 {
   compatible = "st,stm32-timers";
   reg = <0x40000C00 0x400>;
   clocks = <&rcc 2 0x00000008>;
   interrupts = <45 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_5";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_5";
    #pwm-cells = <3>;
   };
  };
  eeprom: eeprom@8080000{
   reg = <0x08080000 ((16) * 1024)>;
  };
 };
};
/ {
 soc {
  pinctrl: pin-controller@40020000 {
   adc_in0_pa0: adc_in0_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in1_pa1: adc_in1_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in2_pa2: adc_in2_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc_in3_pa3: adc_in3_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc_in4_pa4: adc_in4_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc_in5_pa5: adc_in5_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc_in6_pa6: adc_in6_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x10))>;
   };
   adc_in7_pa7: adc_in7_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x10))>;
   };
   adc_in8_pb0: adc_in8_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in9_pb1: adc_in9_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in18_pb12: adc_in18_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x10))>;
   };
   adc_in19_pb13: adc_in19_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x10))>;
   };
   adc_in20_pb14: adc_in20_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x10))>;
   };
   adc_in21_pb15: adc_in21_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x10))>;
   };
   adc_in10_pc0: adc_in10_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in11_pc1: adc_in11_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in12_pc2: adc_in12_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc_in13_pc3: adc_in13_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc_in14_pc4: adc_in14_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc_in15_pc5: adc_in15_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   dac_out1_pa4: dac_out1_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   dac_out2_pa5: dac_out2_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   i2c1_scl_pb6: i2c1_scl_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_scl_pb8: i2c1_scl_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pb10: i2c2_scl_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb7: i2c1_sda_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb9: i2c1_sda_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pb11: i2c2_sda_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2s2_ck_pb13: i2s2_ck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s3_ck_pb3: i2s3_ck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   i2s3_ck_pc10: i2s3_ck_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   i2s2_sd_pb15: i2s2_sd_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
   };
   i2s3_sd_pb5: i2s3_sd_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x6))>;
   };
   i2s3_sd_pc12: i2s3_sd_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x6))>;
   };
   i2s2_ws_pb12: i2s2_ws_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
   };
   i2s3_ws_pa4: i2s3_ws_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
   };
   i2s3_ws_pa15: i2s3_ws_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x6))>;
   };
   spi1_miso_pa6: spi1_miso_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_miso_pa11: spi1_miso_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_miso_pb4: spi1_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_miso_pb14: spi2_miso_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi3_miso_pb4: spi3_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi3_miso_pc11: spi3_miso_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi1_mosi_pa7: spi1_mosi_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pa12: spi1_mosi_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pb5: spi1_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pb15: spi2_mosi_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi3_mosi_pb5: spi3_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi3_mosi_pc12: spi3_mosi_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi1_nss_pa4: spi1_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_nss_pa15: spi1_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pb12: spi2_nss_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi3_nss_pa4: spi3_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
    bias-pull-up;
   };
   spi3_nss_pa15: spi3_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x6))>;
    bias-pull-up;
   };
   spi1_sck_pa5: spi1_sck_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi1_sck_pb3: spi1_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb13: spi2_sck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi3_sck_pb3: spi3_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x6))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi3_sck_pc10: spi3_sck_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x6))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   tim10_ch1_pa6: tim10_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x3))>;
   };
   tim10_ch1_pb8: tim10_ch1_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x3))>;
   };
   tim10_ch1_pb12: tim10_ch1_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x3))>;
   };
   tim11_ch1_pa7: tim11_ch1_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x3))>;
   };
   tim11_ch1_pb9: tim11_ch1_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x3))>;
   };
   tim11_ch1_pb15: tim11_ch1_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x3))>;
   };
   tim2_ch1_pa0: tim2_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
   };
   tim2_ch2_pa1: tim2_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
   };
   tim2_ch3_pa2: tim2_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
   };
   tim2_ch4_pa3: tim2_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch1_pa5: tim2_ch1_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x1))>;
   };
   tim2_ch1_pa15: tim2_ch1_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim2_ch2_pb3: tim2_ch2_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch3_pb10: tim2_ch3_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim2_ch4_pb11: tim2_ch4_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim3_ch1_pa6: tim3_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim3_ch2_pa7: tim3_ch2_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim3_ch3_pb0: tim3_ch3_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim3_ch4_pb1: tim3_ch4_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim3_ch1_pb4: tim3_ch1_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x2))>;
   };
   tim3_ch2_pb5: tim3_ch2_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x2))>;
   };
   tim3_ch1_pc6: tim3_ch1_pc6 {
    pinmux = <(((((('C') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim3_ch2_pc7: tim3_ch2_pc7 {
    pinmux = <(((((('C') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim3_ch3_pc8: tim3_ch3_pc8 {
    pinmux = <(((((('C') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim3_ch4_pc9: tim3_ch4_pc9 {
    pinmux = <(((((('C') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   tim4_ch1_pb6: tim4_ch1_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim4_ch2_pb7: tim4_ch2_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim4_ch3_pb8: tim4_ch3_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim4_ch4_pb9: tim4_ch4_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   tim5_ch1_pa0: tim5_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim5_ch2_pa1: tim5_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim5_ch3_pa2: tim5_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x2))>;
   };
   tim5_ch4_pa3: tim5_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x2))>;
   };
   tim9_ch1_pa2: tim9_ch1_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x3))>;
   };
   tim9_ch2_pa3: tim9_ch2_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x3))>;
   };
   tim9_ch1_pb13: tim9_ch1_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x3))>;
   };
   tim9_ch2_pb14: tim9_ch2_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x3))>;
   };
   usart1_cts_pa11: usart1_cts_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_cts_pa0: usart2_cts_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_cts_pb13: usart3_cts_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rts_pa12: usart1_rts_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_rts_pa1: usart2_rts_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pb14: usart3_rts_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rx_pa10: usart1_rx_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
   };
   usart1_rx_pb7: usart1_rx_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x7))>;
   };
   usart2_rx_pa3: usart2_rx_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x7))>;
   };
   usart3_rx_pb11: usart3_rx_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
   };
   usart3_rx_pc11: usart3_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
   };
   uart4_rx_pc11: uart4_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x8))>;
   };
   uart5_rx_pd2: uart5_rx_pd2 {
    pinmux = <(((((('D') - 'A') * 0x10 + (2))) << 8) | (0x8))>;
   };
   usart1_tx_pa9: usart1_tx_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart1_tx_pb6: usart1_tx_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart2_tx_pa2: usart2_tx_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart3_tx_pb10: usart3_tx_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart3_tx_pc10: usart3_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
    bias-pull-up;
   };
   uart4_tx_pc10: uart4_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart5_tx_pc12: uart5_tx_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usb_dm_pa11: usb_dm_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0xa))>;
   };
   usb_dp_pa12: usb_dp_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0xa))>;
   };
  };
 };
};
/ {
 arduino_header: connector {
  compatible = "arduino-header-r3";
  #gpio-cells = <2>;
  gpio-map-mask = <0xffffffff 0xffffffc0>;
  gpio-map-pass-thru = <0 0x3f>;
  gpio-map = <0 0 &gpioa 0 0>,
      <1 0 &gpioa 1 0>,
      <2 0 &gpioa 4 0>,
      <3 0 &gpiob 0 0>,
      <4 0 &gpioc 1 0>,
      <5 0 &gpioc 0 0>,
      <6 0 &gpioa 3 0>,
      <7 0 &gpioa 2 0>,
      <8 0 &gpioa 10 0>,
      <9 0 &gpiob 3 0>,
      <10 0 &gpiob 5 0>,
      <11 0 &gpiob 4 0>,
      <12 0 &gpiob 10 0>,
      <13 0 &gpioa 8 0>,
      <14 0 &gpioa 9 0>,
      <15 0 &gpioc 7 0>,
      <16 0 &gpiob 6 0>,
      <17 0 &gpioa 7 0>,
      <18 0 &gpioa 6 0>,
      <19 0 &gpioa 5 0>,
      <20 0 &gpiob 9 0>,
      <21 0 &gpiob 8 0>;
 };
};
arduino_i2c: &i2c1 {};
arduino_serial: &usart2 {};
/ {
 model = "STMicroelectronics STM32L152RE-NUCLEO board";
 compatible = "st,stm32l152re-nucleo";
 chosen {
  zephyr,console = &usart2;
  zephyr,shell-uart = &usart2;
  zephyr,sram = &sram0;
  zephyr,flash = &flash0;
 };
 leds {
  compatible = "gpio-leds";
  green_led_0: led_0 {
   gpios = <&gpioa 5 (1 << 0)>;
   label = "User LD2";
  };
 };
 gpio_keys {
  compatible = "gpio-keys";
  user_button: button {
   label = "User";
   gpios = <&gpioc 13 (1 << 0)>;
  };
 };
 aliases {
  led0 = &green_led_0;
  sw0 = &user_button;
  eeprom-0 = &eeprom;
 };
};
&clk_hsi {
 status = "okay";
};
&pll {
 div = <2>;
 mul = <4>;
 clocks = <&clk_hsi>;
 status = "okay";
};
&rcc {
 clocks = <&pll>;
 clock-frequency = <((32) * 1000 * 1000)>;
 ahb-prescaler = <1>;
 apb1-prescaler = <1>;
 apb2-prescaler = <1>;
};
&usart2 {
 pinctrl-0 = <&usart2_tx_pa2 &usart2_rx_pa3>;
 current-speed = <115200>;
 status = "okay";
};
&i2c1 {
 pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb9>;
 status = "okay";
};
&eeprom {
 status = "okay";
};
&iwdg {
 status = "okay";
};
&rtc {
 status = "okay";
};
&adc1 {
 pinctrl-0 = <&adc_in0_pa0>;
 status = "okay";
};
&dac1 {
 status = "okay";
 pinctrl-0 = <&dac_out1_pa4>;
};
&flash0 {
 partitions {
  compatible = "fixed-partitions";
  #address-cells = <1>;
  #size-cells = <1>;
  storage_partition: partition@7f800 {
   label = "storage";
   reg = <0x0007f800 0x00000800>;
  };
 };
};
&timers3 {
 status = "okay";
 pwm3: pwm {
  status = "okay";
  pinctrl-0 = <&tim3_ch1_pa6>;
 };
};
&dma1 {
 status = "okay";
};
&usart3 {
 pinctrl-0 = <&usart3_tx_pb10 &usart3_rx_pb11>;
 current-speed = <115200>;
 dmas = <&dma1 2 0x20440>,
  <&dma1 3 0x20480>;
 dma-names = "tx", "rx";
 status = "okay";
};
&dma1 {
    status = "okay";
};
&flash0 {
    partitions {
        compatible = "fixed-partitions";
            boot_partitions: partition@0 {
                label = "mcuboot";
                reg = <0x00000000 0xc000>;
            };
            slot0_partition: partition@c000 {
                label = "image-0";
                reg = <0x0000C000 0x5c000>;
            };
            slot1_partition: partition@68000 {
                label = "image-1";
                reg = <0x000680000 0x5c000>;
            };
            scratch_partition: partition@c4000 {
                label = "image-scratch";
                reg = <0x000c4000 0x4000>;
            };
    };
};
/{
    chosen {
        zephyr,code-partition = &slot0_partition;
    };
};
